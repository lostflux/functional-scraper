Artificial Intelligence View All AI, ML and Deep Learning Auto ML Data Labelling Synthetic Data Conversational AI NLP Text-to-Speech Security View All Data Security and Privacy Network Security and Privacy Software Security Computer Hardware Security Cloud and Data Storage Security Data Infrastructure View All Data Science Data Management Data Storage and Cloud Big Data and Analytics Data Networks Automation View All Industrial Automation Business Process Automation Development Automation Robotic Process Automation Test Automation Enterprise Analytics View All Business Intelligence Disaster Recovery Business Continuity Statistical Analysis Predictive Analysis More Data Decision Makers Virtual Communication Team Collaboration UCaaS Virtual Reality Collaboration Virtual Employee Experience Programming & Development Product Development Application Development Test Management Development Languages What are low-code databases? Share on Facebook Share on X Share on LinkedIn Are you ready to bring more awareness to your brand? Consider becoming a sponsor for The AI Impact Tour. Learn more about the opportunities here.
Low-code databases are tools designed with simple user interfaces that can be used successfully even by those without any background in programming. They’re in strong demand because of the boom in low-code development. More and more new products are opening up opportunities for non-programmers through well-designed and simplified interfaces.
The term “low code” means that they expect it won’t take much programming to finish the job. Sometimes all it takes is dragging and dropping some icons, followed by some earnest clicking and, perhaps, filling out a few forms. The term is being used across a wide variety of enterprise products, and databases are just one corner. Indeed, many products are offering specialized services wrapped around a core database.
Consider the following scenario: Chris in receiving wants to track incoming packages from states with high COVID-19 rates. Pat in the PR department needs to keep a running list of all requests from reporters, a list that must be followed and updated by six other people on the team. The events team needs to build out databases for tracking attendees for each of the ten new conferences next year. No one is a skilled coder, and the development staff hides when everyone bangs on their door with a request for a new tool.
As workforces and workflows get more automated, this sort of scenario is playing out more frequently and is driving companies to adopt low-code databases.
VB Event The AI Impact Tour Connect with the enterprise AI community at VentureBeat’s AI Impact Tour coming to a city near you! The term “low code” is not just for the front-line products. It’s also finding a home in all corners of the IT stack, including some of the lower and normally more arcane levels, like the database. The endless command line invocations are being replaced, slowly but surely, with set-up wizards and prettier user interfaces.
There is plenty of debate about whether the products can fulfill the buzzword’s promise for anyone. While the beautiful screens and graphical user interfaces are real, some of the trickiest details are hidden beneath the facade. Sometimes it takes a skilled coder to understand the best way to store data so it can be sorted and retrieved efficiently.
What are some use cases for low-code databases? Both traditional developers and novices are able to create basic applications that connect users to databases. Some common use cases include: Record keeping — Office workers can create new database tables to track office functions without relying on full developers.
Customer interaction — Businesses that need to gather requests or send updates to customers can create outward-facing apps filled with data-rich forms.
Partnerships — It’s not just customer-facing applications; low-code tools can speed the development of new business relationships by reducing the iterations needed to support a new contract.
Experimentation — Low-code databases are popular for building prototypes and testing workflow. They don’t require the investment of large teams working over multiple months.
Who are the main providers of low-code databases? Microsoft was one of the original companies to market a low-code database. Its original version of Access , first shipped in 1992, was aimed at average computer users and eventually bundled with Office products like a word processor. People could create and fill a database with almost as much ease as writing a memo.
The latest set of tools is now marketed under the “ Power App ” banner, which supports sophisticated apps wrapped around a database. The tools are tightly integrated with basic Office applications and marketed to the same group of users. Users might not spend much time worrying about where the data goes, but many may be using a connection to Microsoft’s high-end flagship SQL Server.
Oracle’s database may have been one of the hardest to install at one time, but today the company markets some versions as “autonomous.” That is, the tool includes automated routines that handle many of the chores that were originally performed by humans. It is said to be “auto-scaling,” “auto-tuning,” “auto-repairing,” and “auto-provisioning.” There are also “automatic backups” and “auto-failover.” Many of these features are making life easier for the database administrators and making it simpler for the rest of the developers to handle the job on the side. While there are web interfaces for creating the databases, they may still be too complicated for ordinary users.
SAP calls its process “ Rapid Application Development ” and offers several tools for accessing the data in their cloud.
Ruum , for instance, will thread together icons to channel data into SAP processes. Its Robotic Process Automation tool includes AI features like text recognition to convert data automatically before storing it in the database.
Who are the upstart providers? It’s difficult to draw the line between a low-code database and any generic application. Many apps are just thin front ends wrapped around a database, so users may be storing their information in traditional databases without even realizing it. A layer of automation eases the flow, at least for common applications.
Some open source toolkits are designed to make this simple.
Drupal and Joomla , for instance, are content management systems designed to create databases filled with pages and articles. Drupal’s Webform module adds the ability to create elaborate surveys so users can input their own data. Other content management systems like WordPress can do much of the same thing, but they’re often more focused on building out blogs and other text documents.
The major cloud services are adding tools and offering multiple ways to create an app that stores data in the cloud’s data services. Google’s AppSheet offers a quick way to thread together an app that is tightly integrated with the office products in G Suite. It is one replacement for App Maker, an earlier effort that recently shut down.
The Google G Suite also includes Google Forms , one of the simplest ways to gather data from users into spreadsheets. To make things a bit more confusing, Google also supports AppEngine and AppScript , two other tools that simplify the process of creating apps but use enough of a programming language that they might not be considered “low code” even though they’re pretty easy to use.
Amazon is also pushing out new options. Its Honeycode offers pure drag-and-drop simplicity as a front end. Any data can be routed to any of the various AWS storage services and databases using Lambda functions. It also offers AppFlow , a tool for connecting different AWS services and also external ones like Salesforce.
Other cloud services are specializing in bringing computation close to the users with their distributed endpoints. Cloudflare’s Workers will respond quickly from the closest Cloudflare CDN node after executing snippets of traditional languages like JavaScript.
Airtable is concentrating on improving the user interface by adding an elegant presentation layer for the browser that turns its cloud-hosted database into a prettier, more sophisticated app. There are several major ways of presenting the data tables, from spreadsheet grids to calendars to kanban boards. They also begin with a number of templates for common use cases.
At some point, the products become so elaborate that they aren’t considered or marketed as merely databases. There are several dozen good examples that are packaged as “robotic process automation” or “hyperautomation.” Some of these include Appian , Kissflow , or Outsystems.
 All use many of the same techniques for enabling average users to write code in an easy way. All end up storing the data in a database. But at some point, the database is buried so deeply in the code that they stop fitting into the “low-code database” box.
Is there anything a low-code database can’t do? The sophistication and polish of low-code tools is substantial, and many simple tasks can be accomplished by developing an app that acts as a basic front-end to the database. If the job involves creating, updating, or deleting rows in a database, it can be the quickest way to deliver a tool to users.
Most of the time, low-code tools offer a backdoor for installing larger chunks of code to handle cases that might not be accomplished with the standard features. Skilled developers can make use of the low-code features to move quickly and then resort to more traditional code. AWS Lambda functions, for instance, can execute a fairly big block of code when triggered by Honeycode. Some people are writing elaborate simulations and computational jobs that take advantage of Lambda’s low cost.
But low-code solutions, and especially low-code databases, are often tripped up by small but important caveats in the workflow — ones that, for example, might involve someone in the back office explaining that an entry is valid on all days except on the second Tuesday of the month. Or perhaps when supplies run low, and orders from better customers are processed first. These kinds of details need programmers to write code.
This article is part of a series on enterprise database technology trends.
VentureBeat's mission is to be a digital town square for technical decision-makers to gain knowledge about transformative enterprise technology and transact.
Discover our Briefings.
The AI Impact Tour Join us for an evening full of networking and insights at VentureBeat's AI Impact Tour, coming to San Francisco, New York, and Los Angeles! VentureBeat Homepage Follow us on Facebook Follow us on X Follow us on LinkedIn Follow us on RSS Press Releases Contact Us Advertise Share a News Tip Contribute to DataDecisionMakers Careers Privacy Policy Terms of Service Do Not Sell My Personal Information © 2023 VentureBeat.
 All rights reserved.
