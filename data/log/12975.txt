Artificial Intelligence View All AI, ML and Deep Learning Auto ML Data Labelling Synthetic Data Conversational AI NLP Text-to-Speech Security View All Data Security and Privacy Network Security and Privacy Software Security Computer Hardware Security Cloud and Data Storage Security Data Infrastructure View All Data Science Data Management Data Storage and Cloud Big Data and Analytics Data Networks Automation View All Industrial Automation Business Process Automation Development Automation Robotic Process Automation Test Automation Enterprise Analytics View All Business Intelligence Disaster Recovery Business Continuity Statistical Analysis Predictive Analysis More Data Decision Makers Virtual Communication Team Collaboration UCaaS Virtual Reality Collaboration Virtual Employee Experience Programming & Development Product Development Application Development Test Management Development Languages Community Low-code/no-code could reshape business innovation Share on Facebook Share on X Share on LinkedIn Are you ready to bring more awareness to your brand? Consider becoming a sponsor for The AI Impact Tour. Learn more about the opportunities here.
By Adam Burden, North America lead of technology and chief software engineer of Accenture.
John Lennon and Paul McCartney are two of the greatest songwriters in music’s history. Without their talents, pop music as we know it wouldn’t exist. This makes it all the more surprising that neither of the two Beatles could actually read music — they learned the chords of each song by heart before committing them to vinyl. This suggests something important: creativity doesn’t need formal training to thrive, just a means of expression.
It’s a lesson that many enterprises can now apply to their systems using low-code / no-code tools. These tools enable everyone to build apps, even if they have little or no formal training in coding. Such tools have been around since the 1990s, but they’re only now being applied at scale with cloud services and enterprise-grade software development.
Recent research from Forrester predicts that low-code / no-code platforms will account for 75% of new app development by the end of 2021. These tools reflect the democratization of technology — and a considerable shift in how we manage, promote, and feed innovation in our businesses.
Automate the ordinary, unleash the extraordinary Even at this early stage of adoption, several compelling use cases are apparent. Most obviously, low-code / no-code can be used for the automation of repetitive and routine transactional tasks. Low-code / no-code turns software users into developers, giving them the tools to automate the ordinary and derive maximum value from the tools they use.
VB Event The AI Impact Tour Connect with the enterprise AI community at VentureBeat’s AI Impact Tour coming to a city near you! But low-code / no-code is about more than automating the ordinary, it’s also about unleashing the extraordinary. In the digital age, businesses need to move fast to outpace competitors and adapt to change. Applications, therefore, need to be continually developed, released, and refined at pace.
For instance, at the beginning of the COVID-19 pandemic, health care provider Geisinger saw a sudden 50% decline in outpatient visits and a surge in in-patient and ICU needs. The company faced a major challenge trying to get the appropriate healthcare professionals to the right places at the right time. It sprang to action using a low-code development platform from Quickbase Inc.
In just one week, Geisinger staff were able to add a COVID-19 resource hub to their mobile app that helped coordinate and reassign thousands of health care workers in their network based on patient needs.
Innovation in the fast lane Low-code / no-code is an important enabler of fast-paced innovation and benefits professional and citizen developers alike. First, low-code / no-code accelerates and simplifies agile sprints, as low-code / no-code tools can rapidly build prototype interfaces or processes. Low-code / no-code becomes the scaffolding for prototypes, which developers can then pad out with more detailed coding as needed.
Low-code / no-code also helps pro-coders by reducing their workload. The shortage of skilled coders represents a real drag on innovation and can overburden a company’s team of professional developers. Low-code / no-code provides a solution by creating a new breed of citizen developers able to share the workload.
Using Microsoft’s Power Apps, G&J Pepsi demonstrated exactly why this approach is such a game-changer. The company rapidly built and deployed transformative digital applications across its inventory and merchandising functions. In one case, employees with little to no software development experience created an app that would examine images of a store shelf to identify the number and type of bottles on it, then automatically order the correct items for restocking based on historic trends. In all, this group created eight applications without a professional developer on staff and saved $500,000 in the first year alone.
Professional coders are the Bachs and Beethovens of the enterprise, orchestrating complex lines of code to build the sort of sophisticated functions and algorithms that result from years of dedication and formal training. Other employees are our Lennons and McCartneys, creating beautiful and important applications that can change the world, but which are comparatively easier to build. Low-code / no-code may well free developers, but it also ends a monopoly on innovation.
Tips for low-code / no-code implementation Low-code / no-code is one of those disruptive movements that enterprises cannot afford to ignore. To do so would, ultimately, put the business at a competitive disadvantage. So, what should the CIO and other business leaders bear in mind when implementing a low-code / no-code approach? In my view, there are several key considerations: Review the buy vs. build equation.
For years, the balance has tipped in favor of buying commercial off-the-shelf products over building applications in-house. Low-code / no-code changes this equation. There’s still a compelling argument for using off-the-shelf software for commoditized and common core systems that directly impact the customer, employee, or partner experience. Yet major software vendors recognize that customers are no longer willing to wait for them to decide that a feature is important enough to build out and release six months from now — customers expect the new features quickly, and low-code / no-code features can help manage this expectation.
Map talent journeys.
 Low-code / no-code expands the pool of talent available for application development. For low-code / no-code users to achieve maximum results, training is a must. While deep technical skills will not always be required, citizen developers will need to be taught how to think like traditional developers and architects and reuse common services and functions for efficiency and consistency. Meanwhile, generations of developers trained in legacy systems such as mainframe and midrange can be upskilled to work in the cloud-first world of low-code / no-code, as they have invaluable knowledge of existing processes and systems.
Put security guardrails in place.
 Security and reusability are important issues. If you want your people to use the same authentication service for the applications that they’re building, you need to build in the appropriate level of governance. I recommend choosing low-code / no-code solutions that allows for customization of tools to create standards frameworks that citizen developers can use by default.
Start small and move slowly.
 Take enough time with your first low-code / no-code deployments to iron out any bad notes before they become a bigger issue. As your citizen developers and IT staff build competence and begin to understand potential use cases better, they can expand the low-code / no-code program and capabilities. This also allows time to adjust more challenging notes like security, data management and reusable components like authentication. Slow and steady will always win the low-code / no-code race.
Use the right instrument for the song.
 Low-code / no-code is one of many tools available to build custom systems, but just like you wouldn’t add in a drum for a guitar solo, it’s not always the right tool to use. Low-code / no-code is an excellent choice for departmental-level apps, helping to automate specific processes. It’s also a good choice to accelerate front-end development of more complex, enterprise level applications. But more sophisticated components or functions often mean leveraging professional coding tools like Visual Studio to achieve a more layered melody.
Lennon and McCartney were great because they gave full reign to their imaginations and enthusiasm, and subsequently changed the face of music in the process. Now, with low-code / no-code, enterprises are empowering their workers to do the same in the business context. I for one can’t wait to see the results. I’m betting that our era of digital innovation is only just getting started.
Adam Burden ( @adampburden ) is Accenture’s chief software engineer and the North America lead for Accenture Technology.
DataDecisionMakers Welcome to the VentureBeat community! DataDecisionMakers is where experts, including the technical people doing data work, can share data-related insights and innovation.
If you want to read about cutting-edge ideas and up-to-date information, best practices, and the future of data and data tech, join us at DataDecisionMakers.
You might even consider contributing an article of your own! Read More From DataDecisionMakers The AI Impact Tour Join us for an evening full of networking and insights at VentureBeat's AI Impact Tour, coming to San Francisco, New York, and Los Angeles! DataDecisionMakers Follow us on Facebook Follow us on X Follow us on LinkedIn Follow us on RSS Press Releases Contact Us Advertise Share a News Tip Contribute to DataDecisionMakers Careers Privacy Policy Terms of Service Do Not Sell My Personal Information © 2023 VentureBeat.
 All rights reserved.
