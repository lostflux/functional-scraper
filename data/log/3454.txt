Artificial Intelligence View All AI, ML and Deep Learning Auto ML Data Labelling Synthetic Data Conversational AI NLP Text-to-Speech Security View All Data Security and Privacy Network Security and Privacy Software Security Computer Hardware Security Cloud and Data Storage Security Data Infrastructure View All Data Science Data Management Data Storage and Cloud Big Data and Analytics Data Networks Automation View All Industrial Automation Business Process Automation Development Automation Robotic Process Automation Test Automation Enterprise Analytics View All Business Intelligence Disaster Recovery Business Continuity Statistical Analysis Predictive Analysis More Data Decision Makers Virtual Communication Team Collaboration UCaaS Virtual Reality Collaboration Virtual Employee Experience Programming & Development Product Development Application Development Test Management Development Languages Community Dissecting the hype over low-code Share on Facebook Share on X Share on LinkedIn Are you ready to bring more awareness to your brand? Consider becoming a sponsor for The AI Impact Tour. Learn more about the opportunities here.
We’ve reached the point where the industry attention being paid to low-code development has moved it from “a hot topic” to “normal.” Gartner , for instance, predicts that 65% of app activity will fall into this category by 2024. It’s a monumental industry shift. But – and I cannot stress this enough – it has already taken place.
If we’ve approached a steady state of normality, why keep hyping it? And are the promises attached to that hype, to put it charitably, overblown? For those unfamiliar with low-code, it’s the ability to use a graphical interface to create application software with little or no need to do any programming in the traditional sense. By abstracting the code, these low-code tools and platforms offer the ability to speed up the development process. That’s the promise. It’s not controversial.
Where the hyperbole comes in is what impact that will have on users, organizations and the industry as a whole.
VB Event The AI Impact Tour Connect with the enterprise AI community at VentureBeat’s AI Impact Tour coming to a city near you! First off, it’s important to recognize that low-code is not new.
 It traces its roots back to the rapid application development (RAD) environments of the 90s. We started calling such tools “low-code” a little more than a decade ago, and one could (and I do) strongly argue that it’s now pervasive. It’s not so much a matter of if companies are using low-code, but where.
 If IT isn’t doing it, users certainly are. The practice is so generic that it turns up in CRM, machine learning, BPM, ERP… it’s a long list. From that perspective, Gartner’s prediction is likely a lowball estimate, as low-code took over a significant portion of the market a long time ago.
So again, why the hype? What’s the big deal about low-code? I would (and do) argue that it’s really about two other trends.
The first is citizen development , a movement that is also not at all new but received a new and catchier name a little over a decade ago. The idea is that you can get more applications built by going past IT and having users do their own development, and since such users already know what they want, there’s no need to communicate requirements and risk confusion. Since few citizens have learned to code, let alone code well, citizen development leans heavily on the use of low-code platforms and tools.
The second trend is continuous improvement, also an old idea in new packaging – but a very worthy one. The notion is that no effort, no process, no product, no method should be set in stone; organizations should collect data, evaluate options, and look for ways to enhance and evolve things. In software, that means applications aren’t so much deliverables as they are ongoing relationships. Various methodologies operating under the banner of Agile reflect this mindset in the world of code, but an emerging supposition is that low-code is easier to adapt and evolve than code – an idea rife with caveats but an emerging idea nevertheless.
Low-code really can help both of these movements. It can also help traditional developers in traditional IT departments building traditional things. But not all low-code platforms and tools help these movements equally well.
Citizen development Low-code is all but required for citizen development.
 But there’s a real need for a maturity model here. Many proponents of citizen development put pressure on vendors to create tools that are so easy “anyone can use them.” But that idea is based on premises that don’t hold up very well. The first is that users want to develop applications for themselves. Not every salesperson, graphic artist, nurse, financial analyst, etc., wants to create applications. They have day jobs.
The next faulty assumption is that, but for the lack of easy tools, everyone could build what they need for themselves. That the only thing holding them back is that pesky need to type instructions in a text-based language of some kind. But there’s a reason that software development is a professional discipline. Taking away the need to code like a developer doesn’t take away the need to think like one.
Yet another faulty assumption is made by vendors, albeit based on demand. It’s a focus primarily on the construction part of application delivery. Professionals know full well that construction is perhaps 10% of the work required to deliver an application; one cannot omit design, testing, profiling, security, auditability, documentation, education, deployment, change management, and countless other needs for all but the simplest of solutions, and some (e.g., compliance auditing and security) might still be required even for “simple stuff.” Finally, simplicity doesn’t survive the long term. Before long, application builders grow to want more and more functionality. That can’t be done without sacrificing simplicity. And it often can’t be done without a vendor change. Before long, citizen development efforts start to resemble IT-driven projects.
Low-code tools and platforms that can truly help tend to focus on the entire delivery cycle, not just construction. They focus on productivity, not simplicity. They provide some tools for non-professionals and connected yet different tools to technical professionals – and they assist with the communication between them. Such approaches and tools aren’t necessarily the ones being the most hyped, but they’re doing the most good.
So it’s not so much that citizen development is growing (even though it is), but evolved citizen development is growing even more.
Continuous improvement What happens more often than not when applying low-code to continuous improvement is the focus on an initial release; a minimum viable product (MVP). To put something out there to collect data we can use to create the “real” product using “real” tools and platforms (e.g., code).
That’s not what continuous improvement really means, but that is where the hype is focused.
It’s also a function of the fact that most low-code tools focus almost exclusively on that construction phase of application delivery, treading a low-code effort as disposable. Most low-code tools have little support for structured deployment or change management.
But, with the right low-code tools, applications can be built quickly, deployed quickly, and modified and redeployed quickly on an ongoing and regular basis. They can take inspiration from the world of Agile development even if they eschew that school’s concepts that are tightly coupled to code.
In fact, better software gets built if continuous improvement is central to an organization’s culture. People (professionals and amateurs alike) aren’t very good at imagining and describing what they want, and even when what they asked for is what they get, they invariably realize that they forgot things. That circumstances have changed. And (the right) low-code tools enable rapid responses to those changing requirements, conditions, and desires.
The hype is in the wrong place It’s not that low-code is a nothing burger. It’s a very big deal – so big that it’s already widespread. So varied that thousands of vendors do low-code in very different ways. So matter-of-fact that many large commercial platforms include some low-code capabilities to allow for scripting and automation scenarios. It’s done because it contributes to productivity. It often contributes to clarity. It sometimes contributes to creative chaos. But it’s important to think of low-code development as, well, development.
What’s really going on is that low-code is incredibly useful to movements that are trending and are in the process of becoming big. And this kind of makes sense. Low-code makes many kinds of software development more productive. It’s going to accompany any areas of innovation, no matter what they are.
And it’s not alone.
Artificial intelligence shows up all over as well and is rapidly becoming a component one might rely on while working on something else. Business intelligence grows every day and collecting/analyzing/reacting to data is again becoming something that is used as a component of something bigger.
I tend to want to focus on those higher-level trends, not the technologies that enable them, but I suppose there’s plenty of hype to go around, and if low-code (or some providers of low-code) are doing such a good job that they’re enabling other innovative moments to flourish, it’s probably hype that’s well spent.
Mike Fitzmaurice is VP of North America at WEBCON.
DataDecisionMakers Welcome to the VentureBeat community! DataDecisionMakers is where experts, including the technical people doing data work, can share data-related insights and innovation.
If you want to read about cutting-edge ideas and up-to-date information, best practices, and the future of data and data tech, join us at DataDecisionMakers.
You might even consider contributing an article of your own! Read More From DataDecisionMakers The AI Impact Tour Join us for an evening full of networking and insights at VentureBeat's AI Impact Tour, coming to San Francisco, New York, and Los Angeles! DataDecisionMakers Follow us on Facebook Follow us on X Follow us on LinkedIn Follow us on RSS Press Releases Contact Us Advertise Share a News Tip Contribute to DataDecisionMakers Careers Privacy Policy Terms of Service Do Not Sell My Personal Information © 2023 VentureBeat.
 All rights reserved.
