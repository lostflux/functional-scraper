old id = 758
Distributed training with TensorFlow  |  TensorFlow Core
unknown
https://www.tensorflow.org/beta/guide/distribute_strategy

Introduction New to TensorFlow? TensorFlow The core open source ML library For JavaScript TensorFlow.js for ML using JavaScript For Mobile & Edge TensorFlow Lite for mobile and edge devices For Production TensorFlow Extended for end-to-end ML components TensorFlow (v2.14.0) Versions… TensorFlow.js TensorFlow Lite TFX Models & datasets Pre-trained models and datasets built by Google and the community Tools Ecosystem of tools to help you use TensorFlow Libraries & extensions Libraries and extensions built on TensorFlow TensorFlow Certificate program Differentiate yourself by demonstrating your ML proficiency Learn ML Educational resources to learn the fundamentals of ML with TensorFlow Responsible AI Resources and tools to integrate Responsible AI practices into your ML workflow Join Explore ways to get involved Blog Stay up to date with all things TensorFlow Forum ↗ Discussion platform for the TensorFlow community Groups User groups, interest groups and mailing lists Contribute Guide for contributing to code and documentation About Case studies English Español – América Latina Français Indonesia Italiano Polski Português – Brasil Tiếng Việt Türkçe Русский עברית العربيّة فارسی हिंदी বাংলা ภาษาไทย 中文 – 简体 日本語 한국어 Sign in TensorFlow Core Install Learn More Overview Tutorials Guide Migrate to TF2 TF 1 ↗ API More Resources More Community More Why TensorFlow More GitHub TensorFlow guide TensorFlow basics Overview Tensors Variables Automatic differentiation Graphs and functions Modules, layers, and models Training loops Keras Overview The Sequential model The Functional API Training & evaluation with the built-in methods Making new layers and models via subclassing Serialization and saving Customizing Saving Working with preprocessing layers Customizing what happens in fit() Writing a training loop from scratch Working with RNNs Understanding masking & padding Writing your own callbacks Transfer learning & fine-tuning Multi-GPU and distributed training Build with Core Overview Quickstart for Core Logistic regression Multilayer perceptrons Matrix approximation Custom optimizers DTensor with Core APIs TensorFlow in depth Tensor slicing Advanced autodiff Ragged tensor Sparse tensor Random number generation NumPy API NumPy API Type Promotion DTensor concepts Thinking in TensorFlow 2 Customization Create an op Extension types Data input pipelines tf.data Optimize pipeline performance Analyze pipeline performance Import and export Checkpoint SavedModel Import a JAX model using JAX2TF Accelerators Distributed training GPU TPU Performance Better performance with tf.function Profile TensorFlow performance Optimize GPU Performance Graph optimization Mixed precision Model Garden Overview Training with Orbit TFModels - NLP Example: Image classification Example: Object Detection Example: Semantic Segmentation Example: Instance Segmentation Estimators Estimator overview Appendix Version compatibility Introduction TensorFlow For JavaScript For Mobile & Edge For Production TensorFlow (v2.14.0) Versions… TensorFlow.js TensorFlow Lite TFX Models & datasets Tools Libraries & extensions TensorFlow Certificate program Learn ML Responsible AI Join Blog Forum ↗ Groups Contribute About Case studies TensorFlow Learn TensorFlow Core Guide Distributed training with TensorFlow Stay organized with collections Save and categorize content based on your preferences.
View on TensorFlow.org Run in Google Colab View source on GitHub Download notebook Overview tf.distribute.Strategy is a TensorFlow API to distribute training across multiple GPUs, multiple machines, or TPUs. Using this API, you can distribute your existing models and training code with minimal code changes.
tf.distribute.Strategy has been designed with these key goals in mind: Easy to use and support multiple user segments, including researchers, machine learning engineers, etc.
Provide good performance out of the box.
Easy switching between strategies.
You can distribute training using tf.distribute.Strategy with a high-level API like Keras Model.fit , as well as custom training loops (and, in general, any computation using TensorFlow).
In TensorFlow 2.x, you can execute your programs eagerly, or in a graph using tf.function.
tf.distribute.Strategy intends to support both these modes of execution, but works best with tf.function.
 Eager mode is only recommended for debugging purposes and not supported for tf.distribute.TPUStrategy.
 Although training is the focus of this guide, this API can also be used for distributing evaluation and prediction on different platforms.
You can use tf.distribute.Strategy with very few changes to your code, because the underlying components of TensorFlow have been changed to become strategy-aware. This includes variables, layers, models, optimizers, metrics, summaries, and checkpoints.
In this guide, you will learn about various types of strategies and how you can use them in different situations. To learn how to debug performance issues, check out the Optimize TensorFlow GPU performance guide.
For a deeper understanding of the concepts, watch the deep-dive presentation— Inside TensorFlow: tf.distribute.Strategy.
 This is especially recommended if you plan to write your own training loop.
Set up TensorFlow Types of strategies tf.distribute.Strategy intends to cover a number of use cases along different axes. Some of these combinations are currently supported and others will be added in the future. Some of these axes are: Synchronous vs asynchronous training: These are two common ways of distributing training with data parallelism. In sync training, all workers train over different slices of input data in sync, and aggregating gradients at each step. In async training, all workers are independently training over the input data and updating variables asynchronously. Typically sync training is supported via all-reduce and async through parameter server architecture.
Hardware platform: You may want to scale your training onto multiple GPUs on one machine, or multiple machines in a network (with 0 or more GPUs each), or on Cloud TPUs.
In order to support these use cases, TensorFlow has MirroredStrategy , TPUStrategy , MultiWorkerMirroredStrategy , ParameterServerStrategy , CentralStorageStrategy , as well as other strategies available. The next section explains which of these are supported in which scenarios in TensorFlow. Here is a quick overview: Training API MirroredStrategy TPUStrategy MultiWorkerMirroredStrategy CentralStorageStrategy ParameterServerStrategy Keras Model.fit Supported Supported Supported Experimental support Experimental support Custom training loop Supported Supported Supported Experimental support Experimental support Estimator API Limited Support Not supported Limited Support Limited Support Limited Support Experimental support means the APIs are not covered by any compatibility guarantees.
Estimator support is limited. Basic training and evaluation are experimental, and advanced features—such as scaffold—are not implemented. You should be using Keras or custom training loops if a use case is not covered. Estimators are not recommended for new code. Estimators run v1.Session -style code which is more difficult to write correctly, and can behave unexpectedly, especially when combined with TF 2 code. Estimators do fall under our compatibility guarantees , but will receive no fixes other than security vulnerabilities. Go to the migration guide for details.
MirroredStrategy tf.distribute.MirroredStrategy supports synchronous distributed training on multiple GPUs on one machine. It creates one replica per GPU device. Each variable in the model is mirrored across all the replicas. Together, these variables form a single conceptual variable called MirroredVariable.
 These variables are kept in sync with each other by applying identical updates.
Efficient all-reduce algorithms are used to communicate the variable updates across the devices. All-reduce aggregates tensors across all the devices by adding them up, and makes them available on each device. It’s a fused algorithm that is very efficient and can reduce the overhead of synchronization significantly. There are many all-reduce algorithms and implementations available, depending on the type of communication available between devices. By default, it uses the NVIDIA Collective Communication Library ( NCCL ) as the all-reduce implementation. You can choose from a few other options or write your own.
Here is the simplest way of creating MirroredStrategy : This will create a MirroredStrategy instance, which will use all the GPUs that are visible to TensorFlow, and NCCL—as the cross-device communication.
If you wish to use only some of the GPUs on your machine, you can do so like this: If you wish to override the cross device communication, you can do so using the cross_device_ops argument by supplying an instance of tf.distribute.CrossDeviceOps.
 Currently, tf.distribute.HierarchicalCopyAllReduce and tf.distribute.ReductionToOneDevice are two options other than tf.distribute.NcclAllReduce , which is the default.
TPUStrategy tf.distribute.TPUStrategy lets you run your TensorFlow training on Tensor Processing Units (TPUs).
 TPUs are Google's specialized ASICs designed to dramatically accelerate machine learning workloads. They are available on Google Colab , the TPU Research Cloud , and Cloud TPU.
In terms of distributed training architecture, TPUStrategy is the same MirroredStrategy —it implements synchronous distributed training. TPUs provide their own implementation of efficient all-reduce and other collective operations across multiple TPU cores, which are used in TPUStrategy.
Here is how you would instantiate TPUStrategy : To run any TPU code in Colab, you should select TPU as the Colab runtime. Refer to the Use TPUs guide for a complete example.
The TPUClusterResolver instance helps locate the TPUs. In Colab, you don't need to specify any arguments to it.
If you want to use this for Cloud TPUs: You must specify the name of your TPU resource in the tpu argument.
You must initialize the TPU system explicitly at the start of the program. This is required before TPUs can be used for computation. Initializing the TPU system also wipes out the TPU memory, so it's important to complete this step first in order to avoid losing state.
MultiWorkerMirroredStrategy tf.distribute.MultiWorkerMirroredStrategy is very similar to MirroredStrategy.
 It implements synchronous distributed training across multiple workers, each with potentially multiple GPUs. Similar to tf.distribute.MirroredStrategy , it creates copies of all variables in the model on each device across all workers.
Here is the simplest way of creating MultiWorkerMirroredStrategy : MultiWorkerMirroredStrategy has two implementations for cross-device communications.
CommunicationImplementation.RING is RPC -based and supports both CPUs and GPUs.
CommunicationImplementation.NCCL uses NCCL and provides state-of-art performance on GPUs but it doesn't support CPUs.
CollectiveCommunication.AUTO defers the choice to Tensorflow. You can specify them in the following way: One of the key differences to get multi worker training going, as compared to multi-GPU training, is the multi-worker setup. The 'TF_CONFIG' environment variable is the standard way in TensorFlow to specify the cluster configuration to each worker that is part of the cluster. Learn more in the setting up TF_CONFIG section of this document.
For more details about MultiWorkerMirroredStrategy , consider the following tutorials: Multi-worker training with Keras Model.fit Multi-worker training with a custom training loop ParameterServerStrategy Parameter server training is a common data-parallel method to scale up model training on multiple machines. A parameter server training cluster consists of workers and parameter servers. Variables are created on parameter servers and they are read and updated by workers in each step. Check out the Parameter server training tutorial for details.
In TensorFlow 2, parameter server training uses a central coordinator-based architecture via the tf.distribute.experimental.coordinator.ClusterCoordinator class.
In this implementation, the worker and parameter server tasks run tf.distribute.Server s that listen for tasks from the coordinator. The coordinator creates resources, dispatches training tasks, writes checkpoints, and deals with task failures.
In the programming running on the coordinator, you will use a ParameterServerStrategy object to define a training step and use a ClusterCoordinator to dispatch training steps to remote workers. Here is the simplest way to create them: To learn more about ParameterServerStrategy , check out the Parameter server training with Keras Model.fit and a custom training loop tutorial.
You will need to configure the 'TF_CONFIG' environment variable if you use TFConfigClusterResolver.
 It is similar to 'TF_CONFIG' in MultiWorkerMirroredStrategy but has additional caveats.
In TensorFlow 1, ParameterServerStrategy is available only with an Estimator via tf.compat.v1.distribute.experimental.ParameterServerStrategy symbol.
This strategy is experimental as it is currently under active development.
CentralStorageStrategy tf.distribute.experimental.CentralStorageStrategy does synchronous training as well. Variables are not mirrored, instead they are placed on the CPU and operations are replicated across all local GPUs. If there is only one GPU, all variables and operations will be placed on that GPU.
Create an instance of CentralStorageStrategy by: This will create a CentralStorageStrategy instance which will use all visible GPUs and CPU. Update to variables on replicas will be aggregated before being applied to variables.
This strategy is experimental , as it is currently a work in progress.
Other strategies In addition to the above strategies, there are two other strategies which might be useful for prototyping and debugging when using tf.distribute APIs.
Default Strategy The Default Strategy is a distribution strategy which is present when no explicit distribution strategy is in scope. It implements the tf.distribute.Strategy interface but is a pass-through and provides no actual distribution. For instance, Strategy.run(fn) will simply call fn.
 Code written using this strategy should behave exactly as code written without any strategy. You can think of it as a "no-op" strategy.
The Default Strategy is a singleton—and one cannot create more instances of it. It can be obtained using tf.distribute.get_strategy outside any explicit strategy's scope (the same API that can be used to get the current strategy inside an explicit strategy's scope).
This strategy serves two main purposes: It allows writing distribution-aware library code unconditionally. For example, in tf.keras.optimizers you can use tf.distribute.get_strategy and use that strategy for reducing gradients—it will always return a strategy object on which you can call the Strategy.reduce API.
Similar to library code, it can be used to write end users' programs to work with and without distribution strategy, without requiring conditional logic. Here's a sample code snippet illustrating this: OneDeviceStrategy tf.distribute.OneDeviceStrategy is a strategy to place all variables and computation on a single specified device.
This strategy is distinct from the Default Strategy in a number of ways. In the Default Strategy, the variable placement logic remains unchanged when compared to running TensorFlow without any distribution strategy. But when using OneDeviceStrategy , all variables created in its scope are explicitly placed on the specified device. Moreover, any functions called via OneDeviceStrategy.run will also be placed on the specified device.
Input distributed through this strategy will be prefetched to the specified device. In the Default Strategy, there is no input distribution.
Similar to the Default Strategy, this strategy could also be used to test your code before switching to other strategies which actually distribute to multiple devices/machines. This will exercise the distribution strategy machinery somewhat more than the Default Strategy, but not to the full extent of using, for example, MirroredStrategy or TPUStrategy.
 If you want code that behaves as if there is no strategy, then use the Default Strategy.
So far you've learned about different strategies and how you can instantiate them. The next few sections show the different ways in which you can use them to distribute your training.
Use tf.distribute.Strategy with Keras Model.fit tf.distribute.Strategy is integrated into tf.keras , which is TensorFlow's implementation of the Keras API specification.
tf.keras is a high-level API to build and train models. By integrating into the tf.keras backend, it's seamless for you to distribute your training written in the Keras training framework using Model.fit.
Here's what you need to change in your code: Create an instance of the appropriate tf.distribute.Strategy.
Move the creation of Keras model, optimizer and metrics inside strategy.scope.
 Thus the code in the model's call() , train_step() , and test_step() methods will all be distributed and executed on the accelerator(s).
TensorFlow distribution strategies support all types of Keras models— Sequential , Functional , and subclassed Here is a snippet of code to do this for a very simple Keras model with one Dense layer: This example uses MirroredStrategy , so you can run this on a machine with multiple GPUs.
strategy.scope() indicates to Keras which strategy to use to distribute the training. Creating models/optimizers/metrics inside this scope allows you to create distributed variables instead of regular variables. Once this is set up, you can fit your model like you would normally.
MirroredStrategy takes care of replicating the model's training on the available GPUs, aggregating gradients, and more.
Here a tf.data.Dataset provides the training and eval input. You can also use NumPy arrays: In both cases—with Dataset or NumPy—each batch of the given input is divided equally among the multiple replicas. For instance, if you are using the MirroredStrategy with 2 GPUs, each batch of size 10 will be divided among the 2 GPUs, with each receiving 5 input examples in each step. Each epoch will then train faster as you add more GPUs. Typically, you would want to increase your batch size as you add more accelerators, so as to make effective use of the extra computing power. You will also need to re-tune your learning rate, depending on the model. You can use strategy.num_replicas_in_sync to get the number of replicas.
What's supported now? Training API MirroredStrategy TPUStrategy MultiWorkerMirroredStrategy ParameterServerStrategy CentralStorageStrategy Keras Model.fit Supported Supported Supported Experimental support Experimental support Examples and tutorials Here is a list of tutorials and examples that illustrate the above integration end-to-end with Keras Model.fit : Tutorial : Training with Model.fit and MirroredStrategy.
Tutorial : Training with Model.fit and MultiWorkerMirroredStrategy.
Guide : Contains an example of using Model.fit and TPUStrategy.
Tutorial : Parameter server training with Model.fit and ParameterServerStrategy.
Tutorial : Fine-tuning BERT for many tasks from the GLUE benchmark with Model.fit and TPUStrategy.
TensorFlow Model Garden repository containing collections of state-of-the-art models implemented using various strategies.
Use tf.distribute.Strategy with custom training loops As demonstrated above, using tf.distribute.Strategy with Keras Model.fit requires changing only a couple lines of your code. With a little more effort, you can also use tf.distribute.Strategy with custom training loops.
If you need more flexibility and control over your training loops than is possible with Estimator or Keras, you can write custom training loops. For instance, when using a GAN, you may want to take a different number of generator or discriminator steps each round. Similarly, the high level frameworks are not very suitable for Reinforcement Learning training.
The tf.distribute.Strategy classes provide a core set of methods to support custom training loops. Using these may require minor restructuring of the code initially, but once that is done, you should be able to switch between GPUs, TPUs, and multiple machines simply by changing the strategy instance.
Below is a brief snippet illustrating this use case for a simple training example using the same Keras model as before.
First, create the model and optimizer inside the strategy's scope. This ensures that any variables created with the model and optimizer are mirrored variables.
Next, create the input dataset and call tf.distribute.Strategy.experimental_distribute_dataset to distribute the dataset based on the strategy.
Then, define one step of the training. Use tf.GradientTape to compute gradients and optimizer to apply those gradients to update your model's variables. To distribute this training step, put it in a function train_step and pass it to tf.distribute.Strategy.run along with the dataset inputs you got from the dist_dataset created before: A few other things to note in the code above: You used tf.nn.compute_average_loss to reduce the per-example prediction losses to a scalar.
tf.nn.compute_average_loss sums the per example loss and divides the sum by the global batch size. This is important because later after the gradients are calculated on each replica, they are aggregated across the replicas by summing them.
By default, the global batch size is taken to be tf.get_strategy().num_replicas_in_sync * tf.shape(per_example_loss)[0].
 It can also be specified explicitly as a keyword argument global_batch_size=.
 Without short batches, the default is equivalent to tf.nn.compute_average_loss(..., global_batch_size=global_batch_size) with the global_batch_size defined above. (For more on short batches and how to avoid or handle them, see the Custom Training tutorial.
) You used tf.nn.scale_regularization_loss to scale regularization losses registered with the Model object, if any, by 1/num_replicas_in_sync as well. For those regularization losses that are input-dependent, it falls on the modeling code, not the custom training loop, to perform the averaging over the per-replica(!) batch size; that way the modeling code can remain agnostic of replication while the training loop remains agnostic of how regularization losses are computed.
When you call apply_gradients within a distribution strategy scope, its behavior is modified. Specifically, before applying gradients on each parallel instance during synchronous training, it performs a sum-over-all-replicas of the gradients.
You also used the tf.distribute.Strategy.reduce API to aggregate the results returned by tf.distribute.Strategy.run for reporting.
tf.distribute.Strategy.run returns results from each local replica in the strategy, and there are multiple ways to consume this result. You can reduce them to get an aggregated value. You can also do tf.distribute.Strategy.experimental_local_results to get the list of values contained in the result, one per local replica.
Finally, once you have defined the training step, you can iterate over dist_dataset and run the training in a loop: In the example above, you iterated over the dist_dataset to provide input to your training. You are also provided with the tf.distribute.Strategy.make_experimental_numpy_dataset to support NumPy inputs. You can use this API to create a dataset before calling tf.distribute.Strategy.experimental_distribute_dataset.
Another way of iterating over your data is to explicitly use iterators. You may want to do this when you want to run for a given number of steps as opposed to iterating over the entire dataset. The above iteration would now be modified to first create an iterator and then explicitly call next on it to get the input data.
This covers the simplest case of using tf.distribute.Strategy API to distribute custom training loops.
What's supported now? Training API MirroredStrategy TPUStrategy MultiWorkerMirroredStrategy ParameterServerStrategy CentralStorageStrategy Custom training loop Supported Supported Supported Experimental support Experimental support Examples and tutorials Here are some examples for using distribution strategies with custom training loops: Tutorial : Training with a custom training loop and MirroredStrategy.
Tutorial : Training with a custom training loop and MultiWorkerMirroredStrategy.
Guide : Contains an example of a custom training loop with TPUStrategy.
Tutorial : Parameter server training with a custom training loop and ParameterServerStrategy.
TensorFlow Model Garden repository containing collections of state-of-the-art models implemented using various strategies.
Other topics This section covers some topics that are relevant to multiple use cases.
Setting up the TF_CONFIG environment variable For multi-worker training, as mentioned before, you need to set up the 'TF_CONFIG' environment variable for each binary running in your cluster. The 'TF_CONFIG' environment variable is a JSON string which specifies what tasks constitute a cluster, their addresses and each task's role in the cluster. The tensorflow/ecosystem repo provides a Kubernetes template, which sets up 'TF_CONFIG' for your training tasks.
There are two components of 'TF_CONFIG' : a cluster and a task.
A cluster provides information about the training cluster, which is a dict consisting of different types of jobs such as workers. In multi-worker training, there is usually one worker that takes on a little more responsibility like saving checkpoint and writing summary file for TensorBoard in addition to what a regular worker does. Such worker is referred to as the "chief" worker, and it is customary that the worker with index 0 is appointed as the chief worker (in fact this is how tf.distribute.Strategy is implemented).
A task on the other hand provides information about the current task. The first component cluster is the same for all workers, and the second component task is different on each worker and specifies the type and index of that worker.
One example of 'TF_CONFIG' is: This 'TF_CONFIG' specifies that there are three workers and two "ps" tasks in the "cluster" along with their hosts and ports. The "task" part specifies the role of the current task in the "cluster" —worker 1 (the second worker). Valid roles in a cluster are "chief" , "worker" , "ps" , and "evaluator".
 There should be no "ps" job except when using tf.distribute.experimental.ParameterServerStrategy.
What's next? tf.distribute.Strategy is actively under development. Try it out and provide your feedback using GitHub issues.
Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License , and code samples are licensed under the Apache 2.0 License.
 For details, see the Google Developers Site Policies.
 Java is a registered trademark of Oracle and/or its affiliates.
Last updated 2023-08-19 UTC.
Stay connected Blog Forum GitHub Twitter YouTube Support Issue tracker Release notes Stack Overflow Brand guidelines Cite TensorFlow Terms Privacy Sign up for the TensorFlow newsletter Subscribe English Español – América Latina Français Indonesia Italiano Polski Português – Brasil Tiếng Việt Türkçe Русский עברית العربيّة فارسی हिंदी বাংলা ภาษาไทย 中文 – 简体 日本語 한국어
