old id = 756
Stochastic gradient descent - Wikipedia
2011
https://en.wikipedia.org/wiki/Stochastic_gradient_descent

Main menu Main page Contents Current events Random article About Wikipedia Contact us Donate Help Learn to edit Community portal Recent changes Upload file Search Create account Log in Personal tools Create account Log in learn more Contributions Talk Contents (Top) 1 Background 2 Iterative method 3 Example 4 History 5 Notable applications 6 Extensions and variants Toggle Extensions and variants subsection 6.1 Implicit updates (ISGD) 6.2 Momentum 6.3 Averaging 6.4 AdaGrad 6.5 RMSProp 6.6 Adam 6.7 Sign-based stochastic gradient descent 6.8 Backtracking line search 6.9 Second-order methods 7 Approximations in continuous time 8 Notes 9 See also 10 References 11 Further reading 12 External links Toggle the table of contents Stochastic gradient descent 10 languages Català Español فارسی Français Italiano 日本語 Русский Shqip Українська 粵語 Edit links Article Talk English Read Edit View history Tools Read Edit View history What links here Related changes Upload file Special pages Permanent link Page information Cite this page Get shortened URL Wikidata item Download as PDF Printable version Part of a series on Machine learning and data mining Paradigms Supervised learning Unsupervised learning Online learning Batch learning Meta-learning Semi-supervised learning Self-supervised learning Reinforcement learning Rule-based learning Quantum machine learning Problems Classification Generative model Regression Clustering dimension reduction density estimation Anomaly detection Data Cleaning AutoML Association rules Semantic analysis Structured prediction Feature engineering Feature learning Learning to rank Grammar induction Ontology learning Multimodal learning Supervised learning ( classification • regression ) Apprenticeship learning Decision trees Ensembles Bagging Boosting Random forest k -NN Linear regression Naive Bayes Artificial neural networks Logistic regression Perceptron Relevance vector machine (RVM) Support vector machine (SVM) Clustering BIRCH CURE Hierarchical k -means Fuzzy Expectation–maximization (EM) DBSCAN OPTICS Mean shift Dimensionality reduction Factor analysis CCA ICA LDA NMF PCA PGD t-SNE SDL Structured prediction Graphical models Bayes net Conditional random field Hidden Markov Anomaly detection RANSAC k -NN Local outlier factor Isolation forest Artificial neural network Autoencoder Cognitive computing Deep learning DeepDream Feedforward neural network Recurrent neural network LSTM GRU ESN reservoir computing Restricted Boltzmann machine GAN Diffusion model SOM Convolutional neural network U-Net Transformer Vision Spiking neural network Memtransistor Electrochemical RAM (ECRAM) Reinforcement learning Q-learning SARSA Temporal difference (TD) Multi-agent Self-play Learning with humans Active learning Crowdsourcing Human-in-the-loop Model diagnostics Learning curve Mathematical foundations Kernel machines Bias–variance tradeoff Computational learning theory Empirical risk minimization Occam learning PAC learning Statistical learning VC theory Machine-learning venues ECML PKDD NeurIPS ICML ICLR IJCAI ML JMLR Related articles Glossary of artificial intelligence List of datasets for machine-learning research List of datasets in computer vision and image processing Outline of machine learning.
mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em} v t e Stochastic gradient descent (often abbreviated SGD ) is an iterative method for optimizing an objective function with suitable smoothness properties (e.g.
differentiable or subdifferentiable ). It can be regarded as a stochastic approximation of gradient descent optimization, since it replaces the actual gradient (calculated from the entire data set ) by an estimate thereof (calculated from a randomly selected subset of the data). Especially in high-dimensional optimization problems this reduces the very high computational burden , achieving faster iterations in exchange for a lower convergence rate.
[1] While the basic idea behind stochastic approximation can be traced back to the Robbins–Monro algorithm of the 1950s, stochastic gradient descent has become an important optimization method in machine learning.
[2] Background [ edit ] Both statistical estimation and machine learning consider the problem of minimizing an objective function that has the form of a sum: w {\displaystyle w} Q ( w ) {\displaystyle Q(w)} Q i {\displaystyle Q_{i}} i {\displaystyle i} In classical statistics, sum-minimization problems arise in least squares and in maximum-likelihood estimation (for independent observations). The general class of estimators that arise as minimizers of sums are called M-estimators.
 However, in statistics, it has been long recognized that requiring even local minimization is too restrictive for some problems of maximum-likelihood estimation.
[3] Therefore, contemporary statistical theorists often consider stationary points of the likelihood function (or zeros of its derivative, the score function , and other estimating equations ).
The sum-minimization problem also arises for empirical risk minimization.
 In this Q i ( w ) {\displaystyle Q_{i}(w)} is the value of the loss function at i {\displaystyle i} -th example, and Q ( w ) {\displaystyle Q(w)} is the empirical risk.
When used to minimize the above function, a standard (or "batch") gradient descent method would perform the following iterations: η {\displaystyle \eta } In many cases, the summand functions have a simple form that enables inexpensive evaluations of the sum-function and the sum gradient. For example, in statistics, one-parameter exponential families allow economical function-evaluations and gradient-evaluations.
However, in other cases, evaluating the sum-gradient may require expensive evaluations of the gradients from all summand functions. When the training set is enormous and no simple formulas exist, evaluating the sums of gradients becomes very expensive, because evaluating the gradient requires evaluating all the summand functions' gradients. To economize on the computational cost at every iteration, stochastic gradient descent samples a subset of summand functions at every step. This is very effective in the case of large-scale machine learning problems.
[4] Iterative method [ edit ] In stochastic (or "on-line") gradient descent, the true gradient of Q ( w ) {\displaystyle Q(w)} is approximated by a gradient at a single sample: In pseudocode, stochastic gradient descent can be presented as : Choose an initial vector of parameters w {\displaystyle w} and learning rate η {\displaystyle \eta }.
Repeat until an approximate minimum is obtained: Randomly shuffle samples in the training set.
For i = 1 , 2 ,...
, n {\displaystyle i=1,2,...,n} , do: w := w − η ∇ Q i ( w ).
{\displaystyle w:=w-\eta \nabla Q_{i}(w).} A compromise between computing the true gradient and the gradient at a single sample is to compute the gradient against more than one training sample (called a "mini-batch") at each step. This can perform significantly better than "true" stochastic gradient descent described, because the code can make use of vectorization libraries rather than computing each step separately as was first shown in [6] where it was called "the bunch-mode back-propagation algorithm". It may also result in smoother convergence, as the gradient computed at each step is averaged over more training samples.
The convergence of stochastic gradient descent has been analyzed using the theories of convex minimization and of stochastic approximation.
 Briefly, when the learning rates η {\displaystyle \eta } decrease with an appropriate rate, and subject to relatively mild assumptions, stochastic gradient descent converges almost surely to a global minimum when the objective function is convex or pseudoconvex , and otherwise converges almost surely to a local minimum.
[7] [8] This is in fact a consequence of the Robbins–Siegmund theorem.
[9] Example [ edit ] Suppose we want to fit a straight line y ^ = w 1 + w 2 x {\displaystyle {\hat {y}}=w_{1}+w_{2}x} to a training set with observations ( x 1 , x 2 , … , x n ) {\displaystyle (x_{1},x_{2},\ldots ,x_{n})} and corresponding estimated responses ( y ^ 1 , y ^ 2 , … , y ^ n ) {\displaystyle ({\hat {y}}_{1},{\hat {y}}_{2},\ldots ,{\hat {y}}_{n})} using least squares.
 The objective function to be minimized is The last line in the above pseudocode for this specific problem will become: Note that in each iteration or update step, the gradient is only evaluated at a single x i {\displaystyle x_{i}}.
 This is the key difference between stochastic gradient descent and batched gradient descent.
History [ edit ] In 1951, Herbert Robbins and Sutton Monro introduced the earliest stochastic approximation methods, preceding stochastic gradient descent.
[10] Building on this work one year later, Jack Kiefer and Jacob Wolfowitz published an optimization algorithm very close to stochastic gradient descent, using differences as an approximation of the gradient.
[11] Later in the 1950s, Frank Rosenblatt used SGD to optimize his perceptron model , demonstrating the first applicability of stochastic gradient descent to neural networks.
[12] Backpropagation was first described in 1986, with stochastic gradient descent being used to efficiently optimize parameters across neural networks with multiple hidden layers.
 Soon after, another improvement was developed: mini-batch gradient descent, where small batches of data are substituted for single samples. In 1997, the practical performance benefits from vectorization achievable with such small batches were first explored, [13] paving the way for efficient optimization in machine learning. As of 2023, this mini-batch approach remains the norm for training neural networks, balancing the benefits of stochastic gradient descent with gradient descent.
[14] By the 1980s, momentum had already been introduced, and was added to SGD optimization techniques in 1986.
[15] However, these optimization techniques assumed constant hyperparameters , i.e. a fixed learning rate and momentum parameter. In the 2010s, adaptive approaches to applying SGD with a per-parameter learning rate were introduced with AdaGrad (for "Adaptive Gradient") in 2011 [16] and RMSprop (for "Root Mean Square Propagation") in 2012.
[17] In 2014, Adam (for "Adaptive Moment Estimation") was published, applying the adaptive approaches of RMSprop to momentum; many improvements and branches of Adam were then developed such as Adadelta, Adagrad, AdamW, and Adamax.
[18] [19] Within machine learning, approaches to optimization in 2023 are dominated by Adam-derived optimizers. TensorFlow and PyTorch, by far the most popular machine learning libraries, [20] as of 2023 largely only include Adam-derived optimizers, as well as predecessors to Adam such as RMSprop and classic SGD. PyTorch also partially supports LBFGS, a line-search method, but only for single-device setups without parameter groups.
[21] [22] Notable applications [ edit ] Stochastic gradient descent is a popular algorithm for training a wide range of models in machine learning , including (linear) support vector machines , logistic regression (see, e.g., Vowpal Wabbit ) and graphical models.
[23] When combined with the backpropagation algorithm, it is the de facto standard algorithm for training artificial neural networks.
[24] Its use has been also reported in the Geophysics community, specifically to applications of Full Waveform Inversion (FWI).
[25] Stochastic gradient descent competes with the L-BFGS algorithm, [ citation needed ] which is also widely used. Stochastic gradient descent has been used since at least 1960 for training linear regression models, originally under the name ADALINE.
[26] Another stochastic gradient descent algorithm is the least mean squares (LMS) adaptive filter.
Extensions and variants [ edit ] Many improvements on the basic stochastic gradient descent algorithm have been proposed and used. In particular, in machine learning, the need to set a learning rate (step size) has been recognized as problematic. Setting this parameter too high can cause the algorithm to diverge; setting it too low makes it slow to converge.
[27] A conceptually simple extension of stochastic gradient descent makes the learning rate a decreasing function η t of the iteration number t , giving a learning rate schedule , so that the first iterations cause large changes in the parameters, while the later ones do only fine-tuning. Such schedules have been known since the work of MacQueen on k -means clustering.
[28] Practical guidance on choosing the step size in several variants of SGD is given by Spall.
[29] Implicit updates (ISGD) [ edit ] As mentioned earlier, classical stochastic gradient descent is generally sensitive to learning rate η.
 Fast convergence requires large learning rates but this may induce numerical instability. The problem can be largely solved [30] by considering implicit updates whereby the stochastic gradient is evaluated at the next iterate rather than the current one: This equation is implicit since w n e w {\displaystyle w^{\rm {new}}} appears on both sides of the equation. It is a stochastic form of the proximal gradient method since the update can also be written as: As an example, consider least squares with features x 1 , … , x n ∈ R p {\displaystyle x_{1},\ldots ,x_{n}\in \mathbb {R} ^{p}} and observations y 1 , … , y n ∈ R {\displaystyle y_{1},\ldots ,y_{n}\in \mathbb {R} }.
 We wish to solve: x j ′ w = x j 1 w 1 + x j , 2 w 2 +...
+ x j , p w p {\displaystyle x_{j}'w=x_{j1}w_{1}+x_{j,2}w_{2}+...+x_{j,p}w_{p}} x {\displaystyle x} where i {\displaystyle i} is uniformly sampled between 1 and n {\displaystyle n}.
 Although theoretical convergence of this procedure happens under relatively mild assumptions, in practice the procedure can be quite unstable. In particular, when η {\displaystyle \eta } is misspecified so that I − η x i x i ′ {\displaystyle I-\eta x_{i}x_{i}'} has large absolute eigenvalues with high probability, the procedure may diverge numerically within a few iterations. In contrast, implicit stochastic gradient descent (shortened as ISGD) can be solved in closed-form as: This procedure will remain numerically stable virtually for all η {\displaystyle \eta } as the learning rate is now normalized. Such comparison between classical and implicit stochastic gradient descent in the least squares problem is very similar to the comparison between least mean squares (LMS) and normalized least mean squares filter (NLMS).
Even though a closed-form solution for ISGD is only possible in least squares, the procedure can be efficiently implemented in a wide range of models. Specifically, suppose that Q i ( w ) {\displaystyle Q_{i}(w)} depends on w {\displaystyle w} only through a linear combination with features x i {\displaystyle x_{i}} , so that we can write ∇ w Q i ( w ) = − q ( x i ′ w ) x i {\displaystyle \nabla _{w}Q_{i}(w)=-q(x_{i}'w)x_{i}} , where q ( ) ∈ R {\displaystyle q()\in \mathbb {R} } may depend on x i , y i {\displaystyle x_{i},y_{i}} as well but not on w {\displaystyle w} except through x i ′ w {\displaystyle x_{i}'w}.
 Least squares obeys this rule, and so does logistic regression , and most generalized linear models.
 For instance, in least squares, q ( x i ′ w ) = y i − x i ′ w {\displaystyle q(x_{i}'w)=y_{i}-x_{i}'w} , and in logistic regression q ( x i ′ w ) = y i − S ( x i ′ w ) {\displaystyle q(x_{i}'w)=y_{i}-S(x_{i}'w)} , where S ( u ) = e u / ( 1 + e u ) {\displaystyle S(u)=e^{u}/(1+e^{u})} is the logistic function.
 In Poisson regression , q ( x i ′ w ) = y i − e x i ′ w {\displaystyle q(x_{i}'w)=y_{i}-e^{x_{i}'w}} , and so on.
In such settings, ISGD is simply implemented as follows. Let f ( ξ ) = η q ( x i ′ w o l d + ξ ‖ x i ‖ 2 ) {\displaystyle f(\xi )=\eta q(x_{i}'w^{old}+\xi \|x_{i}\|^{2})} , where ξ {\displaystyle \xi } is scalar. Then, ISGD is equivalent to: The scaling factor ξ ∗ ∈ R {\displaystyle \xi ^{\ast }\in \mathbb {R} } can be found through the bisection method since in most regular models, such as the aforementioned generalized linear models, function q ( ) {\displaystyle q()} is decreasing, and thus the search bounds for ξ ∗ {\displaystyle \xi ^{\ast }} are [ min ( 0 , f ( 0 ) ) , max ( 0 , f ( 0 ) ) ] {\displaystyle [\min(0,f(0)),\max(0,f(0))]}.
Momentum [ edit ] Further proposals include the momentum method or the heavy ball method , which in ML context appeared in Rumelhart , Hinton and Williams ' paper on backpropagation learning [31] and borrowed the idea from Soviet mathematician Boris Polyak's 1964 article on solving functional equations.
[32] Stochastic gradient descent with momentum remembers the update Δ w at each iteration, and determines the next update as a linear combination of the gradient and the previous update: [33] [34] where the parameter w {\displaystyle w} which minimizes Q ( w ) {\displaystyle Q(w)} is to be estimated , η {\displaystyle \eta } is a step size (sometimes called the learning rate in machine learning) and α {\displaystyle \alpha } is an exponential decay factor between 0 and 1 that determines the relative contribution of the current gradient and earlier gradients to the weight change.
The name momentum stems from an analogy to momentum in physics: the weight vector w {\displaystyle w} , thought of as a particle traveling through parameter space, [31] incurs acceleration from the gradient of the loss (" force "). Unlike in classical stochastic gradient descent, it tends to keep traveling in the same direction, preventing oscillations. Momentum has been used successfully by computer scientists in the training of artificial neural networks for several decades.
[35] The momentum method is closely related to underdamped Langevin dynamics , and may be combined with Simulated Annealing.
[36] In mid-1980s the method was modified by Yurii Nesterov to use the gradient predicted at the next point, and the resulting so-called Nesterov Accelerated Gradient was sometimes used in ML in the 2010s.
[37] Averaging [ edit ] Averaged stochastic gradient descent , invented independently by Ruppert and Polyak in the late 1980s, is ordinary stochastic gradient descent that records an average of its parameter vector over time. That is, the update is the same as for ordinary stochastic gradient descent, but the algorithm also keeps track of [38] w AdaGrad [ edit ] AdaGrad (for adaptive gradient algorithm) is a modified stochastic gradient descent algorithm with per-parameter learning rate , first published in 2011.
[39] Informally, this increases the learning rate for sparser parameters and decreases the learning rate for ones that are less sparse. This strategy often improves convergence performance over standard stochastic gradient descent in settings where data is sparse and sparse parameters are more informative. Examples of such applications include natural language processing and image recognition.
[39] It still has a base learning rate η , but this is multiplied with the elements of a vector { G j , j } which is the diagonal of the outer product matrix where g τ = ∇ Q i ( w ) {\displaystyle g_{\tau }=\nabla Q_{i}(w)} , the gradient, at iteration τ.
 The diagonal is given by { G ( i , i ) } w i G i = ∑ τ = 1 t g τ 2 {\textstyle {\sqrt {G_{i}}}={\sqrt {\sum _{\tau =1}^{t}g_{\tau }^{2}}}} While designed for convex problems , AdaGrad has been successfully applied to non-convex optimization.
[40] RMSProp [ edit ] RMSProp (for Root Mean Square Propagation) is a method invented in 2012 by James Martens and Ilya Sutskever , at the time both PhD students in Geoffrey Hinton's group, in which the learning rate is, like in Adagrad, adapted for each of the parameters. The idea is to divide the learning rate for a weight by a running average of the magnitudes of recent gradients for that weight.
[41] Unusually, it was not published in an article but merely described in a Coursera lecture.
[ citation needed ] So, first the running average is calculated in terms of means square, where, γ {\displaystyle \gamma } is the forgetting factor. The concept of storing the historical gradient as sum of squares is borrowed from Adagrad, but "forgetting" is introduced to solve Adagrad's diminishing learning rates in non-convex problems by gradually decreasing the influence of old data.
[42] And the parameters are updated as, RMSProp has shown good adaptation of learning rate in different applications. RMSProp can be seen as a generalization of Rprop and is capable to work with mini-batches as well opposed to only full-batches.
[41] Adam [ edit ] Adam [43] (short for Adaptive Moment Estimation) is a 2014 update to the RMSProp optimizer combining it with the main feature of the Momentum method.
[44] In this optimization algorithm, running averages with exponential forgetting of both the gradients and the second moments of the gradients are used. Given parameters w ( t ) {\displaystyle w^{(t)}} and a loss function L ( t ) {\displaystyle L^{(t)}} , where t {\displaystyle t} indexes the current training iteration (indexed at 0 {\displaystyle 0} ), Adam's parameter update is given by: where ϵ {\displaystyle \epsilon } is a small scalar (e.g.
10 − 8 {\displaystyle 10^{-8}} ) used to prevent division by 0, and β 1 {\displaystyle \beta _{1}} (e.g. 0.9) and β 2 {\displaystyle \beta _{2}} (e.g. 0.999) are the forgetting factors for gradients and second moments of gradients, respectively. Squaring and square-rooting is done element-wise. The profound influence of this algorithm inspired multiple newer, less well-known momentum-based optimization schemes using Nesterov-enhanced gradients (eg: NAdam [45] and FASFA [46] ) and varying interpretations of second-order information (eg: Powerpropagation [47] and AdaSqrt [48] ). However, the most commonly used variants are AdaMax , [43] which generalizes Adam using the infinity norm, and AMSGrad , [49] which addresses convergence problems from Adam by using maximum of past squared gradients instead of the exponential average.
[50] AdamW [51] is a later update which mitigates an unoptimal choice of the weight decay algorithm in Adam.
Sign-based stochastic gradient descent [ edit ] Even though sign-based optimization goes back to the aforementioned Rprop, only in 2018 researchers tried to simplify Adam by removing the magnitude of the stochastic gradient from being taked into account and only considering its sign.
[52] [53] This section needs expansion.
 You can help by adding to it.
( June 2023 ) Backtracking line search [ edit ] Backtracking line search is another variant of gradient descent. All of the below are sourced from the mentioned link. It is based on a condition known as the Armijo–Goldstein condition. Both methods allow learning rates to change at each iteration; however, the manner of the change is different. Backtracking line search uses function evaluations to check Armijo's condition, and in principle the loop in the algorithm for determining the learning rates can be long and unknown in advance. Adaptive SGD does not need a loop in determining learning rates. On the other hand, adaptive SGD does not guarantee the "descent property" – which Backtracking line search enjoys – which is that f ( x n + 1 ) ≤ f ( x n ) {\displaystyle f(x_{n+1})\leq f(x_{n})} for all n. If the gradient of the cost function is globally Lipschitz continuous, with Lipschitz constant L, and learning rate is chosen of the order 1/L, then the standard version of SGD is a special case of backtracking line search.
Second-order methods [ edit ] A stochastic analogue of the standard (deterministic) Newton–Raphson algorithm (a "second-order" method) provides an asymptotically optimal or near-optimal form of iterative optimization in the setting of stochastic approximation [ citation needed ].
 A method that uses direct measurements of the Hessian matrices of the summands in the empirical risk function was developed by Byrd, Hansen, Nocedal, and Singer.
[54] However, directly determining the required Hessian matrices for optimization may not be possible in practice. Practical and theoretically sound methods for second-order versions of SGD that do not require direct Hessian information are given by Spall and others.
[55] [56] [57] (A less efficient method based on finite differences, instead of simultaneous perturbations, is given by Ruppert.
[58] ) Another approach to the approximation Hessian matrix is replacing it with the Fisher information matrix, which transforms usual gradient to natural.
[59] These methods not requiring direct Hessian information are based on either values of the summands in the above empirical risk function or values of the gradients of the summands (i.e., the SGD inputs). In particular, second-order optimality is asymptotically achievable without direct calculation of the Hessian matrices of the summands in the empirical risk function.
Approximations in continuous time [ edit ] For small learning rate η {\textstyle \eta } stochastic gradient descent ( w n ) n ∈ N 0 {\textstyle (w_{n})_{n\in \mathbb {N} _{0}}} can be viewed as a discretization of the gradient flow ODE subject to additional stochastic noise. This approximation is only valid on a finite time-horizon in the following sense: assume that all the coefficients Q i {\textstyle Q_{i}} are sufficiently smooth. Let T > 0 {\textstyle T>0} and g : R d → R {\textstyle g:\mathbb {R} ^{d}\to \mathbb {R} } be a sufficiently smooth test function. Then, there exists a constant C > 0 {\textstyle C>0} such that for all η > 0 {\textstyle \eta >0} where E {\textstyle \mathbb {E} } denotes taking the expectation with respect to the random choice of indices in the stochastic gradient descent scheme.
Since this approximation does not capture the random fluctuations around the mean behavior of stochastic gradient descent solutions to stochastic differential equations (SDEs) have been proposed as limiting objects.
[60] More precisely, the solution to the SDE for d B t {\textstyle dB_{t}} C > 0 {\textstyle C>0} However this SDE only approximates the one-point motion of stochastic gradient descent. For an approximation of the stochastic flow one has to consider SDEs with infinite-dimensional noise.
[61] Notes [ edit ] ^ ⊙ {\displaystyle \odot } is the element-wise product.
See also [ edit ] Backtracking line search Coordinate descent – changes one coordinate at a time, rather than one example Linear classifier Online machine learning Stochastic hill climbing Stochastic variance reduction References [ edit ] ^.
mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit} Bottou, Léon ; Bousquet, Olivier (2012).
"The Tradeoffs of Large Scale Learning".
 In Sra, Suvrit; Nowozin, Sebastian; Wright, Stephen J. (eds.).
Optimization for Machine Learning.
 Cambridge: MIT Press. pp. 351–368.
ISBN 978-0-262-01646-9.
^ Bottou, Léon (1998). "Online Algorithms and Stochastic Approximations".
Online Learning and Neural Networks.
 Cambridge University Press.
ISBN 978-0-521-65263-6.
^ Ferguson, Thomas S.
(1982). "An inconsistent maximum likelihood estimate".
Journal of the American Statistical Association.
77 (380): 831–834.
doi : 10.1080/01621459.1982.10477894.
JSTOR 2287314.
^ Bottou, Léon ; Bousquet, Olivier (2008).
The Tradeoffs of Large Scale Learning.
Advances in Neural Information Processing Systems.
 Vol. 20. pp. 161–168.
^ Murphy, Kevin (2021).
Probabilistic Machine Learning: An Introduction.
 MIT Press.
 Retrieved 10 April 2021.
^ Bilmes, Jeff; Asanovic, Krste; Chin, Chee-Whye; Demmel, James (April 1997).
"Using PHiPAC to speed error back-propagation learning".
1997 IEEE International Conference on Acoustics, Speech, and Signal Processing.
 ICASSP. Munich, Germany: IEEE. pp. 4153-4156 vol.5.
doi : 10.1109/ICASSP.1997.604861.
^ Bottou, Léon (1998). "Online Algorithms and Stochastic Approximations".
Online Learning and Neural Networks.
 Cambridge University Press.
ISBN 978-0-521-65263-6.
^ Kiwiel, Krzysztof C. (2001). "Convergence and efficiency of subgradient methods for quasiconvex minimization".
Mathematical Programming, Series A.
 Berlin, Heidelberg: Springer.
90 (1): 1–25.
doi : 10.1007/PL00011414.
ISSN 0025-5610.
MR 1819784.
S2CID 10043417.
^ Robbins, Herbert ; Siegmund, David O.
(1971). "A convergence theorem for non negative almost supermartingales and some applications". In Rustagi, Jagdish S. (ed.).
Optimizing Methods in Statistics.
 Academic Press.
ISBN 0-12-604550-X.
^ Robbins, H.
; Monro, S. (1951).
"A Stochastic Approximation Method".
The Annals of Mathematical Statistics.
22 (3): 400.
doi : 10.1214/aoms/1177729586.
^ Kiefer, J.; Wolfowitz, J. (1952). "Stochastic Estimation of the Maximum of a Regression Function".
The Annals of Mathematical Statistics.
23 (3): 462–466.
doi : 10.1214/aoms/1177729392.
^ Rosenblatt, F. (1958). "The perceptron: A probabilistic model for information storage and organization in the brain".
Psychological Review.
65 (6): 386–408.
doi : 10.1037/h0042519.
^ Bilmes, Jeff; Asanovic, Krste; Chin, Chee-Whye; Demmel, James (April 1997).
"Using PHiPAC to speed error back-propagation learning".
1997 IEEE International Conference on Acoustics, Speech, and Signal Processing.
 ICASSP. Munich, Germany: IEEE. pp. 4153-4156 vol.5.
doi : 10.1109/ICASSP.1997.604861.
^ Peng, Xinyu; Li, Li; Wang, Fei-Yue (2020).
"Accelerating Minibatch Stochastic Gradient Descent Using Typicality Sampling".
IEEE Transactions on Neural Networks and Learning Systems.
31 (11): 4649–4659.
doi : 10.1109/TNNLS.2019.2957003.
 Retrieved 2023-10-02.
^ Rumelhart, David E.; Hinton, Geoffrey E.; Williams, Ronald J. (October 1986).
"Learning representations by back-propagating errors".
Nature.
323 (6088): 533–536.
doi : 10.1038/323533a0.
ISSN 1476-4687.
^ Duchi, John; Hazan, Elad; Singer, Yoram (2011).
"Adaptive subgradient methods for online learning and stochastic optimization" (PDF).
JMLR.
12 : 2121–2159.
^ Hinton, Geoffrey.
"Lecture 6e rmsprop: Divide the gradient by a running average of its recent magnitude" (PDF).
 p. 26.
 Retrieved 19 March 2020.
^ Kingma, Diederik; Ba, Jimmy (2014). "Adam: A Method for Stochastic Optimization".
arXiv : 1412.6980 [ cs.LG ].
^ "torch.optim — PyTorch 2.0 documentation".
pytorch.org.
 Retrieved 2023-10-02.
^ Nguyen, Giang; Dlugolinsky, Stefan; Bobák, Martin; Tran, Viet; García, Álvaro; Heredia, Ignacio; Malík, Peter; Hluchý, Ladislav (19 January 2019).
"Machine Learning and Deep Learning frameworks and libraries for large-scale data mining: a survey" (PDF).
Artificial Intelligence Review.
52 : 77–124.
doi : 10.1007/s10462-018-09679-z.
^ "torch.optim — PyTorch 2.0 documentation".
pytorch.org.
 Retrieved 2023-10-02.
^ "Module: tf.keras.optimizers | TensorFlow v2.14.0".
TensorFlow.
 Retrieved 2023-10-02.
^ Jenny Rose Finkel, Alex Kleeman, Christopher D. Manning (2008).
Efficient, Feature-based, Conditional Random Field Parsing.
 Proc. Annual Meeting of the ACL.
^ LeCun, Yann A., et al. "Efficient backprop." Neural networks: Tricks of the trade. Springer Berlin Heidelberg, 2012. 9-48 ^ Jerome R. Krebs, John E. Anderson, David Hinkley, Ramesh Neelamani, Sunwoong Lee, Anatoly Baumstein, and Martin-Daniel Lacasse, (2009), "Fast full-wavefield seismic inversion using encoded sources," GEOPHYSICS 74: WCC177-WCC188.
^ Avi Pfeffer.
"CS181 Lecture 5 — Perceptrons" (PDF).
 Harvard University.
[ permanent dead link ] ^ Goodfellow, Ian ; Bengio, Yoshua; Courville, Aaron (2016).
Deep Learning.
 MIT Press. p. 291.
ISBN 978-0262035613.
^ Cited by Darken, Christian; Moody, John (1990).
Fast adaptive k-means clustering: some empirical results.
 Int'l Joint Conf. on Neural Networks (IJCNN). IEEE.
doi : 10.1109/IJCNN.1990.137720.
^ Spall, J. C. (2003).
Introduction to Stochastic Search and Optimization: Estimation, Simulation, and Control.
 Hoboken, NJ: Wiley. pp. Sections 4.4, 6.6, and 7.5.
ISBN 0-471-33052-3.
^ Toulis, Panos; Airoldi, Edoardo (2017). "Asymptotic and finite-sample properties of estimators based on stochastic gradients".
Annals of Statistics.
45 (4): 1694–1727.
arXiv : 1408.2923.
doi : 10.1214/16-AOS1506.
S2CID 10279395.
^ a b Rumelhart, David E.; Hinton, Geoffrey E.; Williams, Ronald J. (8 October 1986). "Learning representations by back-propagating errors".
Nature.
323 (6088): 533–536.
Bibcode : 1986Natur.323..533R.
doi : 10.1038/323533a0.
S2CID 205001834.
^ "Gradient Descent and Momentum: The Heavy Ball Method".
 13 July 2020.
^ Sutskever, Ilya; Martens, James; Dahl, George; Hinton, Geoffrey E. (June 2013). Sanjoy Dasgupta and David Mcallester (ed.).
On the importance of initialization and momentum in deep learning (PDF).
 In Proceedings of the 30th international conference on machine learning (ICML-13). Vol. 28. Atlanta, GA. pp. 1139–1147.
 Retrieved 14 January 2016.
^ Sutskever, Ilya (2013).
Training recurrent neural networks (PDF) (Ph.D.). University of Toronto. p. 74.
^ a b Zeiler, Matthew D. (2012). "ADADELTA: An adaptive learning rate method".
arXiv : 1212.5701 [ cs.LG ].
^ Borysenko, Oleksandr; Byshkin, Maksym (2021).
"CoolMomentum: A Method for Stochastic Optimization by Langevin Dynamics with Simulated Annealing".
Scientific Reports.
11 (1): 10705.
arXiv : 2005.14605.
Bibcode : 2021NatSR..1110705B.
doi : 10.1038/s41598-021-90144-3.
PMC 8139967.
PMID 34021212.
^ "Papers with Code - Nesterov Accelerated Gradient Explained".
^ Polyak, Boris T.; Juditsky, Anatoli B. (1992).
"Acceleration of stochastic approximation by averaging" (PDF).
SIAM J. Control Optim.
30 (4): 838–855.
doi : 10.1137/0330046.
 Archived from the original (PDF) on 2016-01-12.
 Retrieved 2018-02-14.
^ a b Duchi, John; Hazan, Elad; Singer, Yoram (2011).
"Adaptive subgradient methods for online learning and stochastic optimization" (PDF).
JMLR.
12 : 2121–2159.
^ Gupta, Maya R.; Bengio, Samy; Weston, Jason (2014).
"Training highly multiclass classifiers" (PDF).
JMLR.
15 (1): 1461–1492.
^ a b Hinton, Geoffrey.
"Lecture 6e rmsprop: Divide the gradient by a running average of its recent magnitude" (PDF).
 p. 26.
 Retrieved 19 March 2020.
^ "Understanding RMSprop — faster neural network learning".
 2 September 2018.
^ a b Kingma, Diederik; Ba, Jimmy (2014). "Adam: A Method for Stochastic Optimization".
arXiv : 1412.6980 [ cs.LG ].
^ "4. Beyond Gradient Descent - Fundamentals of Deep Learning [Book]".
^ Dozat, T. (2016). "Incorporating Nesterov Momentum into Adam".
S2CID 70293087.
{{ cite journal }} : Cite journal requires |journal= ( help ) ^ Naveen, Philip (2022-08-09).
"FASFA: A Novel Next-Generation Backpropagation Optimizer".
dx.doi.org.
doi : 10.36227/techrxiv.20427852.v1.
 Retrieved 2022-11-19.
^ Whye, Schwarz, Jonathan Jayakumar, Siddhant M. Pascanu, Razvan Latham, Peter E. Teh, Yee (2021-10-01).
Powerpropagation: A sparsity inducing weight reparameterisation.
OCLC 1333722169.
{{ cite book }} : CS1 maint: multiple names: authors list ( link ) ^ Hu, Yuzheng; Lin, Licong; Tang, Shange (2019-12-20). "Second-order Information in First-order Optimization Methods".
arXiv : 1912.09926.
{{ cite journal }} : Cite journal requires |journal= ( help ) ^ Reddi, Sashank J.; Kale, Satyen; Kumar, Sanjiv (2018). "On the Convergence of Adam and Beyond".
arXiv : 1904.09237.
{{ cite journal }} : Cite journal requires |journal= ( help ) ^ "An overview of gradient descent optimization algorithms".
 19 January 2016.
^ Loshchilov, Ilya; Hutter, Frank (4 January 2019). "Decoupled Weight Decay Regularization".
arXiv : 1711.05101.
{{ cite journal }} : Cite journal requires |journal= ( help ) ^ Balles, Lukas; Hennig, Philipp (15 February 2018).
"Dissecting Adam: The Sign, Magnitude and Variance of Stochastic Gradients".
^ "SignSGD: Compressed Optimisation for Non-Convex Problems".
 3 July 2018. pp. 560–569.
^ Byrd, R. H.; Hansen, S. L.; Nocedal, J.; Singer, Y. (2016). "A Stochastic Quasi-Newton method for Large-Scale Optimization".
SIAM Journal on Optimization.
26 (2): 1008–1031.
arXiv : 1401.7020.
doi : 10.1137/140954362.
S2CID 12396034.
^ Spall, J. C. (2000). "Adaptive Stochastic Approximation by the Simultaneous Perturbation Method".
IEEE Transactions on Automatic Control.
45 (10): 1839−1853.
doi : 10.1109/TAC.2000.880982.
^ Spall, J. C. (2009). "Feedback and Weighting Mechanisms for Improving Jacobian Estimates in the Adaptive Simultaneous Perturbation Algorithm".
IEEE Transactions on Automatic Control.
54 (6): 1216–1229.
doi : 10.1109/TAC.2009.2019793.
S2CID 3564529.
^ Bhatnagar, S.; Prasad, H. L.; Prashanth, L. A. (2013).
Stochastic Recursive Algorithms for Optimization: Simultaneous Perturbation Methods.
 London: Springer.
ISBN 978-1-4471-4284-3.
^ Ruppert, D. (1985).
"A Newton-Raphson Version of the Multivariate Robbins-Monro Procedure".
Annals of Statistics.
13 (1): 236–245.
doi : 10.1214/aos/1176346589.
^ Amari, S. (1998). "Natural gradient works efficiently in learning".
Neural Computation.
10 (2): 251–276.
doi : 10.1162/089976698300017746.
^ Li, Qianxiao; Tai, Cheng; E, Weinan (2019).
"Stochastic Modified Equations and Dynamics of Stochastic Gradient Algorithms I: Mathematical Foundations".
Journal of Machine Learning Research.
20 (40): 1–47.
ISSN 1533-7928.
^ Gess, Benjamin; Kassing, Sebastian; Konarovskyi, Vitalii (14 February 2023). "Stochastic Modified Flows, Mean-Field Limits and Dynamics of Stochastic Gradient Descent".
arXiv : 2302.07125 [ math.PR ].
Further reading [ edit ] Bottou, Léon (2004), "Stochastic Learning" , Advanced Lectures on Machine Learning , LNAI, vol. 3176, Springer, pp. 146–168, ISBN 978-3-540-23122-6 Buduma, Nikhil; Locascio, Nicholas (2017), "Beyond Gradient Descent" , Fundamentals of Deep Learning : Designing Next-Generation Machine Intelligence Algorithms , O'Reilly, ISBN 9781491925584 LeCun, Yann A.
; Bottou, Léon; Orr, Genevieve B.; Müller, Klaus-Robert (2012), "Efficient BackProp" , Neural Networks: Tricks of the Trade , Springer, pp. 9–48, ISBN 978-3-642-35288-1 Spall, James C. (2003), Introduction to Stochastic Search and Optimization , Wiley , ISBN 978-0-471-33052-3 External links [ edit ] Using stochastic gradient descent in C++, Boost, Ublas for linear regression Machine Learning Algorithms "Gradient Descent, How Neural Networks Learn".
3Blue1Brown.
 October 16, 2017.
Archived from the original on 2021-12-22 – via YouTube.
Goh (April 4, 2017).
"Why Momentum Really Works".
Distill.
2 (4).
doi : 10.23915/distill.00006.
Interactive paper explaining momentum.
v t e Differentiable computing General Differentiable programming Information geometry Statistical manifold Automatic differentiation Neuromorphic engineering Pattern recognition Tensor calculus Computational learning theory Inductive bias Concepts Gradient descent SGD Clustering Regression Overfitting Hallucination Adversary Attention Convolution Loss functions Backpropagation Batchnorm Activation Softmax Sigmoid Rectifier Regularization Datasets Augmentation Diffusion Autoregression Applications Machine learning In-context learning Artificial neural network Deep learning Scientific computing Artificial Intelligence Language model Large language model Hardware IPU TPU VPU Memristor SpiNNaker Software libraries TensorFlow PyTorch Keras Theano JAX Flux.jl Implementations Audio–visual AlexNet WaveNet Human image synthesis HWR OCR Speech synthesis Speech recognition Facial recognition AlphaFold DALL-E Midjourney Stable Diffusion Whisper Verbal Word2vec Seq2seq BERT LaMDA Bard NMT Project Debater IBM Watson GPT-1 GPT-2 GPT-3 GPT-4 ChatGPT GPT-J Chinchilla AI PaLM BLOOM LLaMA Decisional AlphaGo AlphaZero Q-learning SARSA OpenAI Five Self-driving car MuZero Action selection Auto-GPT Robot control People Yoshua Bengio Alex Graves Ian Goodfellow Stephen Grossberg Demis Hassabis Geoffrey Hinton Yann LeCun Fei-Fei Li Andrew Ng Jürgen Schmidhuber David Silver Ilya Sutskever Organizations Anthropic EleutherAI Google DeepMind Hugging Face OpenAI Meta AI Mila MIT CSAIL Architectures Neural Turing machine Differentiable neural computer Transformer Recurrent neural network (RNN) Long short-term memory (LSTM) Gated recurrent unit (GRU) Echo state network Multilayer perceptron (MLP) Convolutional neural network Residual neural network Autoencoder Variational autoencoder (VAE) Generative adversarial network (GAN) Graph neural network Portals Computer programming Technology Categories Artificial neural networks Machine learning Stochastic optimization Computational statistics Gradient methods M-estimators Machine learning algorithms Convex optimization Statistical approximations All articles with dead external links Articles with dead external links from June 2018 Articles with permanently dead external links CS1 errors: missing periodical CS1 maint: multiple names: authors list Articles with short description Short description matches Wikidata All articles with unsourced statements Articles with unsourced statements from July 2015 Articles with unsourced statements from June 2023 Articles to be expanded from June 2023 All articles to be expanded Articles using small message boxes Articles with unsourced statements from April 2020 This page was last edited on 31 October 2023, at 23:40 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike License 4.0 ; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy.
 Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.
, a non-profit organization.
Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Toggle limited content width
