old id = 2255
Quantum approximate optimization of non-planar graph problems on a planar superconducting processor | Nature Physics
2021
https://doi.org/10.1038%2Fs41567-020-01105-y

Thank you for visiting nature.com. You are using a browser version with limited support for CSS. To obtain the best experience, we recommend you use a more up to date browser (or turn off compatibility mode in Internet Explorer). In the meantime, to ensure continued support, we are displaying the site without styles and JavaScript.
AdvertisementQuantum approximate optimization of non-planar graph problems on a planar superconducting processorNature Physicsvolume17,pages332–336 (2021)Cite this article6188Accesses78Citations117AltmetricMetricsdetailsSubjectsAbstractFaster algorithms for combinatorial optimization could prove transformative for diverse areas such as logistics, finance and machine learning. Accordingly, the possibility of quantum enhanced optimization has driven much interest in quantum technologies. Here we demonstrate the application of the Google Sycamore superconducting qubit quantum processor to combinatorial optimization problems with the quantum approximate optimization algorithm (QAOA). Like past QAOA experiments, we study performance for problems defined on the planar connectivity graph native to our hardware; however, we also apply the QAOA to the Sherrington–Kirkpatrick model and MaxCut, non-native problems that require extensive compilation to implement. For hardware-native problems, which are classically efficient to solve on average, we obtain an approximation ratio that is independent of problem size and observe that performance increases with circuit depth. For problems requiring compilation, performance decreases with problem size. Circuits involving several thousand gates still present an advantage over random guessing but not over some efficient classical algorithms. Our results suggest that it will be challenging to scale near-term implementations of the QAOA for problems on non-native graphs. As these graphs are closer to real-world instances, we suggest more emphasis should be placed on such problems when using the QAOA to benchmark quantum processors.
You have full access to this article via your institution.
MainWhile the prospects for achieving quantum advantage with the quantum approximate optimization algorithm (QAOA) remain unclear, the algorithm prescribes a simple paradigm for optimization that makes it amenable to both analytical study and practical implementation1,2,3,4,5,6,7,8,9,10. Discrete optimization problems can be expressed as the minimization of a quadratic function of binary variables11,12, and one can visualize these cost functions as graphs with binary variables as nodes and (weighted) edges connecting bits whose (weighted) products sum to the total cost function value. For most industrially relevant problems, these graphs are non-planar and many ancilla would be required to embed them in (quasi-)planar graphs matching the qubit connectivity of most hardware platforms13. The challenge of realizing higher-dimensional problem graphs severely limits the applicability of scalable architectures for quantum annealing14,15,16and corresponds to increased circuit complexity in digital quantum algorithms for optimization such as QAOA.
This work builds on previous experimental demonstrations of QAOA on superconducting qubits17,18,19,20, ion traps21and photonics systems22, with a full comparison found in theSupplementary Information. The Google Sycamore superconducting quantum processor consists of a two-dimensional array of 54 transmon qubits23with each qubit tunably coupled to four nearest neighbours in a rectangular lattice. In this study, all device calibration was fully automated24,25and data were collected using a cloud interface to the platform programmed using Cirq26. Our experiment was restricted to 23 physical qubits of the larger Sycamore device, arranged as depicted in Fig.
1a. We are able to experimentally resolve increased performance with greater QAOA depth and apply the algorithm to cost functions on graphs that deviate markedly from our hardware connectivity. Owing to the low error rates of the Sycamore platform, the trade-off between the theoretical increase in quality of solutions with increasing decoherence due to noise is apparent for hardware-native problems as we scale the depth hyperparameter. We also apply the algorithm to non-native graph problems with their necessary compilation overhead and study the scaling of solution quality and problem size. Our results reveal that the performance of the QAOA is qualitatively different when applied to hardware-native graphs versus more complex graphs, highlighting the challenge of scaling QAOA to problems of industrial importance.
a, Hardware grid problems with a graph matching the hardware connectivity of the 23 qubits used in this experiment.
b, MaxCut on random three-regular graphs, with the largest instance depicted (22 qubits).
c, The fully connected SK model shown at the largest size (17 qubits).
d, QAOA usespapplications of problem and driver unitaries to approximate solutions to optimization problems.
The shallowest depth version of the QAOA consists of the application of two unitary operators: the problem unitary (UC) and the driver unitary (UB). The first of these depends on the parameterγand applies a phase to pairs of bits according to the problem-specific cost operatorC:where we restrict our study to two-local cost operators withZjandZkdenoting the PauliZoperator on qubitsjandk, respectively, and thewjkcorresponding to scalar weights with values {0, ±1}. Because the clauses act on at most two qubits, we are able to associate a graph with a given problem instance with weighted edges given by thewjkadjacency matrix. The second unitary depends on the parameterβ, is problem independent, and serves to drive transitions between bitstrings within the superposition state:whereXjis the PauliXoperator on qubitj. Both operators can be implemented by sequentially evolving under each term of the product; specifically the problem unitary is applied with a sequence of two-body interactions while the driver unitary uses single-qubit rotations on each qubit. For higher-depth versions of the algorithm, the two unitaries are sequentially re-applied each with their ownβandγ. The number of applications of the pair of unitaries is represented by the hyperparameterpgiving parameter vectorsγ= (γ1, …,γp) andβ= (β1, …,βp). Fornqubits, we prepare the parameterized statewhere\({\left|+\right\rangle }^{\otimes n}\)is the symmetric superposition of computational basis states. The algorithm is shown graphically in Fig.
1d.
Compilation and problem familiesWhile the driver unitaryUBis straightforward to implement, care must be taken to compile the problem unitaryUCto the constraints of our superconducting processor. We approach compilation as two distinct steps: routing and gate synthesis. The need for routing arises when simulatingUCfor a cost function whose graph is not a subgraph of our planar hardware connectivity. To simulate suchUC, we perform layers of swap gates that permute qubits such that all edges in the problem graph correspond to an edge in the hardware graph at least once, at which point the corresponding cost function terms can be implemented.
In this study, we consider three families of binary optimization problems typified by their graph representation. First, we study problem graphs that match the connectivity of our hardware, which we term ‘hardware grid problems’. This family of problems is composed of random instances generated by samplingwjkto be ±1 for edges in the device topology or a subgraph thereof, as depicted in Fig.
1a. While formally NP-hard12(and thus, unlikely to be efficiently solvable in the worst case), problems defined on these graphs with couplings chosen in this fashion are known to be classically efficient to exactly solve on average27. However, we study these problems here as they are a simple example of a problem that does not require routing.
Next, we study instances of the MaxCut problem on three-regular graphs. This is a prototypical discrete optimization problem with a low, fixed node degree but a high dimension that cannot be trivially mapped to a planar architecture28. It more closely matches problems of industrial interest, and an example is shown in Fig.
1b. For MaxCut on degree-three graphs, there is a classical approximation algorithm that achieves an approximation ratio of 0.9326 (ref.
29), and it is NP-hard to achieve 331/332 +ε≈ 0.997 for everyε> 0 (ref.
30). For these problems, we use the routing functionality from the\({\rm{t}}\left|{\rm{ket}}\right\rangle\)compiler to heuristically insert SWAP operations31.
Finally, we study instances of the Sherrington–Kirkpatrick (SK) model32, defined on the complete graph withwjkrandomly chosen to be ±1 as depicted in Fig.
1c. This is a canonical example of a frustrated spin glass (implying that large instances are probably classically inefficient to exactly solve on average12,32,33) and is most penalized by routing, which can be performed optimally using the linear swap networks discussed in ref.
34and Fig.
2at the cost of a linear increase in circuit depth. Thus, of our three example problems, the two requiring compilation are probably classically inefficient to solve on average whereas the native hardware graph is efficient to solve on average. But we emphasize that at the sizes studied in this paper, all of the problems are exactly solvable by classical algorithms.
a, The linear swap network can route a 17-qubit SK model problem unitary tonlayers of nearest-neighbour two-qubit interactions.
b, The e−iγwZZ⋅SWAP interaction is a composite phasing and SWAP of example qubitspandqthat can be synthesized from three applications of our hardware-native entangling SYC and single-qubit rotations (yellow boxes).
c, The definition of the SYC gate.
The second compilation step is termed gate synthesis and involves decomposing arbitrary one- and two-qubit interactions into physical gates supported by the device (see, for example, Fig.
2b). The physical gates used in this experiment are arbitrary single-qubit rotations and a two-qubit entangling gate native to the Sycamore platform, which we call SYC and define in Fig.
2c. Through multiple applications of this gate with single-qubit rotations, we can synthesize arbitrary entangling gates with full compilation details in theSupplementary Information. The average two-qubit gate fidelities on this device were 99.4% as measured by cross-entropy benchmarking23and average readout fidelity was 95.9% per qubit.
Energy landscapes and optimizationQAOA is a variational quantum algorithm where circuit parameters (γ,β) are optimized using a classical optimizer, but function evaluations are executed on a quantum processor4,35,36. First, one repeatedly constructs the state\(\left|{\bf{\upgamma }},{\bf{\upbeta }}\right\rangle\)with fixed parameters and samples bitstrings to estimate\(\langle C\rangle \equiv \left\langle {\bf{\upgamma }},{\bf{\upbeta }}\right|C\left|{\bf{\upgamma }},{\bf{\upbeta }}\right\rangle\). A classical ‘outer loop’ optimizer can then suggest new parameters to decrease the observed expectation value. Note that we normalize by the cost function’s true minimum, so we are in fact maximizing 〈C〉/Cmin(Cminis negative and hence minimizing 〈C〉 corresponds to maximizing 〈C〉/Cmin).
Forp= 1, we can visualize the cost function landscape as a function of the parameters (γ,β) = (γ1,β1) in a three-dimensional plot (where we drop the subscript 1 in axes labels). Comparison of simulated and empiricalp= 1 landscapes is a common qualitative diagnostic for the application of QAOA to real hardware18,19,20,21,22. For classical optimization to be successful, the quantum computer must provide accurate estimates of 〈C〉; otherwise, noise can overwhelm any signal and optimizations can fail to make progress. Hardware issues such as decoherence, crosstalk and coherent errors manifest as differences (damping, warping) from the ideal landscape.
Figure3contains simulated theoretical and experimental landscapes for selected instances of the three problem families evaluated on a grid of evenly spaced (γ,β) points. Each expectation value was estimated using 50,000 circuit repetitions with efficient post-processing to compensate for readout bias (Supplementary Information). The hardware grid problem shows clear peaks and valleys in the correct locations at the maximum size of our study,n= 23. For the other two problems, performance degrades with increasingnso we shown= 14 andn= 11 for the three-regular graph and SK model, respectively. We highlight the correspondence between experimental and theoretical landscapes for these problems of considerably higher complexity. Previous experimental demonstrations have presented landscapes for a maximum ofn= 20 on a hardware-native interaction graph21and a maximum ofn= 4 for a fully connected problem like the SK model19.
Comparison of simulated (left) and experimental (right)p= 1 landscapes shows a clear correspondence of landscape features. An overlaid optimization trace (red, initialized from square marker) demonstrates the ability of a classical optimizer to find optimal parameters. The blue star in each noiseless plot indicates the theoretical local optimum. Problem sizes aren= 23,n= 14 andn= 11 for hardware grid, three-regular MaxCut and SK model, respectively.
In Fig.
3, we also overlay a trace of the classical optimizer’s path through parameter space as a red line. We used a classical optimizer called model gradient descent, which has been shown numerically to perform well with a small number of function evaluations by using a quadratic surrogate model of the objective function to estimate the gradient37. In this example, we initialized the parameter optimization from an intentionally bad parameter setting and observed that the optimizer was able to enter the vicinity of the optimum in ten iterations or fewer, with each iteration consisting of six energy evaluations of 25,000 shots each.
Performance scalingBefore fault tolerance, circuit executions are expected to degrade in fidelity as the number of gates is increased. Here we study the performance of the QAOA on our problems at different sizenand depthpusing the normalized observed cost function 〈C〉/Cminas an application-specific metric of performance. The normalization ensures that a value of 1 is perfect and 0 corresponds to random guessing. To distinguish the effects of noise from the quality of a classical outer-loop optimization, here we report results obtained from running circuits at the theoretically optimal parameter values (that is, starting from theβandγparameters that were found to be optimal through classical simulation).
In Fig.
4we observe that 〈C〉/Cminfor hardware graph problems saturates at a value that is independent ofn, which occurs despite the fact that circuit fidelity is decreasing with increasingn. This behaviour can be anticipated by moving to the Heisenberg operator formalism and considering an observableZiZj. The expectation value for this operator is conjugated by the problem unitaryptimes giving an expression for the expectation value ofZiZjthat only involves qubits that are at mostpedges away fromiandj. Thus, for fixedp, the error for a given term is asymptotically unaffected asnis increased. Non-local error channels could remove this property.
Each size is the average over ten random instances (s.d. given by error bars). While hardware grid problems shown-independent noise, we observe that experimental SK model and MaxCut solutions approach those found by random guessing asnis increased. Note that due to the small problem sizes, many efficient classical algorithms could solve these instances exactly, giving a perfect approximation ratio. Therefore, we compare to random guessing as a baseline against a completely noisy quantum algorithm rather than as a point of comparison to classical algorithms.
Source dataCompiled problems—namely SK model and three-regular MaxCut problems—result in deeper circuits extensive in the number of qubits. As the depth grows, there is a higher chance of an error occurring. The high degree of the SK model graph and the high effective degree of the MaxCut circuits after compilation means that these errors quickly propagate among all qubits and the quality of solutions can be approximately modelled as the result of a depolarizing channel, with further analysis in theSupplementary Information. Even on these challenging problems, we observe performance exceeding random guessing for problem sizes up to 17 bits, even with circuits of depthp= 3. Note finally that despite circuits with materially fewer gates (although similar depth), performance on the MaxCut instances tracks performance on the SK model instances rather closely, further substantiating the circuit depth as a useful proxy for the performance of the QAOA.
In noiseless simulation, the quality of solutions is improved by increasing the depth hyperparameterp. However, the additional depth increases the probability of error on real hardware. We study this interplay in Fig.
5. Previously, improved performance withp> 1 had only been experimentally demonstrated for ann= 2 problem20. For larger problems (n= 20), performance forp= 2 was shown to be within error bars of thep= 1 performance21. Figure5shows thepdependence averaged across all 130 instances wheren> 10. The mean finds its maximum atp= 3, although the relatively flat dependence of performance on depth suggests that the experimental noise seems to nearly balance the increase in theoretical performance for this problem family. When we consider each instance individually and identify which value ofpmaximizes performance for that particular instance, performance is maximized atp= 3 for over half of instances with a histogram of these per-instance maximal values is inset in Fig.
5. Our full dataset (available in theSupplementary Information) includes per-instance data at all settings ofp.
In an ideal simulation, increasingpincreases the quality of solutions. For experimental hardware grid results, we observe increased performance forp> 1 both as measured by the mean over all instances (lines with s.d. error bars) and statistics of whichpmaximizes performance on a per-instance basis (histogram). At largerp, errors overwhelm the theoretical performance increase.
Source dataConclusionDiscrete optimization is an enticing application for near-term devices owing to both the potential value of solutions and the viability of heuristic low-depth algorithms such as the QAOA. While no existing quantum processors can outperform classical optimization heuristics, the application of popular methods such as the QAOA to prototypical problems can be used as a benchmark for comparing various hardware platforms.
Previous demonstrations of the QAOA have primarily optimized problems tailored to the hardware architecture at minimal depth. Using the Google ‘Sycamore’ platform, we explored these types of problem, which we termed hardware grid problems, and demonstrated robust performance at large numbers of qubits. We showed that the locations of maxima and minima in thep= 1 diagnostic landscape match those from the theoretically computed surface, and that variational optimization can still find the optimum with noisy quantum objective function evaluation. We also applied the QAOA to various problem sizes using pre-computed parameters from noiseless simulation, and observed ann-independent noise effect on the approximation ratios for hardware grid problems. This is consistent with our theoretical understanding that the noise-induced degradation of each term in the objective function remains constant in the shallow-depth regime where correlations remain local. Furthermore, we report clear cases of performance maximization atp= 3 for the QAOA owing to the low error rate of our hardware.
Most real-world instances of combinatorial optimization problems cannot be mapped to hardware-native topologies without additional resources. Instead, problems must be compiled by routing qubits with swap networks. This additional overhead can have a considerable impact on the algorithm’s performance. We studied random instances of the fully connected SK model. Although we report non-negligible performance for large (n= 17), deep (p= 3) and complex (fully connected) problems, we see that performance degrades with problem size for such instances.
The promise of quantum enhanced optimization will continue to motivate the development of new quantum technology and algorithms. Nevertheless, for quantum optimization to compete with classical methods for real-world problems, it is necessary to push beyond contrived problems at low circuit depth. Our work demonstrates important progress in the implementation and performance of quantum optimization algorithms on a real device, and underscores the challenges in applying these algorithms beyond those natively realized by hardware interaction graphs.
Data availabilitySource data is available for this paper. The experimental data for this experiment is available from the Figshare repository39.
Code availabilityThe code used in this experiment is available38with additional resources athttps://github.com/quantumlib/ReCirq.
ReferencesFarhi, E., Goldstone, J. & Gutmann, S. A quantum approximate optimization algorithm. Preprint athttps://arxiv.org/abs/1411.4028(2014).
Farhi, E., Goldstone, J. & Gutmann, S. A quantum approximate optimization algorithm applied to a bounded occurrence constraint problem. Preprint athttps://arxiv.org/abs/1412.6062(2014).
Biswas, R. et al. A NASA perspective on quantum computing: opportunities and challenges.
Parallel Comput.
64, 81–98 (2017).
MathSciNetArticleGoogle ScholarWecker, D., Hastings, M. B. & Troyer, M. Training a quantum optimizer.
Phys. Rev. A94, 022309 (2016).
ADSArticleGoogle ScholarFarhi, E. & Harrow, A. W. Quantum supremacy through the quantum approximate optimization algorithm. Preprint athttps://arxiv.org/abs/1602.07674(2016).
Jiang, Z., Rieffel, E. G. & Wang, Z. Near-optimal quantum circuit for Grover’s unstructured search using a transverse field.
Phys. Rev. A95, 062317 (2017).
ADSArticleGoogle ScholarWang, Z., Hadfield, S., Jiang, Z. & Rieffel, E. G. Quantum approximate optimization algorithm for MaxCut: a fermionic view.
Phys. Rev. A97, 022304 (2018).
ADSArticleGoogle ScholarHadfield, S. et al. From the quantum approximate optimization algorithm to a quantum alternating operator ansatz.
Algorithms12, 34 (2017).
MathSciNetArticleGoogle ScholarLloyd, S. Quantum approximate optimization is computationally universal. Preprint athttps://arxiv.org/abs/1812.11075(2018).
Farhi, E., Goldstone, J., Gutmann, S. & Zhou, L. The quantum approximate optimization algorithm and the Sherrington–Kirkpatrick model at infinite size. Preprint athttps://arxiv.org/abs/1910.08187(2019).
Lucas, A. Ising formulations of many NP problems.
Front. Phys.
2, 5 (2014).
ArticleGoogle ScholarBarahona, F. On the computational complexity of Ising spin glass models.
J. Phys. A15, 3241–3253 (1982).
ADSMathSciNetArticleGoogle ScholarChoi, V. Minor-embedding in adiabatic quantum computation: I. The parameter setting problem.
Quantum Inf. Process.
7, 193–209 (2008).
MathSciNetArticleGoogle ScholarKadowaki, T. & Nishimori, H. Quantum annealing in the transverse Ising model.
Phys. Rev. E58, 5355–5363 (1998).
ADSArticleGoogle ScholarFarhi, E. et al. A quantum adiabatic evolution algorithm applied to random instances of an NP-complete problem.
Science292, 472–475 (2001).
ADSMathSciNetArticleGoogle ScholarDenchev, V. S. et al. What is the computational value of finite-range tunneling?Phys. Rev. X6, 031015 (2016).
Google ScholarOtterbach, J. S. et al. Unsupervised machine learning on a hybrid quantum computer. Preprint athttps://arxiv.org/abs/1712.05771(2017).
Willsch, M., Willsch, D., Jin, F., De Raedt, H. & Michielsen, K. Benchmarking the quantum approximate optimization algorithm.
Quantum Inf. Process.
19, 197 (2020).
ADSMathSciNetArticleGoogle ScholarAbrams, D. M., Didier, N., Johnson, B. R., da Silva, M. P. & Ryan, C. A. Implementation of XY entangling gates with a single calibrated pulse.
Nat. Electron.
3, 744–750 (2020).
ArticleGoogle ScholarBengtsson, A. et al. Improved success probability with greater circuit depth for the quantum approximate optimization algorithm.
Phys. Rev. Appl.
14, 034010 (2020).
ADSArticleGoogle ScholarPagano, G. et al. Quantum approximate optimization of the long-range Ising model with a trapped-ion quantum simulator.
Proc. Natl Acad. Sci. USA117, 25396–25401 (2020).
ADSArticleGoogle ScholarQiang, X. et al. Large-scale silicon quantum photonics implementing arbitrary two-qubit processing.
Nat. Photon.
12, 534–539 (2018).
ADSArticleGoogle ScholarArute, F. et al. Quantum supremacy using a programmable superconducting processor.
Nature574, 505–510 (2019).
ADSArticleGoogle ScholarKelly, J., O’Malley, P., Neeley, M., Neven, H. & Martinis, J. M. Physical qubit calibration on a directed acyclic graph. Preprint athttps://arxiv.org/abs/1803.03226(2018).
Klimov, P. V., Kelly, J., Martinis, J. M. & Neven, H. The snake optimizer for learning quantum processor control parameters. Preprint athttps://arxiv.org/abs/2006.04594(2020).
The Cirq Developers Cirq: a python framework for creating, editing, and invoking noisy intermediate scale quantum (NISQ) circuits.
GitHubhttps://github.com/quantumlib/Cirq(2020).
Rønnow, T. F. et al. Defining and detecting quantum speedup.
Science345, 420–424 (2014).
ADSArticleGoogle ScholarGoemans, M. X. & Williamson, D. P. Improved approximation algorithms for maximum cut and satisfiability problems using semidefinite programming.
J. Assoc. Comput. Mach.
42, 1115–1145 (1995).
MathSciNetArticleGoogle ScholarHalperin, E., Livnat, D. & Zwick, U. Max Cut in cubic graphs. InProc. Thirteenth Annual ACM-SIAM Symposium on Discrete Algorithms, SODA ’02506–513 (Society for Industrial and Applied Mathematics, 2002).
Berman, P. & Karpinski, M. inAutomata, Languages and Programming(eds Wiedermann, J. et al.) 200–209 (Springer, 1999).
Cowtan, A. et al. On the qubit routing problem. In14th Conference on the Theory of Quantum Computation, Communication and Cryptography (TQC 2019),Vol. 135 of Leibniz International Proc. Informatics (LIPIcs)(eds van Dam, W. & Mancinska, L.) 5:1–5:32 (Schloss Dagstuhl–Leibniz-Zentrum fuer Informatik, 2019);http://drops.dagstuhl.de/opus/volltexte/2019/10397Sherrington, D. & Kirkpatrick, S. Solvable model of a spin-glass.
Phys. Rev. Lett.
35, 1792–1796 (1975).
ADSArticleGoogle ScholarMontanari, A. Optimization of the Sherrington–Kirkpatrick Hamiltonian. Preprint athttps://arxiv.org/abs/1812.10897(2018).
Hirata, Y., Nakanishi, M., Yamashita, S. & Nakashima, Y. An efficient conversion of quantum circuits to a linear nearest neighbor architecture.
Quantum Inf. Comput.
11, 142–166 (2011).
MathSciNetMATHGoogle ScholarYang, Z.-C., Rahmani, A., Shabani, A., Neven, H. & Chamon, C. Optimizing variational quantum algorithms using Pontryagin’s minimum principle.
Phys. Rev. X7, 021027 (2017).
Google ScholarMcClean, J. R., Boixo, S., Smelyanskiy, V. N., Babbush, R. & Neven, H. Barren plateaus in quantum neural network training landscapes.
Nat. Commun.
9, 4812 (2018).
ADSArticleGoogle ScholarSung, K. J. et al. Using models to improve optimizers for variational quantum algorithms.
Quantum Sci. Technol.
https://doi.org/10.1088/2058-9565/abb6d9(2020).
Google AI Quantum and collaborators Recirq.
Zenodohttps://doi.org/10.5281/zenodo.3992332(2020).
Google AI Quantum and collaborators. Sycamore QAOA experimental data.
figsharehttps://figshare.com/articles/dataset/Sycamore_QAOA_experimental_data/12597590(2020).
Download referencesAcknowledgementsWe thank the Cambridge Quantum Computing team for helpful correspondence about their\({\rm{t}}\left|{\rm{ket}}\right\rangle\)compiler, which we used for routing of MaxCut problems. The VW team acknowledges support from the European Union’s Horizon 2020 research and innovation programme under grant agreement number 828826 ‘Quromorphic’. We thank all other members of the Google Quantum team, as well as our executive sponsors. D.B. is a CIFAR Associate Fellow in the Quantum Information Science Program.
Author informationAffiliationsGoogle Research, Mountain View, CA, USAMatthew P. Harrigan, Kevin J. Sung, Matthew Neeley, Kevin J. Satzinger, Frank Arute, Kunal Arya, Juan Atalaya, Joseph C. Bardin, Rami Barends, Sergio Boixo, Michael Broughton, Bob B. Buckley, David A. Buell, Brian Burkett, Nicholas Bushnell, Yu Chen, Zijun Chen, Ben Chiaro, Roberto Collins, William Courtney, Sean Demura, Andrew Dunsworth, Daniel Eppens, Austin Fowler, Brooks Foxen, Craig Gidney, Marissa Giustina, Rob Graff, Steve Habegger, Alan Ho, Sabrina Hong, Trent Huang, L. B. Ioffe, Sergei V. Isakov, Evan Jeffrey, Zhang Jiang, Cody Jones, Dvir Kafri, Kostyantyn Kechedzhi, Julian Kelly, Seon Kim, Paul V. Klimov, Alexander N. Korotkov, Fedor Kostritsa, David Landhuis, Pavel Laptev, Mike Lindmark, Orion Martin, John M. Martinis, Jarrod R. McClean, Matt McEwen, Anthony Megrant, Xiao Mi, Masoud Mohseni, Wojciech Mruczkiewicz, Josh Mutus, Ofer Naaman, Charles Neill, Murphy Yuezhen Niu, Thomas E. O’Brien, Eric Ostby, Andre Petukhov, Harald Putterman, Chris Quintana, Pedram Roushan, Nicholas C. Rubin, Daniel Sank, Vadim Smelyanskiy, Doug Strain, Marco Szalay, Amit Vainsencher, Theodore White, Z. Jamie Yao, Ping Yeh, Adam Zalcman, Leo Zhou, Hartmut Neven, Dave Bacon, Erik Lucero, Edward Farhi & Ryan BabbushDepartment of Electrical Engineering and Computer Science, University of Michigan, Ann Arbor, MI, USAKevin J. SungDepartment of Electrical and Computer Engineering, University of Massachusetts, Amherst, MA, USAJoseph C. BardinDepartment of Physics, University of California, Santa Barbara, CA, USABen Chiaro, John M. Martinis & Matt McEwenDepartment of Electrical and Computer Engineering, University of California, Riverside, CA, USAAlexander N. KorotkovVolkswagen Data:Lab, Munich, GermanyMartin Leib, Florian Neukart, Andrea Skolik & Michael StreifNASA Ames Research Center, Moffett Field, CA, USABryan O’GormanDepartment of Electrical Engineering and Computer Sciences, University of California, Berkeley, CA, USABryan O’GormanLeiden University, Leiden, NetherlandsAndrea SkolikDepartment of Physics, Friedrich-Alexander University Erlangen-Nürnberg, Erlangen, GermanyMichael StreifDepartment of Physics, Harvard University, Cambridge, MA, USALeo ZhouYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarYou can also search for this author inPubMedGoogle ScholarContributionsR. Babbush and E.F. designed the experiment. M.P.H. and K.J.S. led code development and data collection with assistance from non-Google collaborators. Z.J. and N.C.R. derived the gate synthesis used in compilation. The manuscript was written by M.P.H., R. Babbush, E.F. and K.J.S. Experiments were performed using cloud access to a quantum processor that was recently developed and fabricated by a large effort involving the entire Google Quantum AI team.
Corresponding authorsCorrespondence toMatthew P. HarriganorRyan Babbush.
Ethics declarationsCompeting interestsThe authors declare no competing interests.
Additional informationPeer review informationNature Physicsthanks the anonymous reviewers for their contribution to the peer review of this work.
Publisher’s noteSpringer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.
Supplementary informationSupplementary InformationSupplementary Sections 1–6.
Source dataSource Data Fig. 4Source Data for Fig. 4.
Source Data Fig. 5Source Data for Fig. 5 (lines).
Source Data Fig. 5Source Data for Fig. 5 (histogram).
Rights and permissionsReprints and PermissionsAbout this articleCite this articleHarrigan, M.P., Sung, K.J., Neeley, M.
et al.
Quantum approximate optimization of non-planar graph problems on a planar superconducting processor.
Nat. Phys.
17,332–336 (2021). https://doi.org/10.1038/s41567-020-01105-yDownload citationReceived:08 April 2020Accepted:23 October 2020Published:04 February 2021Issue Date:March 2021DOI:https://doi.org/10.1038/s41567-020-01105-yShare this articleAnyone you share the following link with will be able to read this content:Sorry, a shareable link is not currently available for this article.
Provided by the Springer Nature SharedIt content-sharing initiativeFurther readingMulti-angle quantum approximate optimization algorithmScientific Reports(2022)Multi-qubit entanglement and algorithms on a neutral-atom quantum computerNature(2022)Ising machines as hardware solvers of combinatorial optimization problemsNature Reviews Physics(2022)Quantum gradient descent algorithms for nonequilibrium steady states and linear algebraic systemsScience China Physics, Mechanics & Astronomy(2022)Practical distributed quantum information processing with LOCCNetnpj Quantum Information(2021)You have full access to this article via your institution.
Associated ContentWork with what you’ve gotAdvertisementExplore contentAbout the journalPublish with usSearchAdvanced searchQuick linksNature Physics (Nat. Phys.
)ISSN1745-2481(online)ISSN1745-2473(print)nature.com sitemapDiscover contentPublishing policiesAuthor & Researcher servicesLibraries & institutionsAdvertising & partnershipsCareer developmentRegional websitesLegal & Privacy© 2022 Springer Nature LimitedSign up for theNature Briefingnewsletter — what matters in science, free to your inbox daily.
