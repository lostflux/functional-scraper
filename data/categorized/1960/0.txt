old id = 1159
Artificial neural network - Wikipedia
1960
https://en.wikipedia.org/wiki/Artificial_neural_network

Artificial neural networkCollective intelligenceCollective actionSelf-organized criticalityHerd mentalityPhase transitionAgent-based modellingSynchronizationAnt colony optimizationParticle swarm optimizationSwarm behaviourSocial network analysisSmall-world networksCentralityMotifsGraph theoryScalingRobustnessSystems biologyDynamic networksEvolutionary computationGenetic algorithmsGenetic programmingArtificial lifeMachine learningEvolutionary developmental biologyArtificial intelligenceEvolutionary roboticsReaction–diffusion systemsPartial differential equationsDissipative structuresPercolationCellular automataSpatial ecologySelf-replicationInformation theoryEntropyFeedbackGoal-orientedHomeostasisOperationalizationSecond-order cyberneticsSelf-referenceSystem dynamicsSystems scienceSystems thinkingSensemakingVarietyOrdinary differential equationsPhase spaceAttractorsPopulation dynamicsChaosMultistabilityBifurcationRational choice theoryBounded rationalityArtificial neural networks(ANNs), usually simply calledneural networks(NNs), are computing systems inspired by thebiological neural networksthat constitute animalbrains.
An ANN is based on a collection of connected units or nodes calledartificial neurons, which loosely model theneuronsin a biological brain. Each connection, like thesynapsesin a biological brain, can transmit a signal to other neurons. An artificial neuron receives signals then processes them and can signal neurons connected to it. The "signal" at a connection is areal number, and the output of each neuron is computed by some non-linear function of the sum of its inputs. The connections are callededges. Neurons and edges typically have aweightthat adjusts as learning proceeds. The weight increases or decreases the strength of the signal at a connection. Neurons may have a threshold such that a signal is sent only if the aggregate signal crosses that threshold. Typically, neurons are aggregated into layers. Different layers may perform different transformations on their inputs. Signals travel from the first layer (the input layer), to the last layer (the output layer), possibly after traversing the layers multiple times.
.mw-parser-output .toclimit-2 .toclevel-1 ul,.mw-parser-output .toclimit-3 .toclevel-2 ul,.mw-parser-output .toclimit-4 .toclevel-3 ul,.mw-parser-output .toclimit-5 .toclevel-4 ul,.mw-parser-output .toclimit-6 .toclevel-5 ul,.mw-parser-output .toclimit-7 .toclevel-6 ul{display:none}ContentsTraining[edit]Neural networks learn (or are trained) by processing examples, each of which contains a known "input" and "result," forming probability-weighted associations between the two, which are stored within the data structure of the net itself. The training of a neural network from a given example is usually conducted by determining the difference between the processed output of the network (often a prediction) and a target output. This difference is the error. The network then adjusts its weighted associations according to a learning rule and using this error value. Successive adjustments will cause the neural network to produce output which is increasingly similar to the target output. After a sufficient number of these adjustments the training can be terminated based upon certain criteria. This is known assupervised learning.
Such systems "learn" to perform tasks by considering examples, generally without being programmed with task-specific rules. For example, inimage recognition, they might learn to identify images that contain cats by analyzing example images that have been manuallylabeledas "cat" or "no cat" and using the results to identify cats in other images. They do this without any prior knowledge of cats, for example, that they have fur, tails, whiskers, and cat-like faces. Instead, they automatically generate identifying characteristics from the examples that they process.
History[edit]Warren McCullochandWalter Pitts[1](1943) opened the subject by creating a computational model for neural networks.
[2]In the late 1940s,D. O. Hebb[3]created a learning hypothesis based on the mechanism ofneural plasticitythat became known asHebbian learning. Farley andWesley A. Clark[4](1954) first used computational machines, then called "calculators", to simulate a Hebbian network. In 1958, psychologistFrank Rosenblattinvented theperceptron, the first artificial neural network,[5][6][7][8]funded by the United StatesOffice of Naval Research.
[9]The first functional networks with many layers were published byIvakhnenkoand Lapa in 1965, as theGroup Method of Data Handling.
[10][11][12]The basics of continuous backpropagation[10][13][14][15]were derived in the context ofcontrol theorybyKelley[16]in 1960 and byBrysonin 1961,[17]using principles ofdynamic programming. Thereafter research stagnated followingMinskyandPapert(1969),[18]who discovered that basic perceptrons were incapable of processing the exclusive-or circuit and that computers lacked sufficient power to process useful neural networks.
In 1970,Seppo Linnainmaapublished the general method forautomatic differentiation(AD) of discrete connected networks of nesteddifferentiablefunctions.
[19][20]In 1973, Dreyfus used backpropagation to adaptparametersof controllers in proportion to error gradients.
[21]Werbos's (1975)backpropagationalgorithm enabled practical training of multi-layer networks. In 1982, he applied Linnainmaa's AD method to neural networks in the way that became widely used.
[13][22]The development ofmetal–oxide–semiconductor(MOS)very-large-scale integration(VLSI), in the form ofcomplementary MOS(CMOS) technology, enabled increasing MOStransistor countsindigital electronics. This provided more processing power for the development of practical artificial neural networks in the 1980s.
[23]In 1986Rumelhart,HintonandWilliamsshowed that backpropagation learned interesting internal representations of words as feature vectors when trained to predict the next word in a sequence.
[24]From 1988 onward,[25][26]the use of neural networks transformed the field of protein structure prediction, in particular when the first cascading networks were trained onprofiles(matrices) produced by multiple sequence alignments.
[27]In 1992,max-poolingwas introduced to help with least-shift invariance and tolerance to deformation to aid3D object recognition.
[28][29][30]Schmidhuberadopted a multi-level hierarchy of networks (1992) pre-trained one level at a time byunsupervised learningand fine-tuned bybackpropagation.
[31]Neural networks' early successes included predicting the stock market and in 1995 a (mostly) self-driving car.
[a][32]Geoffrey Hintonet al. (2006) proposed learning a high-level representation using successive layers of binary or real-valuedlatent variableswith arestricted Boltzmann machine[33]to model each layer. In 2012,NgandDeancreated a network that learned to recognize higher-level concepts, such as cats, only from watching unlabeled images.
[34]Unsupervised pre-training and increased computing power fromGPUsanddistributed computingallowed the use of larger networks, particularly in image and visual recognition problems, which became known as "deep learning".
[35]Ciresan and colleagues (2010)[36]showed that despite thevanishing gradient problem, GPUs make backpropagation feasible for many-layered feedforward neural networks.
[37]Between 2009 and 2012, ANNs began winning prizes in image recognition contests, approaching human level performance on various tasks, initially inpattern recognitionandhandwriting recognition.
[38][39]For example, the bi-directional and multi-dimensionallong short-term memory(LSTM)[40][41][42][43]ofGraveset al. won three competitions in connected handwriting recognition in 2009 without any prior knowledge about the three languages to be learned.
[42][41]Ciresan and colleagues built the first pattern recognizers to achieve human-competitive/superhuman performance[44]on benchmarks such as traffic sign recognition (IJCNN 2012).
Models[edit]ANNs began as an attempt to exploit the architecture of the human brain to perform tasks that conventional algorithms had little success with. They soon reoriented towards improving empirical results, mostly abandoning attempts to remain true to their biological precursors. Neurons are connected to each other in various patterns, to allow the output of some neurons to become the input of others. The network forms adirected,weighted graph.
[45]An artificial neural network consists of a collection of simulated neurons. Each neuron is anodewhich is connected to other nodes vialinksthat correspond to biological axon-synapse-dendrite connections. Each link has a weight, which determines the strength of one node's influence on another.
[46]Artificial neurons[edit]ANNs are composed ofartificial neuronswhich are conceptually derived from biologicalneurons. Each artificial neuron has inputs and produces a single output which can be sent to multiple other neurons.
[47]The inputs can be the feature values of a sample of external data, such as images or documents, or they can be the outputs of other neurons. The outputs of the finaloutput neuronsof the neural net accomplish the task, such as recognizing an object in an image.
To find the output of the neuron, First we must take the weighted sum of all the inputs, weighted by theweightsof theconnectionsfrom the inputs to the neuron. We add abiasterm to this sum.
[48]This weighted sum is sometimes called theactivation. This weighted sum is then passed through a (usually nonlinear)activation functionto produce the output. The initial inputs are external data, such as images and documents. The ultimate outputs accomplish the task, such as recognizing an object in an image.
[49]Organization[edit]The neurons are typically organized into multiple layers, especially indeep learning. Neurons of one layer connect only to neurons of the immediately preceding and immediately following layers. The layer that receives external data is theinput layer. The layer that produces the ultimate result is theoutput layer. In between them are zero or morehidden layers. Single layer and unlayered networks are also used. Between two layers, multiple connection patterns are possible. They can be 'fully connected', with every neuron in one layer connecting to every neuron in the next layer. They can bepooling, where a group of neurons in one layer connect to a single neuron in the next layer, thereby reducing the number of neurons in that layer.
[50]Neurons with only such connections form adirected acyclic graphand are known asfeedforward networks.
[51]Alternatively, networks that allow connections between neurons in the same or previous layers are known asrecurrent networks.
[52]Hyperparameter[edit]A hyperparameter is a constantparameterwhose value is set before the learning process begins. The values of parameters are derived via learning. Examples of hyperparameters includelearning rate, the number of hidden layers and batch size.
[53]The values of some hyperparameters can be dependent on those of other hyperparameters. For example, the size of some layers can depend on the overall number of layers.
Learning[edit]Learning is the adaptation of the network to better handle a task by considering sample observations. Learning involves adjusting the weights (and optional thresholds) of the network to improve the accuracy of the result. This is done by minimizing the observed errors. Learning is complete when examining additional observations does not usefully reduce the error rate. Even after learning, the error rate typically does not reach 0. If after learning, the error rate is too high, the network typically must be redesigned. Practically this is done by defining acost functionthat is evaluated periodically during learning. As long as its output continues to decline, learning continues. The cost is frequently defined as astatisticwhose value can only be approximated. The outputs are actually numbers, so when the error is low, the difference between the output (almost certainly a cat) and the correct answer (cat) is small. Learning attempts to reduce the total of the differences across the observations. Most learning models can be viewed as a straightforward application ofoptimizationtheory andstatistical estimation.
[54][45]Learning rate[edit]The learning rate defines the size of the corrective steps that the model takes to adjust for errors in each observation.
[55]A high learning rate shortens the training time, but with lower ultimate accuracy, while a lower learning rate takes longer, but with the potential for greater accuracy. Optimizations such asQuickpropare primarily aimed at speeding up error minimization, while other improvements mainly try to increase reliability. In order to avoid oscillation inside the network such as alternating connection weights, and to improve the rate of convergence, refinements use anadaptive learning ratethat increases or decreases as appropriate.
[56]The concept of momentum allows the balance between the gradient and the previous change to be weighted such that the weight adjustment depends to some degree on the previous change. A momentum close to 0 emphasizes the gradient, while a value close to 1 emphasizes the last change.
Cost function[edit]While it is possible to define a cost functionad hoc, frequently the choice is determined by the function's desirable properties (such asconvexity) or because it arises from the model (e.g. in a probabilistic model the model'sposterior probabilitycan be used as an inverse cost).
Backpropagation[edit]Backpropagation is a method used to adjust the connection weights to compensate for each error found during learning. The error amount is effectively divided among the connections. Technically, backprop calculates thegradient(the derivative) of thecost functionassociated with a given state with respect to the weights. The weight updates can be done viastochastic gradient descentor other methods, such asExtreme Learning Machines,[57]"No-prop" networks,[58]training without backtracking,[59]"weightless" networks,[60][61]andnon-connectionist neural networks.
Learning paradigms[edit]The three major learning paradigms aresupervised learning,unsupervised learningandreinforcement learning. They each correspond to a particular learning taskSupervised learning[edit]Supervised learninguses a set of paired inputs and desired outputs. The learning task is to produce the desired output for each input. In this case the cost function is related to eliminating incorrect deductions.
[62]A commonly used cost is themean-squared error, which tries to minimize the average squared error between the network's output and the desired output. Tasks suited for supervised learning arepattern recognition(also known as classification) andregression(also known as function approximation). Supervised learning is also applicable to sequential data (e.g., for hand writing, speech andgesture recognition). This can be thought of as learning with a "teacher", in the form of a function that provides continuous feedback on the quality of solutions obtained thus far.
Unsupervised learning[edit]Inunsupervised learning, input data is given along with the cost function, some function of the datax{\displaystyle \textstyle x}and the network's output. The cost function is dependent on the task (the model domain) and anya prioriassumptions (the implicit properties of the model, its parameters and the observed variables). As a trivial example, consider the modelf(x)=a{\displaystyle \textstyle f(x)=a}wherea{\displaystyle \textstyle a}is a constant and the costC=E[(x−f(x))2]{\displaystyle \textstyle C=E[(x-f(x))^{2}]}. Minimizing this cost produces a value ofa{\displaystyle \textstyle a}that is equal to the mean of the data. The cost function can be much more complicated. Its form depends on the application: for example, incompressionit could be related to themutual informationbetweenx{\displaystyle \textstyle x}andf(x){\displaystyle \textstyle f(x)}, whereas in statistical modeling, it could be related to theposterior probabilityof the model given the data (note that in both of those examples those quantities would be maximized rather than minimized). Tasks that fall within the paradigm of unsupervised learning are in generalestimationproblems; the applications includeclustering, the estimation ofstatistical distributions,compressionandfiltering.
Reinforcement learning[edit]In applications such as playing video games, an actor takes a string of actions, receiving a generally unpredictable response from the environment after each one. The goal is to win the game, i.e., generate the most positive (lowest cost) responses. Inreinforcement learning, the aim is to weight the network (devise a policy) to perform actions that minimize long-term (expected cumulative) cost. At each point in time the agent performs an action and the environment generates an observation and an instantaneous cost, according to some (usually unknown) rules. The rules and the long-term cost usually only can be estimated. At any juncture, the agent decides whether to explore new actions to uncover their costs or to exploit prior learning to proceed more quickly.
Formally the environment is modeled as aMarkov decision process(MDP) with statess1,.
.
.
,sn∈S{\displaystyle \textstyle {s_{1},...,s_{n}}\in S}and actionsa1,.
.
.
,am∈A{\displaystyle \textstyle {a_{1},...,a_{m}}\in A}. Because the state transitions are not known, probability distributions are used instead: the instantaneous cost distributionP(ct|st){\displaystyle \textstyle P(c_{t}|s_{t})}, the observation distributionP(xt|st){\displaystyle \textstyle P(x_{t}|s_{t})}and the transition distributionP(st+1|st,at){\displaystyle \textstyle P(s_{t+1}|s_{t},a_{t})}, while a policy is defined as the conditional distribution over actions given the observations. Taken together, the two define aMarkov chain(MC). The aim is to discover the lowest-cost MC.
ANNs serve as the learning component in such applications.
[63][64]Dynamic programmingcoupled with ANNs (giving neurodynamic programming)[65]has been applied to problems such as those involved invehicle routing,[66]video games,natural resource management[67][68]andmedicine[69]because of ANNs ability to mitigate losses of accuracy even when reducing the discretization grid density for numerically approximating the solution of control problems. Tasks that fall within the paradigm of reinforcement learning are control problems,gamesand other sequential decision making tasks.
Self-learning[edit]Self-learning in neural networks was introduced in 1982 along with a neural network capable of self-learning named Crossbar Adaptive Array (CAA).
[70]It is a system with only one input, situation s, and only one output, action (or behavior) a. It has neither external advice input nor external reinforcement input from the environment. The CAA computes, in a crossbar fashion, both decisions about actions and emotions (feelings) about encountered situations. The system is driven by the interaction between cognition and emotion.
[71]Given the memory matrix, W =||w(a,s)||, the crossbar self-learning algorithm in each iteration performs the following computation:The backpropagated value (secondary reinforcement) is the emotion toward the consequence situation. The CAA exists in two environments, one is behavioral environment where it behaves, and the other is genetic environment, where from it initially and only once receives initial emotions about to be encountered situations in the behavioral environment. Having received the genome vector (species vector) from the genetic environment, the CAA will learn a goal-seeking behavior, in the behavioral environment that contains both desirable and undesirable situations.
[72]Neuroevolution[edit]Neuroevolutioncan create neural network topologies and weights usingevolutionary computation. It is competitive with sophisticated gradient descent approaches[citation needed]. One advantage of neuroevolution is that it may be less prone to get caught in "dead ends".
[73]Stochastic neural network[edit]Stochastic neural networksoriginating fromSherrington–Kirkpatrick modelsare a type of artificial neural network built by introducing random variations into the network, either by giving the network'sartificial neuronsstochastictransfer functions, or by giving them stochastic weights. This makes them useful tools foroptimizationproblems, since the random fluctuations help the network escape fromlocal minima.
[74]Other[edit]In aBayesianframework, a distribution over the set of allowed models is chosen to minimize the cost.
Evolutionary methods,[75]gene expression programming,[76]simulated annealing,[77]expectation-maximization,non-parametric methodsandparticle swarm optimization[78]are other learning algorithms. Convergent recursion is a learning algorithm forcerebellar model articulation controller(CMAC) neural networks.
[79][80]Modes[edit]Two modes of learning are available:stochasticand batch. In stochastic learning, each input creates a weight adjustment. In batch learning weights are adjusted based on a batch of inputs, accumulating errors over the batch. Stochastic learning introduces "noise" into the process, using the local gradient calculated from one data point; this reduces the chance of the network getting stuck in local minima. However, batch learning typically yields a faster, more stable descent to a local minimum, since each update is performed in the direction of the batch's average error. A common compromise is to use "mini-batches", small batches with samples in each batch selected stochastically from the entire data set.
Types[edit]ANNs have evolved into a broad family of techniques that have advanced the state of the art across multiple domains. The simplest types have one or more static components, including number of units, number of layers, unit weights andtopology. Dynamic types allow one or more of these to evolve via learning. The latter are much more complicated, but can shorten learning periods and produce better results. Some types allow/require learning to be "supervised" by the operator, while others operate independently. Some types operate purely in hardware, while others are purely software and run on general purpose computers.
Some of the main breakthroughs include:convolutional neural networksthat have proven particularly successful in processing visual and other two-dimensional data;[81][82]long short-term memory avoid thevanishing gradient problem[83]and can handle signals that have a mix of low and high frequency components aiding large-vocabulary speech recognition,[84][85]text-to-speech synthesis,[86][13][87]and photo-real talking heads;[88]competitive networks such asgenerative adversarial networksin which multiple networks (of varying structure) compete with each other, on tasks such as winning a game[89]or on deceiving the opponent about the authenticity of an input.
[90]Network design[edit]Neural architecture search (NAS) uses machine learning to automate ANN design. Various approaches to NAS have designed networks that compare well with hand-designed systems. The basic search algorithm is to propose a candidate model, evaluate it against a dataset and use the results as feedback to teach the NAS network.
[91]Available systems includeAutoMLand AutoKeras.
[92]Design issues include deciding the number, type and connectedness of network layers, as well as the size of each and the connection type (full, pooling, ...).
Hyperparametersmust also be defined as part of the design (they are not learned), governing matters such as how many neurons are in each layer, learning rate, step, stride, depth, receptive field and padding (for CNNs), etc.
[93]Use[edit]Using Artificial neural networks requires an understanding of their characteristics.
ANN capabilities fall within the following broad categories:[citation needed]Applications[edit]Because of their ability to reproduce and model nonlinear processes, artificial neural networks have found applications in many disciplines. Application areas includesystem identificationand control (vehicle control, trajectory prediction,[95]process control,natural resource management),quantum chemistry,[96]general game playing,[97]pattern recognition(radar systems,face identification, signal classification,[98]3D reconstruction,[99]object recognition and more), sensor data analysis,[100]sequence recognition (gesture, speech,handwrittenand printed text recognition[101]),medical diagnosis, finance[102](e.g.
automated trading systems),data mining, visualization,machine translation, social network filtering[103]ande-mail spamfiltering. ANNs have been used to diagnose several types of cancers[104][105]and to distinguish highly invasive cancer cell lines from less invasive lines using only cell shape information.
[106][107]ANNs have been used to accelerate reliability analysis of infrastructures subject to natural disasters[108][109]and to predict foundation settlements.
[110]ANNs have also been used for building black-box models ingeoscience:hydrology,[111][112]ocean modelling andcoastal engineering,[113][114]andgeomorphology.
[115]ANNs have been employed incybersecurity, with the objective to discriminate between legitimate activities and malicious ones. For example, machine learning has been used for classifying Android malware,[116]for identifying domains belonging to threat actors and for detecting URLs posing a security risk.
[117]Research is underway on ANN systems designed for penetration testing, for detecting botnets,[118]credit cards frauds[119]and network intrusions.
ANNs have been proposed as a tool to solvepartial differential equationsin physics[120][121][122]and simulate the properties of many-bodyopen quantum systems.
[123][124][125][126]In brain research ANNs have studied short-term behavior ofindividual neurons,[127]the dynamics of neural circuitry arise from interactions between individual neurons and how behavior can arise from abstract neural modules that represent complete subsystems. Studies considered long-and short-term plasticity of neural systems and their relation to learning and memory from the individual neuron to the system level.
Theoretical properties[edit]Computational power[edit]Themultilayer perceptronis auniversal functionapproximator, as proven by theuniversal approximation theorem. However, the proof is not constructive regarding the number of neurons required, the network topology, the weights and the learning parameters.
A specific recurrent architecture withrational-valued weights (as opposed to full precisionreal number-valued weights) has the power of auniversal Turing machine,[128]using a finite number of neurons and standard linear connections. Further, the use ofirrationalvalues for weights results in a machine withsuper-Turingpower.
[129]Capacity[edit]A model's "capacity" property corresponds to its ability to model any given function. It is related to the amount of information that can be stored in the network and to the notion of complexity. Two notions of capacity are known by the community. The information capacity and the VC Dimension. The information capacity of a perceptron is intensively discussed in Sir David MacKay's book[130]which summarizes work by Thomas Cover.
[131]The capacity of a network of standard neurons (not convolutional) can be derived by four rules[132]that derive from understanding a neuron as anelectrical element. The information capacity captures the functions modelable by the network given any data as input. The second notion, is theVC dimension. VC Dimension uses the principles ofmeasure theoryand finds the maximum capacity under the best possible circumstances. This is, given input data in a specific form. As noted in,[130]the VC Dimension for arbitrary inputs is half the information capacity of a Perceptron. The VC Dimension for arbitrary points is sometimes referred to as Memory Capacity.
[133]Convergence[edit]Models may not consistently converge on a single solution, firstly because local minima may exist, depending on the cost function and the model. Secondly, the optimization method used might not guarantee to converge when it begins far from any local minimum. Thirdly, for sufficiently large data or parameters, some methods become impractical.
Another issue worthy to mention is that training may cross someSaddle pointwhich may lead the convergence to the wrong direction.
The convergence behavior of certain types of ANN architectures are more understood than others. When the width of network approaches to infinity, the ANN is well described by its first order Taylor expansion throughout training, and so inherits the convergence behavior ofaffine models.
[134][135]Another example is when parameters are small, it is observed that ANNs often fits target functions from low to high frequencies. This behavior is referred to as the spectral bias, or frequency principle, of neural networks.
[136][137][138][139]This phenomenon is the opposite to the behavior of some well studied iterative numerical schemes such asJacobi method. Deeper neural networks have been observed to be more biased towards low frequency functions.
[140]Generalization and statistics[edit]Applications whose goal is to create a system that generalizes well to unseen examples, face the possibility of over-training. This arises in convoluted or over-specified systems when the network capacity significantly exceeds the needed free parameters. Two approaches address over-training. The first is to usecross-validationand similar techniques to check for the presence of over-training and to selecthyperparametersto minimize the generalization error.
The second is to use some form ofregularization. This concept emerges in a probabilistic (Bayesian) framework, where regularization can be performed by selecting a larger prior probability over simpler models; but also in statistical learning theory, where the goal is to minimize over two quantities: the 'empirical risk' and the 'structural risk', which roughly corresponds to the error over the training set and the predicted error in unseen data due to overfitting.
Supervised neural networks that use amean squared error(MSE) cost function can use formal statistical methods to determine the confidence of the trained model. The MSE on a validation set can be used as an estimate for variance. This value can then be used to calculate theconfidence intervalof network output, assuming anormal distribution. A confidence analysis made this way is statistically valid as long as the outputprobability distributionstays the same and the network is not modified.
By assigning asoftmax activation function, a generalization of thelogistic function, on the output layer of the neural network (or a softmax component in a component-based network) for categorical target variables, the outputs can be interpreted as posterior probabilities. This is useful in classification as it gives a certainty measure on classifications.
The softmax activation function is:Criticism[edit]Training[edit]A common criticism of neural networks, particularly in robotics, is that they require too much training for real-world operation.
[citation needed]Potential solutions include randomly shuffling training examples, by using a numerical optimization algorithm that does not take too large steps when changing the network connections following an example, grouping examples in so-called mini-batches and/or introducing a recursive least squares algorithm forCMAC.
[79]Theory[edit]A fundamental objection is that ANNs do not sufficiently reflect neuronal function. Backpropagation is a critical step, although no such mechanism exists in biological neural networks.
[141]How information is coded by real neurons is not known.
Sensor neuronsfireaction potentialsmore frequently with sensor activation andmuscle cellspull more strongly when their associatedmotor neuronsreceive action potentials more frequently.
[142]Other than the case of relaying information from a sensor neuron to a motor neuron, almost nothing of the principles of how information is handled by biological neural networks is known.
A central claim of ANNs is that they embody new and powerful general principles for processing information. These principles are ill-defined. It is often claimed that they areemergentfrom the network itself. This allows simple statistical association (the basic function of artificial neural networks) to be described as learning or recognition. In 1997,Alexander Dewdneycommented that, as a result, artificial neural networks have a "something-for-nothing quality, one that imparts a peculiar aura of laziness and a distinct lack of curiosity about just how good these computing systems are. No human hand (or mind) intervenes; solutions are found as if by magic; and no one, it seems, has learned anything".
[143]One response to Dewdney is that neural networks handle many complex and diverse tasks, ranging from autonomously flying aircraft[144]to detecting credit card fraud to mastering the game ofGo.
Technology writer Roger Bridgman commented:Neural networks, for instance, are in the dock not only because they have been hyped to high heaven, (what hasn't?) but also because you could create a successful net without understanding how it worked: the bunch of numbers that captures its behaviour would in all probability be "an opaque, unreadable table...valueless as a scientific resource".
In spite of his emphatic declaration that science is not technology, Dewdney seems here to pillory neural nets as bad science when most of those devising them are just trying to be good engineers. An unreadable table that a useful machine could read would still be well worth having.
[145]Biological brains use both shallow and deep circuits as reported by brain anatomy,[146]displaying a wide variety of invariance. Weng[147]argued that the brain self-wires largely according to signal statistics and therefore, a serial cascade cannot catch all major statistical dependencies.
Hardware[edit]Large and effective neural networks require considerable computing resources.
[148]While the brain has hardware tailored to the task of processing signals through agraphof neurons, simulating even a simplified neuron onvon Neumann architecturemay consume vast amounts ofmemoryand storage. Furthermore, the designer often needs to transmit signals through many of these connections and their associated neurons – which require enormousCPUpower and time.
Schmidhubernoted that the resurgence of neural networks in the twenty-first century is largely attributable to advances in hardware: from 1991 to 2015, computing power, especially as delivered byGPGPUs(onGPUs), has increased around a million-fold, making the standard backpropagation algorithm feasible for training networks that are several layers deeper than before.
[10]The use of accelerators such asFPGAsand GPUs can reduce training times from months to days.
[148]Neuromorphic engineeringor aphysical neural networkaddresses the hardware difficulty directly, by constructing non-von-Neumann chips to directly implement neural networks in circuitry. Another type of chip optimized for neural network processing is called aTensor Processing Unit, or TPU.
[149]Practical counterexamples[edit]Analyzing what has been learned by an ANN is much easier than analyzing what has been learned by a biological neural network. Furthermore, researchers involved in exploring learning algorithms for neural networks are gradually uncovering general principles that allow a learning machine to be successful. For example, local vs. non-local learning and shallow vs. deep architecture.
[150]Hybrid approaches[edit]Advocates ofhybridmodels (combining neural networks and symbolic approaches), claim that such a mixture can better capture the mechanisms of the human mind.
[151][152]Gallery[edit]A single-layer feedforward artificial neural network. Arrows originating fromx2{\displaystyle \scriptstyle x_{2}}are omitted for clarity. There are p inputs to this network and q outputs. In this system, the value of the qth output,yq{\displaystyle \scriptstyle y_{q}}would be calculated asyq=K∗(∑(xi∗wiq)−bq){\displaystyle \scriptstyle y_{q}=K*(\sum (x_{i}*w_{iq})-b_{q})}A two-layer feedforward artificial neural network.
An artificial neural network.
An ANN dependency graph.
A single-layer feedforward artificial neural network with 4 inputs, 6 hidden and 2 outputs. Given position state and direction outputs wheel based control values.
A two-layer feedforward artificial neural network with 8 inputs, 2x8 hidden and 2 outputs. Given position state, direction and other environment values outputs thruster based control values.
Parallel pipeline structure of CMAC neural network. This learning algorithm can converge in one step.
See also[edit]Notes[edit]References[edit]Bibliography[edit]External links[edit]Navigation menuSearch
