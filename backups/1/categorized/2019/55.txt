Convolutional neural network - Wikipedia
2019
https://en.wikipedia.org/wiki/Convolutional_neural_network

Main menu Main page Contents Current events Random article About Wikipedia Contact us Donate Help Learn to edit Community portal Recent changes Upload file Search Create account Log in Personal tools Create account Log in learn more Contributions Talk Contents (Top) 1 Architecture Toggle Architecture subsection 1.1 Convolutional layers 1.2 Pooling layers 1.3 Fully connected layers 1.4 Receptive field 1.5 Weights 2 History Toggle History subsection 2.1 Receptive fields in the visual cortex 2.2 Neocognitron, origin of the CNN architecture 2.3 Time delay neural networks 2.3.1 Max pooling 2.4 Image recognition with CNNs trained by gradient descent 2.4.1 LeNet-5 2.5 Shift-invariant neural network 2.6 Neural abstraction pyramid 2.7 GPU implementations 2.8 Intel Xeon Phi implementations 3 Distinguishing features 4 Building blocks Toggle Building blocks subsection 4.1 Convolutional layer 4.1.1 Local connectivity 4.1.2 Spatial arrangement 4.1.3 Parameter sharing 4.2 Pooling layer 4.3 Channel Max Pooling 4.4 ReLU layer 4.5 Fully connected layer 4.6 Loss layer 5 Hyperparameters Toggle Hyperparameters subsection 5.1 Kernel size 5.2 Padding 5.3 Stride 5.4 Number of filters 5.5 Filter size 5.6 Pooling type and size 5.7 Dilation 6 Translation equivariance and aliasing 7 Evaluation 8 Regularization methods Toggle Regularization methods subsection 8.1 Empirical 8.1.1 Dropout 8.1.2 DropConnect 8.1.3 Stochastic pooling 8.1.4 Artificial data 8.2 Explicit 8.2.1 Early stopping 8.2.2 Number of parameters 8.2.3 Weight decay 8.2.4 Max norm constraints 9 Hierarchical coordinate frames 10 Applications Toggle Applications subsection 10.1 Image recognition 10.2 Video analysis 10.3 Natural language processing 10.4 Anomaly Detection 10.5 Drug discovery 10.6 Checkers game 10.7 Go 10.8 Time series forecasting 10.9 Cultural Heritage and 3D-datasets 11 Fine-tuning 12 Human interpretable explanations 13 Related architectures Toggle Related architectures subsection 13.1 Deep Q-networks 13.2 Deep belief networks 14 Notable libraries 15 See also 16 Notes 17 References 18 External links Toggle the table of contents Convolutional neural network 25 languages العربية تۆرکجه Català Deutsch Eesti Español فارسی Français 한국어 Italiano עברית Lietuvių 日本語 Português Runa Simi Русский Simple English Српски / srpski ไทย Türkçe Українська Tiếng Việt 吴语 粵語 中文 Edit links Article Talk English Read Edit View history Tools Read Edit View history What links here Related changes Upload file Special pages Permanent link Page information Cite this page Get shortened URL Wikidata item Download as PDF Printable version This article needs additional citations for verification.
Please help improve this article by adding citations to reliable sources.
 Unsourced material may be challenged and removed.
Find sources: "Convolutional neural network" – news · newspapers · books · scholar · JSTOR ( June 2019 ) ( Learn how and when to remove this template message ) Part of a series on Machine learning and data mining Paradigms Supervised learning Unsupervised learning Online learning Batch learning Meta-learning Semi-supervised learning Self-supervised learning Reinforcement learning Rule-based learning Quantum machine learning Problems Classification Generative model Regression Clustering dimension reduction density estimation Anomaly detection Data Cleaning AutoML Association rules Semantic analysis Structured prediction Feature engineering Feature learning Learning to rank Grammar induction Ontology learning Multimodal learning Supervised learning ( classification • regression ) Apprenticeship learning Decision trees Ensembles Bagging Boosting Random forest k -NN Linear regression Naive Bayes Artificial neural networks Logistic regression Perceptron Relevance vector machine (RVM) Support vector machine (SVM) Clustering BIRCH CURE Hierarchical k -means Fuzzy Expectation–maximization (EM) DBSCAN OPTICS Mean shift Dimensionality reduction Factor analysis CCA ICA LDA NMF PCA PGD t-SNE SDL Structured prediction Graphical models Bayes net Conditional random field Hidden Markov Anomaly detection RANSAC k -NN Local outlier factor Isolation forest Artificial neural network Autoencoder Cognitive computing Deep learning DeepDream Feedforward neural network Recurrent neural network LSTM GRU ESN reservoir computing Restricted Boltzmann machine GAN Diffusion model SOM Convolutional neural network U-Net Transformer Vision Spiking neural network Memtransistor Electrochemical RAM (ECRAM) Reinforcement learning Q-learning SARSA Temporal difference (TD) Multi-agent Self-play Learning with humans Active learning Crowdsourcing Human-in-the-loop Model diagnostics Learning curve Mathematical foundations Kernel machines Bias–variance tradeoff Computational learning theory Empirical risk minimization Occam learning PAC learning Statistical learning VC theory Machine-learning venues ECML PKDD NeurIPS ICML ICLR IJCAI ML JMLR Related articles Glossary of artificial intelligence List of datasets for machine-learning research List of datasets in computer vision and image processing Outline of machine learning.
mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em} v t e Convolutional neural network ( CNN ) is a regularized type of feed-forward neural network that learns feature engineering by itself via filters (or kernel) optimization. Vanishing gradients and exploding gradients, seen during backpropagation in earlier neural networks, are prevented by using regularized weights over fewer connections.
[1] [2] For example, for each neuron in the fully-connected layer 10,000 weights would be required for processing an image sized 100 × 100 pixels. However, applying cascaded convolution (or cross-correlation) kernels, [3] [4] only 25 neurons are required to process 5x5-sized tiles.
[5] [6] Higher-layer features are extracted from wider context windows, compared to lower-layer features.
They have applications in: image and video recognition , [7] recommender systems , [8] image classification , image segmentation , medical image analysis , natural language processing , [9] brain–computer interfaces , [10] and financial time series.
[11] CNNs are also known as Shift Invariant or Space Invariant Artificial Neural Networks ( SIANN ), based on the shared-weight architecture of the convolution kernels or filters that slide along input features and provide translation- equivariant responses known as feature maps.
[12] [13] Counter-intuitively, most convolutional neural networks are not invariant to translation , due to the downsampling operation they apply to the input.
[14] Feed-forward neural networks are usually fully connected networks, that is, each neuron in one layer is connected to all neurons in the next layer.
 The "full connectivity" of these networks make them prone to overfitting data. Typical ways of regularization, or preventing overfitting, include: penalizing parameters during training (such as weight decay) or trimming connectivity (skipped connections, dropout, etc.) Robust datasets also increases the probability that CNNs will learn the generalized principles that characterize a given dataset rather than the biases of a poorly-populated set.
[15] Convolutional networks were inspired by biological processes [16] [17] [18] [19] in that the connectivity pattern between neurons resembles the organization of the animal visual cortex.
 Individual cortical neurons respond to stimuli only in a restricted region of the visual field known as the receptive field.
 The receptive fields of different neurons partially overlap such that they cover the entire visual field.
CNNs use relatively little pre-processing compared to other image classification algorithms.
 This means that the network learns to optimize the filters (or kernels) through automated learning, whereas in traditional algorithms these filters are hand-engineered.
 This independence from prior knowledge and human intervention in feature extraction is a major advantage.
[ to whom? ] Architecture [ edit ] A convolutional neural network consists of an input layer, hidden layers and an output layer. In a convolutional neural network, the hidden layers include one or more layers that perform convolutions. Typically this includes a layer that performs a dot product of the convolution kernel with the layer's input matrix. This product is usually the Frobenius inner product , and its activation function is commonly ReLU.
 As the convolution kernel slides along the input matrix for the layer, the convolution operation generates a feature map, which in turn contributes to the input of the next layer. This is followed by other layers such as pooling layers, fully connected layers, and normalization layers.
Convolutional layers [ edit ] In a CNN, the input is a tensor with shape: (number of inputs) × (input height) × (input width) × (input channels ). After passing through a convolutional layer, the image becomes abstracted to a feature map, also called an activation map, with shape: (number of inputs) × (feature map height) × (feature map width) × (feature map channels ).
Convolutional layers convolve the input and pass its result to the next layer. This is similar to the response of a neuron in the visual cortex to a specific stimulus.
[20] Each convolutional neuron processes data only for its receptive field.
 Although fully connected feedforward neural networks can be used to learn features and classify data, this architecture is generally impractical for larger inputs (e.g., high-resolution images), which would require massive numbers of neurons because each pixel is a relevant input feature. A fully connected layer for an image of size 100 × 100 has 10,000 weights for each neuron in the second layer. Convolution reduces the number of free parameters, allowing the network to be deeper.
[5] For example, using a 5 × 5 tiling region, each with the same shared weights, requires only 25 neurons. Using regularized weights over fewer parameters avoids the vanishing gradients and exploding gradients problems seen during backpropagation in earlier neural networks.
[1] [2] To speed processing, standard convolutional layers can be replaced by depthwise separable convolutional layers, [21] which are based on a depthwise convolution followed by a pointwise convolution. The depthwise convolution is a spatial convolution applied independently over each channel of the input tensor, while the pointwise convolution is a standard convolution restricted to the use of 1 × 1 {\displaystyle 1\times 1} kernels.
Pooling layers [ edit ] Convolutional networks may include local and/or global pooling layers along with traditional convolutional layers. Pooling layers reduce the dimensions of data by combining the outputs of neuron clusters at one layer into a single neuron in the next layer. Local pooling combines small clusters, tiling sizes such as 2 × 2 are commonly used. Global pooling acts on all the neurons of the feature map.
[22] [23] There are two common types of pooling in popular use: max and average.
Max pooling uses the maximum value of each local cluster of neurons in the feature map, [24] [25] while average pooling takes the average value.
Fully connected layers [ edit ] Fully connected layers connect every neuron in one layer to every neuron in another layer. It is the same as a traditional multilayer perceptron neural network (MLP). The flattened matrix goes through a fully connected layer to classify the images.
Receptive field [ edit ] In neural networks, each neuron receives input from some number of locations in the previous layer. In a convolutional layer, each neuron receives input from only a restricted area of the previous layer called the neuron's receptive field.
 Typically the area is a square (e.g. 5 by 5 neurons). Whereas, in a fully connected layer, the receptive field is the entire previous layer.
 Thus, in each convolutional layer, each neuron takes input from a larger area in the input than previous layers. This is due to applying the convolution over and over, which takes the value of a pixel into account, as well as its surrounding pixels. When using dilated layers, the number of pixels in the receptive field remains constant, but the field is more sparsely populated as its dimensions grow when combining the effect of several layers.
To manipulate the receptive field size as desired, there are some alternatives to the standard convolutional layer. For example, atrous or dilated convolution [26] [27] expands the receptive field size without increasing the number of parameters by interleaving visible and blind regions. Moreover, a single dilated convolutional layer can comprise filters with multiple dilation ratios, [28] thus having a variable receptive field size.
Weights [ edit ] Each neuron in a neural network computes an output value by applying a specific function to the input values received from the receptive field in the previous layer. The function that is applied to the input values is determined by a vector of weights and a bias (typically real numbers). Learning consists of iteratively adjusting these biases and weights.
The vectors of weights and biases are called filters and represent particular features of the input (e.g., a particular shape). A distinguishing feature of CNNs is that many neurons can share the same filter. This reduces the memory footprint because a single bias and a single vector of weights are used across all receptive fields that share that filter, as opposed to each receptive field having its own bias and vector weighting.
[29] History [ edit ] CNN are often compared to the way the brain achieves vision processing in living organisms.
[30] [31] Receptive fields in the visual cortex [ edit ] Work by Hubel and Wiesel in the 1950s and 1960s showed that cat visual cortices contain neurons that individually respond to small regions of the visual field.
 Provided the eyes are not moving, the region of visual space within which visual stimuli affect the firing of a single neuron is known as its receptive field.
[32] Neighboring cells have similar and overlapping receptive fields.
[30] Receptive field size and location varies systematically across the cortex to form a complete map of visual space.
[30] [ citation needed ] The cortex in each hemisphere represents the contralateral visual field.
[ citation needed ] Their 1968 paper identified two basic visual cell types in the brain: [17] simple cells , whose output is maximized by straight edges having particular orientations within their receptive field complex cells , which have larger receptive fields , whose output is insensitive to the exact position of the edges in the field.
Hubel and Wiesel also proposed a cascading model of these two types of cells for use in pattern recognition tasks.
[33] [32] Neocognitron, origin of the CNN architecture [ edit ] The " neocognitron " [16] was introduced by Kunihiko Fukushima in 1980.
[18] [25] [34] It was inspired by the above-mentioned work of Hubel and Wiesel. The neocognitron introduced the two basic types of layers in CNNs: convolutional layers, and downsampling layers. A convolutional layer contains units whose receptive fields cover a patch of the previous layer. The weight vector (the set of adaptive parameters) of such a unit is often called a filter. Units can share filters. Downsampling layers contain units whose receptive fields cover patches of previous convolutional layers. Such a unit typically computes the average of the activations of the units in its patch. This downsampling helps to correctly classify objects in visual scenes even when the objects are shifted.
In 1969, Kunihiko Fukushima also introduced the ReLU (rectified linear unit) activation function.
[35] [36] The rectifier has become the most popular activation function for CNNs and deep neural networks in general.
[37] In a variant of the neocognitron called the cresceptron, instead of using Fukushima's spatial averaging, J. Weng et al. in 1993 introduced a method called max-pooling where a downsampling unit computes the maximum of the activations of the units in its patch.
[38] [ clarification needed ] Max-pooling is often used in modern CNNs.
[39] Several supervised and unsupervised learning algorithms have been proposed over the decades to train the weights of a neocognitron.
[16] Today, however, the CNN architecture is usually trained through backpropagation.
The neocognitron is the first CNN which requires units located at multiple network positions to have shared weights.
Convolutional neural networks were presented at the Neural Information Processing Workshop in 1987, automatically analyzing time-varying signals by replacing learned multiplication with convolution in time, and demonstrated for speech recognition.
[40] Time delay neural networks [ edit ] The time delay neural network (TDNN) was introduced in 1987 by Alex Waibel et al. and was one of the first convolutional networks, as it achieved shift invariance.
[41] It did so by utilizing weight sharing in combination with backpropagation training.
[42] Thus, while also using a pyramidal structure as in the neocognitron, it performed a global optimization of the weights instead of a local one.
[41] TDNNs are convolutional networks that share weights along the temporal dimension.
[43] They allow speech signals to be processed time-invariantly. In 1990 Hampshire and Waibel introduced a variant which performs a two dimensional convolution.
[44] Since these TDNNs operated on spectrograms, the resulting phoneme recognition system was invariant to both shifts in time and in frequency. This inspired translation invariance in image processing with CNNs.
[42] The tiling of neuron outputs can cover timed stages.
[45] TDNNs now [ when? ] achieve the best performance in far distance speech recognition.
[46] Max pooling [ edit ] In 1990 Yamaguchi et al. introduced the concept of max pooling, which is a fixed filtering operation that calculates and propagates the maximum value of a given region. They did so by combining TDNNs with max pooling in order to realize a speaker independent isolated word recognition system.
[24] In their system they used several TDNNs per word, one for each syllable.
 The results of each TDNN over the input signal were combined using max pooling and the outputs of the pooling layers were then passed on to networks performing the actual word classification.
Image recognition with CNNs trained by gradient descent [ edit ] A system to recognize hand-written ZIP Code numbers [47] involved convolutions in which the kernel coefficients had been laboriously hand designed.
[48] Yann LeCun et al. (1989) [48] used back-propagation to learn the convolution kernel coefficients directly from images of hand-written numbers. Learning was thus fully automatic, performed better than manual coefficient design, and was suited to a broader range of image recognition problems and image types.
Wei Zhang et al. (1988) [12] [13] used back-propagation to train the convolution kernels of a CNN for alphabets recognition. The model was called Shift-Invariant Artificial Neural Network (SIANN) before the name CNN was coined later in the early 1990s. Wei Zhang et al. also applied the same CNN without the last fully connected layer for medical image object segmentation (1991) [49] and breast cancer detection in mammograms (1994).
[50] This approach became a foundation of modern computer vision.
LeNet-5 [ edit ] LeNet-5, a pioneering 7-level convolutional network by LeCun et al. in 1995, [51] that classifies digits, was applied by several banks to recognize hand-written numbers on checks ( British English : cheques ) digitized in 32x32 pixel images. The ability to process higher-resolution images requires larger and more layers of convolutional neural networks, so this technique is constrained by the availability of computing resources.
Shift-invariant neural network [ edit ] A shift-invariant neural network was proposed by Wei Zhang et al. for image character recognition in 1988.
[12] [13] It is a modified Neocognitron by keeping only the convolutional interconnections between the image feature layers and the last fully connected layer. The model was trained with back-propagation. The training algorithm were further improved in 1991 [52] to improve its generalization ability. The model architecture was modified by removing the last fully connected layer and applied for medical image segmentation (1991) [49] and automatic detection of breast cancer in mammograms (1994).
[50] A different convolution-based design was proposed in 1988 [53] for application to decomposition of one-dimensional electromyography convolved signals via de-convolution. This design was modified in 1989 to other de-convolution-based designs.
[54] [55] Neural abstraction pyramid [ edit ] The feed-forward architecture of convolutional neural networks was extended in the neural abstraction pyramid [56] by lateral and feedback connections. The resulting recurrent convolutional network allows for the flexible incorporation of contextual information to iteratively resolve local ambiguities. In contrast to previous models, image-like outputs at the highest resolution were generated, e.g., for semantic segmentation, image reconstruction, and object localization tasks.
GPU implementations [ edit ] Although CNNs were invented in the 1980s, their breakthrough in the 2000s required fast implementations on graphics processing units (GPUs).
In 2004, it was shown by K. S. Oh and K. Jung that standard neural networks can be greatly accelerated on GPUs. Their implementation was 20 times faster than an equivalent implementation on CPU.
[57] [39] In 2005, another paper also emphasised the value of GPGPU for machine learning.
[58] The first GPU-implementation of a CNN was described in 2006 by K. Chellapilla et al. Their implementation was 4 times faster than an equivalent implementation on CPU.
[59] Subsequent work also used GPUs, initially for other types of neural networks (different from CNNs), especially unsupervised neural networks.
[60] [61] [62] [63] In 2010, Dan Ciresan et al. at IDSIA showed that even deep standard neural networks with many layers can be quickly trained on GPU by supervised learning through the old method known as backpropagation.
 Their network outperformed previous machine learning methods on the MNIST handwritten digits benchmark.
[64] In 2011, they extended this GPU approach to CNNs, achieving an acceleration factor of 60, with impressive results.
[22] In 2011, they used such CNNs on GPU to win an image recognition contest where they achieved superhuman performance for the first time.
[65] Between May 15, 2011 and September 30, 2012, their CNNs won no less than four image competitions.
[66] [39] In 2012, they also significantly improved on the best performance in the literature for multiple image databases , including the MNIST database , the NORB database, the HWDB1.0 dataset (Chinese characters) and the CIFAR10 dataset (dataset of 60000 32x32 labeled RGB images ).
[25] Subsequently, a similar GPU-based CNN by Alex Krizhevsky et al. won the ImageNet Large Scale Visual Recognition Challenge 2012.
[67] A very deep CNN with over 100 layers by Microsoft won the ImageNet 2015 contest.
[68] Intel Xeon Phi implementations [ edit ] Compared to the training of CNNs using GPUs , not much attention was given to the Intel Xeon Phi coprocessor.
[69] A notable development is a parallelization method for training convolutional neural networks on the Intel Xeon Phi, named Controlled Hogwild with Arbitrary Order of Synchronization (CHAOS).
[70] CHAOS exploits both the thread- and SIMD -level parallelism that is available on the Intel Xeon Phi.
Distinguishing features [ edit ] In the past, traditional multilayer perceptron (MLP) models were used for image recognition.
[ example needed ] However, the full connectivity between nodes caused the curse of dimensionality , and was computationally intractable with higher-resolution images. A 1000×1000-pixel image with RGB color channels has 3 million weights per fully-connected neuron, which is too high to feasibly process efficiently at scale.
For example, in CIFAR-10 , images are only of size 32×32×3 (32 wide, 32 high, 3 color channels), so a single fully connected neuron in the first hidden layer of a regular neural network would have 32*32*3 = 3,072 weights. A 200×200 image, however, would lead to neurons that have 200*200*3 = 120,000 weights.
Also, such network architecture does not take into account the spatial structure of data, treating input pixels which are far apart in the same way as pixels that are close together. This ignores locality of reference in data with a grid-topology (such as images), both computationally and semantically. Thus, full connectivity of neurons is wasteful for purposes such as image recognition that are dominated by spatially local input patterns.
Convolutional neural networks are variants of multilayer perceptrons, designed to emulate the behavior of a visual cortex.
 These models mitigate the challenges posed by the MLP architecture by exploiting the strong spatially local correlation present in natural images. As opposed to MLPs, CNNs have the following distinguishing features: 3D volumes of neurons. The layers of a CNN have neurons arranged in 3 dimensions : width, height and depth.
[71] Where each neuron inside a convolutional layer is connected to only a small region of the layer before it, called a receptive field. Distinct types of layers, both locally and completely connected, are stacked to form a CNN architecture.
Local connectivity: following the concept of receptive fields, CNNs exploit spatial locality by enforcing a local connectivity pattern between neurons of adjacent layers. The architecture thus ensures that the learned " filters " produce the strongest response to a spatially local input pattern. Stacking many such layers leads to nonlinear filters that become increasingly global (i.e. responsive to a larger region of pixel space) so that the network first creates representations of small parts of the input, then from them assembles representations of larger areas.
Shared weights: In CNNs, each filter is replicated across the entire visual field. These replicated units share the same parameterization (weight vector and bias) and form a feature map. This means that all the neurons in a given convolutional layer respond to the same feature within their specific response field. Replicating units in this way allows for the resulting activation map to be equivariant under shifts of the locations of input features in the visual field, i.e. they grant translational equivariance - given that the layer has a stride of one.
[72] Pooling: In a CNN's pooling layers, feature maps are divided into rectangular sub-regions, and the features in each rectangle are independently down-sampled to a single value, commonly by taking their average or maximum value. In addition to reducing the sizes of feature maps, the pooling operation grants a degree of local translational invariance to the features contained therein, allowing the CNN to be more robust to variations in their positions.
[14] Together, these properties allow CNNs to achieve better generalization on vision problems.
 Weight sharing dramatically reduces the number of free parameters learned, thus lowering the memory requirements for running the network and allowing the training of larger, more powerful networks.
Building blocks [ edit ] This section needs additional citations for verification.
Please help improve this article by adding citations to reliable sources in this section. Unsourced material may be challenged and removed.
( June 2017 ) ( Learn how and when to remove this template message ) A CNN architecture is formed by a stack of distinct layers that transform the input volume into an output volume (e.g. holding the class scores) through a differentiable function. A few distinct types of layers are commonly used. These are further discussed below.
Convolutional layer [ edit ] The convolutional layer is the core building block of a CNN. The layer's parameters consist of a set of learnable filters (or kernels ), which have a small receptive field, but extend through the full depth of the input volume. During the forward pass, each filter is convolved across the width and height of the input volume, computing the dot product between the filter entries and the input, producing a 2-dimensional activation map of that filter. As a result, the network learns filters that activate when it detects some specific type of feature at some spatial position in the input.
[73] [nb 1] Stacking the activation maps for all filters along the depth dimension forms the full output volume of the convolution layer. Every entry in the output volume can thus also be interpreted as an output of a neuron that looks at a small region in the input. Each entry in an activation map use the same set of parameters that define the filter.
Self-supervised learning has been adapted for use in convolutional layers by using sparse patches with a high-mask ratio and a global response normalization layer.
[74] Local connectivity [ edit ] When dealing with high-dimensional inputs such as images, it is impractical to connect neurons to all neurons in the previous volume because such a network architecture does not take the spatial structure of the data into account. Convolutional networks exploit spatially local correlation by enforcing a sparse local connectivity pattern between neurons of adjacent layers: each neuron is connected to only a small region of the input volume.
The extent of this connectivity is a hyperparameter called the receptive field of the neuron. The connections are local in space (along width and height), but always extend along the entire depth of the input volume. Such an architecture ensures that the learned ( British English : learnt ) filters produce the strongest response to a spatially local input pattern.
Spatial arrangement [ edit ] Three hyperparameters control the size of the output volume of the convolutional layer: the depth, stride , and padding size: The depth of the output volume controls the number of neurons in a layer that connect to the same region of the input volume. These neurons learn to activate for different features in the input. For example, if the first convolutional layer takes the raw image as input, then different neurons along the depth dimension may activate in the presence of various oriented edges, or blobs of color.
Stride controls how depth columns around the width and height are allocated. If the stride is 1, then we move the filters one pixel at a time. This leads to heavily overlapping receptive fields between the columns, and to large output volumes. For any integer S > 0 , {\textstyle S>0,} a stride S means that the filter is translated S units at a time per output. In practice, S ≥ 3 {\textstyle S\geq 3} is rare. A greater stride means smaller overlap of receptive fields and smaller spatial dimensions of the output volume.
[75] Sometimes, it is convenient to pad the input with zeros (or other values, such as the average of the region) on the border of the input volume. The size of this padding is a third hyperparameter. Padding provides control of the output volume's spatial size. In particular, sometimes it is desirable to exactly preserve the spatial size of the input volume, this is commonly referred to as "same" padding.
The spatial size of the output volume is a function of the input volume size W {\displaystyle W} , the kernel field size K {\displaystyle K} of the convolutional layer neurons, the stride S {\displaystyle S} , and the amount of zero padding P {\displaystyle P} on the border. The number of neurons that "fit" in a given volume is then: If this number is not an integer , then the strides are incorrect and the neurons cannot be tiled to fit across the input volume in a symmetric way. In general, setting zero padding to be P = ( K − 1 ) / 2 {\textstyle P=(K-1)/2} when the stride is S = 1 {\displaystyle S=1} ensures that the input volume and output volume will have the same size spatially. However, it is not always completely necessary to use all of the neurons of the previous layer. For example, a neural network designer may decide to use just a portion of padding.
Parameter sharing [ edit ] A parameter sharing scheme is used in convolutional layers to control the number of free parameters. It relies on the assumption that if a patch feature is useful to compute at some spatial position, then it should also be useful to compute at other positions. Denoting a single 2-dimensional slice of depth as a depth slice , the neurons in each depth slice are constrained to use the same weights and bias.
Since all neurons in a single depth slice share the same parameters, the forward pass in each depth slice of the convolutional layer can be computed as a convolution of the neuron's weights with the input volume.
[nb 2] Therefore, it is common to refer to the sets of weights as a filter (or a kernel ), which is convolved with the input. The result of this convolution is an activation map , and the set of activation maps for each different filter are stacked together along the depth dimension to produce the output volume. Parameter sharing contributes to the translation invariance of the CNN architecture.
[14] Sometimes, the parameter sharing assumption may not make sense. This is especially the case when the input images to a CNN have some specific centered structure; for which we expect completely different features to be learned on different spatial locations. One practical example is when the inputs are faces that have been centered in the image: we might expect different eye-specific or hair-specific features to be learned in different parts of the image. In that case it is common to relax the parameter sharing scheme, and instead simply call the layer a "locally connected layer".
Pooling layer [ edit ] Another important concept of CNNs is pooling, which is a form of non-linear down-sampling.
 There are several non-linear functions to implement pooling, where max pooling is the most common. It partitions the input image into a set of rectangles and, for each such sub-region, outputs the maximum.
Intuitively, the exact location of a feature is less important than its rough location relative to other features. This is the idea behind the use of pooling in convolutional neural networks. The pooling layer serves to progressively reduce the spatial size of the representation, to reduce the number of parameters, memory footprint and amount of computation in the network, and hence to also control overfitting.
 This is known as down-sampling. It is common to periodically insert a pooling layer between successive convolutional layers (each one typically followed by an activation function, such as a ReLU layer ) in a CNN architecture.
[73] : 460–461 While pooling layers contribute to local translation invariance, they do not provide global translation invariance in a CNN, unless a form of global pooling is used.
[14] [72] The pooling layer commonly operates independently on every depth, or slice, of the input and resizes it spatially. A very common form of max pooling is a layer with filters of size 2×2, applied with a stride of 2, which subsamples every depth slice in the input by 2 along both width and height, discarding 75% of the activations: In addition to max pooling, pooling units can use other functions, such as average pooling or ℓ 2 -norm pooling. Average pooling was often used historically but has recently fallen out of favor compared to max pooling, which generally performs better in practice.
[76] Due to the effects of fast spatial reduction of the size of the representation, [ which? ] there is a recent trend towards using smaller filters [77] or discarding pooling layers altogether.
[78] " Region of Interest " pooling (also known as RoI pooling) is a variant of max pooling, in which output size is fixed and input rectangle is a parameter.
[79] Pooling is a downsampling method and an important component of convolutional neural networks for object detection based on the Fast R-CNN [80] architecture.
Channel Max Pooling [ edit ] A CMP operation layer conducts the MP operation along the channel side among the corresponding positions of the consecutive feature maps for the purpose of redundant information elimination. The CMP makes the significant features gather together within fewer channels, which is important for fine-grained image classification that needs more discriminating features. Meanwhile, another advantage of the CMP operation is to make the channel number of feature maps smaller before it connects to the first fully connected (FC) layer. Similar to the MP operation, we denote the input feature maps and output feature maps of a CMP layer as F ∈ R(C×M×N) and C ∈ R(c×M×N), respectively, where C and c are the channel numbers of the input and output feature maps, M and N are the widths and the height of the feature maps, respectively. Note that the CMP operation only changes the channel number of the feature maps. The width and the height of the feature maps are not changed, which is different from the MP operation.
[81] ReLU layer [ edit ] ReLU is the abbreviation of rectified linear unit introduced by Kunihiko Fukushima in 1969.
[35] [36] ReLU applies the non-saturating activation function f ( x ) = max ( 0 , x ) {\textstyle f(x)=\max(0,x)}.
[67] It effectively removes negative values from an activation map by setting them to zero.
[82] It introduces nonlinearity to the decision function and in the overall network without affecting the receptive fields of the convolution layers. In 2011, Xavier Glorot, Antoine Bordes and Yoshua Bengio found that ReLU enables better training of deeper networks, [83] compared to widely used activation functions prior to 2011.
Other functions can also be used to increase nonlinearity, for example the saturating hyperbolic tangent f ( x ) = tanh ⁡ ( x ) {\displaystyle f(x)=\tanh(x)} , f ( x ) = | tanh ⁡ ( x ) | {\displaystyle f(x)=|\tanh(x)|} , and the sigmoid function σ ( x ) = ( 1 + e − x ) − 1 {\textstyle \sigma (x)=(1+e^{-x})^{-1}}.
 ReLU is often preferred to other functions because it trains the neural network several times faster without a significant penalty to generalization accuracy.
[84] Fully connected layer [ edit ] After several convolutional and max pooling layers, the final classification is done via fully connected layers. Neurons in a fully connected layer have connections to all activations in the previous layer, as seen in regular (non-convolutional) artificial neural networks.
 Their activations can thus be computed as an affine transformation , with matrix multiplication followed by a bias offset ( vector addition of a learned or fixed bias term).
Loss layer [ edit ] The "loss layer", or " loss function ", specifies how training penalizes the deviation between the predicted output of the network, and the true data labels (during supervised learning). Various loss functions can be used, depending on the specific task.
The Softmax loss function is used for predicting a single class of K mutually exclusive classes.
[nb 3] Sigmoid cross-entropy loss is used for predicting K independent probability values in [ 0 , 1 ] {\displaystyle [0,1]}.
Euclidean loss is used for regressing to real-valued labels ( − ∞ , ∞ ) {\displaystyle (-\infty ,\infty )}.
Hyperparameters [ edit ] This section needs additional citations for verification.
Please help improve this article by adding citations to reliable sources in this section. Unsourced material may be challenged and removed.
( June 2017 ) ( Learn how and when to remove this template message ) Hyperparameters are various settings that are used to control the learning process. CNNs use more hyperparameters than a standard multilayer perceptron (MLP).
Kernel size [ edit ] The kernel is the number of pixels processed together. It is typically expressed as the kernel's dimensions, e.g., 2x2, or 3x3.
Padding [ edit ] Padding is the addition of (typically) 0-valued pixels on the borders of an image. This is done so that the border pixels are not undervalued (lost) from the output because they would ordinarily participate in only a single receptive field instance. The padding applied is typically one less than the corresponding kernel dimension. For example, a convolutional layer using 3x3 kernels would receive a 2-pixel pad, that is 1 pixel on each side of the image.
[85] Stride [ edit ] The stride is the number of pixels that the analysis window moves on each iteration. A stride of 2 means that each kernel is offset by 2 pixels from its predecessor.
Number of filters [ edit ] Since feature map size decreases with depth, layers near the input layer tend to have fewer filters while higher layers can have more. To equalize computation at each layer, the product of feature values v a with pixel position is kept roughly constant across layers. Preserving more information about the input would require keeping the total number of activations (number of feature maps times number of pixel positions) non-decreasing from one layer to the next.
The number of feature maps directly controls the capacity and depends on the number of available examples and task complexity.
Filter size [ edit ] Common filter sizes found in the literature vary greatly, and are usually chosen based on the data set.
The challenge is to find the right level of granularity so as to create abstractions at the proper scale, given a particular data set, and without overfitting.
Pooling type and size [ edit ] Max pooling is typically used, often with a 2x2 dimension. This implies that the input is drastically downsampled , reducing processing cost.
Large input volumes may warrant 4×4 pooling in the lower layers.
[86] Greater pooling reduces the dimension of the signal, and may result in unacceptable information loss.
 Often, non-overlapping pooling windows perform best.
[76] Dilation [ edit ] Dilation involves ignoring pixels within a kernel. This reduces processing/memory potentially without significant signal loss. A dilation of 2 on a 3x3 kernel expands the kernel to 5x5, while still processing 9 (evenly spaced) pixels. Accordingly, dilation of 4 expands the kernel to 9x9 [87].
[88] Translation equivariance and aliasing [ edit ] It is commonly assumed that CNNs are invariant to shifts of the input. Convolution or pooling layers within a CNN that do not have a stride greater than one are indeed equivariant to translations of the input.
[72] However, layers with a stride greater than one ignore the Nyquist-Shannon sampling theorem and might lead to aliasing of the input signal [72] While, in principle, CNNs are capable of implementing anti-aliasing filters, it has been observed that this does not happen in practice [89] and yield models that are not equivariant to translations. Furthermore, if a CNN makes use of fully connected layers, translation equivariance does not imply translation invariance, as the fully connected layers are not invariant to shifts of the input.
[90] [14] One solution for complete translation invariance is avoiding any down-sampling throughout the network and applying global average pooling at the last layer.
[72] Additionally, several other partial solutions have been proposed, such as anti-aliasing before downsampling operations, [91] spatial transformer networks, [92] data augmentation , subsampling combined with pooling, [14] and capsule neural networks.
[93] Evaluation [ edit ] The accuracy of the final model is based on a sub-part of the dataset set apart at the start, often called a test-set. Other times methods such as k -fold cross-validation are applied. Other strategies include using conformal prediction.
[94] [95] Regularization methods [ edit ] This section needs additional citations for verification.
Please help improve this article by adding citations to reliable sources in this section. Unsourced material may be challenged and removed.
( June 2017 ) ( Learn how and when to remove this template message ) Regularization is a process of introducing additional information to solve an ill-posed problem or to prevent overfitting.
 CNNs use various types of regularization.
Empirical [ edit ] Dropout [ edit ] Because a fully connected layer occupies most of the parameters, it is prone to overfitting. One method to reduce overfitting is dropout , introduced in 2014.
[96] [97] At each training stage, individual nodes are either "dropped out" of the net (ignored) with probability 1 − p {\displaystyle 1-p} or kept with probability p {\displaystyle p} , so that a reduced network is left; incoming and outgoing edges to a dropped-out node are also removed. Only the reduced network is trained on the data in that stage. The removed nodes are then reinserted into the network with their original weights.
In the training stages, p {\displaystyle p} is usually 0.5; for input nodes, it is typically much higher because information is directly lost when input nodes are ignored.
At testing time after training has finished, we would ideally like to find a sample average of all possible 2 n {\displaystyle 2^{n}} dropped-out networks; unfortunately this is unfeasible for large values of n {\displaystyle n}.
 However, we can find an approximation by using the full network with each node's output weighted by a factor of p {\displaystyle p} , so the expected value of the output of any node is the same as in the training stages. This is the biggest contribution of the dropout method: although it effectively generates 2 n {\displaystyle 2^{n}} neural nets, and as such allows for model combination, at test time only a single network needs to be tested.
By avoiding training all nodes on all training data, dropout decreases overfitting. The method also significantly improves training speed. This makes the model combination practical, even for deep neural networks.
 The technique seems to reduce node interactions, leading them to learn more robust features [ clarification needed ] that better generalize to new data.
DropConnect [ edit ] DropConnect is the generalization of dropout in which each connection, rather than each output unit, can be dropped with probability 1 − p {\displaystyle 1-p}.
 Each unit thus receives input from a random subset of units in the previous layer.
[98] DropConnect is similar to dropout as it introduces dynamic sparsity within the model, but differs in that the sparsity is on the weights, rather than the output vectors of a layer. In other words, the fully connected layer with DropConnect becomes a sparsely connected layer in which the connections are chosen at random during the training stage.
Stochastic pooling [ edit ] A major drawback to Dropout is that it does not have the same benefits for convolutional layers, where the neurons are not fully connected.
Even before Dropout, in 2013 a technique called stochastic pooling, [99] the conventional deterministic pooling operations were replaced with a stochastic procedure, where the activation within each pooling region is picked randomly according to a multinomial distribution , given by the activities within the pooling region. This approach is free of hyperparameters and can be combined with other regularization approaches, such as dropout and data augmentation.
An alternate view of stochastic pooling is that it is equivalent to standard max pooling but with many copies of an input image, each having small local deformations.
 This is similar to explicit elastic deformations of the input images, [100] which delivers excellent performance on the MNIST data set.
[100] Using stochastic pooling in a multilayer model gives an exponential number of deformations since the selections in higher layers are independent of those below.
Artificial data [ edit ] Because the degree of model overfitting is determined by both its power and the amount of training it receives, providing a convolutional network with more training examples can reduce overfitting. Because there is often not enough available data to train, especially considering that some part should be spared for later testing, two approaches are to either generate new data from scratch (if possible) or perturb existing data to create new ones. The latter one is used since mid-1990s.
[51] For example, input images can be cropped, rotated, or rescaled to create new examples with the same labels as the original training set.
[101] Explicit [ edit ] Early stopping [ edit ] One of the simplest methods to prevent overfitting of a network is to simply stop the training before overfitting has had a chance to occur. It comes with the disadvantage that the learning process is halted.
Number of parameters [ edit ] Another simple way to prevent overfitting is to limit the number of parameters, typically by limiting the number of hidden units in each layer or limiting network depth. For convolutional networks, the filter size also affects the number of parameters. Limiting the number of parameters restricts the predictive power of the network directly, reducing the complexity of the function that it can perform on the data, and thus limits the amount of overfitting. This is equivalent to a " zero norm ".
Weight decay [ edit ] A simple form of added regularizer is weight decay, which simply adds an additional error, proportional to the sum of weights ( L1 norm ) or squared magnitude ( L2 norm ) of the weight vector, to the error at each node. The level of acceptable model complexity can be reduced by increasing the proportionality constant('alpha' hyperparameter), thus increasing the penalty for large weight vectors.
L2 regularization is the most common form of regularization. It can be implemented by penalizing the squared magnitude of all parameters directly in the objective. The L2 regularization has the intuitive interpretation of heavily penalizing peaky weight vectors and preferring diffuse weight vectors. Due to multiplicative interactions between weights and inputs this has the useful property of encouraging the network to use all of its inputs a little rather than some of its inputs a lot.
L1 regularization is also common. It makes the weight vectors sparse during optimization. In other words, neurons with L1 regularization end up using only a sparse subset of their most important inputs and become nearly invariant to the noisy inputs. L1 with L2 regularization can be combined; this is called elastic net regularization.
Max norm constraints [ edit ] Another form of regularization is to enforce an absolute upper bound on the magnitude of the weight vector for every neuron and use projected gradient descent to enforce the constraint. In practice, this corresponds to performing the parameter update as normal, and then enforcing the constraint by clamping the weight vector w → {\displaystyle {\vec {w}}} of every neuron to satisfy ‖ w → ‖ 2 < c {\displaystyle \|{\vec {w}}\|_{2}<c}.
 Typical values of c {\displaystyle c} are order of 3–4. Some papers report improvements [102] when using this form of regularization.
Hierarchical coordinate frames [ edit ] Pooling loses the precise spatial relationships between high-level parts (such as nose and mouth in a face image). These relationships are needed for identity recognition. Overlapping the pools so that each feature occurs in multiple pools, helps retain the information. Translation alone cannot extrapolate the understanding of geometric relationships to a radically new viewpoint, such as a different orientation or scale. On the other hand, people are very good at extrapolating; after seeing a new shape once they can recognize it from a different viewpoint.
[103] An earlier common way to deal with this problem is to train the network on transformed data in different orientations, scales, lighting, etc. so that the network can cope with these variations. This is computationally intensive for large data-sets. The alternative is to use a hierarchy of coordinate frames and use a group of neurons to represent a conjunction of the shape of the feature and its pose relative to the retina.
 The pose relative to the retina is the relationship between the coordinate frame of the retina and the intrinsic features' coordinate frame.
[104] Thus, one way to represent something is to embed the coordinate frame within it. This allows large features to be recognized by using the consistency of the poses of their parts (e.g. nose and mouth poses make a consistent prediction of the pose of the whole face). This approach ensures that the higher-level entity (e.g. face) is present when the lower-level (e.g. nose and mouth) agree on its prediction of the pose. The vectors of neuronal activity that represent pose ("pose vectors") allow spatial transformations modeled as linear operations that make it easier for the network to learn the hierarchy of visual entities and generalize across viewpoints. This is similar to the way the human visual system imposes coordinate frames in order to represent shapes.
[105] Applications [ edit ] Image recognition [ edit ] CNNs are often used in image recognition systems. In 2012, an error rate of 0.23% on the MNIST database was reported.
[25] Another paper on using CNN for image classification reported that the learning process was "surprisingly fast"; in the same paper, the best published results as of 2011 were achieved in the MNIST database and the NORB database.
[22] Subsequently, a similar CNN called AlexNet [106] won the ImageNet Large Scale Visual Recognition Challenge 2012.
When applied to facial recognition , CNNs achieved a large decrease in error rate.
[107] Another paper reported a 97.6% recognition rate on "5,600 still images of more than 10 subjects".
[19] CNNs were used to assess video quality in an objective way after manual training; the resulting system had a very low root mean square error.
[45] The ImageNet Large Scale Visual Recognition Challenge is a benchmark in object classification and detection, with millions of images and hundreds of object classes. In the ILSVRC 2014, [108] a large-scale visual recognition challenge, almost every highly ranked team used CNN as their basic framework. The winner GoogLeNet [109] (the foundation of DeepDream ) increased the mean average precision of object detection to 0.439329, and reduced classification error to 0.06656, the best result to date. Its network applied more than 30 layers. That performance of convolutional neural networks on the ImageNet tests was close to that of humans.
[110] The best algorithms still struggle with objects that are small or thin, such as a small ant on a stem of a flower or a person holding a quill in their hand. They also have trouble with images that have been distorted with filters, an increasingly common phenomenon with modern digital cameras. By contrast, those kinds of images rarely trouble humans. Humans, however, tend to have trouble with other issues. For example, they are not good at classifying objects into fine-grained categories such as the particular breed of dog or species of bird, whereas convolutional neural networks handle this.
[ citation needed ] In 2015, a many-layered CNN demonstrated the ability to spot faces from a wide range of angles, including upside down, even when partially occluded, with competitive performance. The network was trained on a database of 200,000 images that included faces at various angles and orientations and a further 20 million images without faces. They used batches of 128 images over 50,000 iterations.
[111] Video analysis [ edit ] Compared to image data domains, there is relatively little work on applying CNNs to video classification. Video is more complex than images since it has another (temporal) dimension. However, some extensions of CNNs into the video domain have been explored. One approach is to treat space and time as equivalent dimensions of the input and perform convolutions in both time and space.
[112] [113] Another way is to fuse the features of two convolutional neural networks, one for the spatial and one for the temporal stream.
[114] [115] [116] Long short-term memory (LSTM) recurrent units are typically incorporated after the CNN to account for inter-frame or inter-clip dependencies.
[117] [118] Unsupervised learning schemes for training spatio-temporal features have been introduced, based on Convolutional Gated Restricted Boltzmann Machines [119] and Independent Subspace Analysis.
[120] It's Application can be seen in Text-to-Video model.
[121] Natural language processing [ edit ] CNNs have also been explored for natural language processing.
 CNN models are effective for various NLP problems and achieved excellent results in semantic parsing , [122] search query retrieval, [123] sentence modeling, [124] classification, [125] prediction [126] and other traditional NLP tasks.
[127] Compared to traditional language processing methods such as recurrent neural networks , CNNs can represent different contextual realities of language that do not rely on a series-sequence assumption, while RNNs are better suitable when classical time series modeling is required.
[128] [129] [130] [131] Anomaly Detection [ edit ] A CNN with 1-D convolutions was used on time series in the frequency domain (spectral residual) by an unsupervised model to detect anomalies in the time domain.
[132] Drug discovery [ edit ] CNNs have been used in drug discovery.
 Predicting the interaction between molecules and biological proteins can identify potential treatments. In 2015, Atomwise introduced AtomNet, the first deep learning neural network for structure-based drug design.
[133] The system trains directly on 3-dimensional representations of chemical interactions. Similar to how image recognition networks learn to compose smaller, spatially proximate features into larger, complex structures, [134] AtomNet discovers chemical features, such as aromaticity , sp 3 carbons , and hydrogen bonding.
 Subsequently, AtomNet was used to predict novel candidate biomolecules for multiple disease targets, most notably treatments for the Ebola virus [135] and multiple sclerosis.
[136] Checkers game [ edit ] CNNs have been used in the game of checkers.
 From 1999 to 2001, Fogel and Chellapilla published papers showing how a convolutional neural network could learn to play checker using co-evolution. The learning process did not use prior human professional games, but rather focused on a minimal set of information contained in the checkerboard: the location and type of pieces, and the difference in number of pieces between the two sides. Ultimately, the program ( Blondie24 ) was tested on 165 games against players and ranked in the highest 0.4%.
[137] [138] It also earned a win against the program Chinook at its "expert" level of play.
[139] Go [ edit ] CNNs have been used in computer Go.
 In December 2014, Clark and Storkey published a paper showing that a CNN trained by supervised learning from a database of human professional games could outperform GNU Go and win some games against Monte Carlo tree search Fuego 1.1 in a fraction of the time it took Fuego to play.
[140] Later it was announced that a large 12-layer convolutional neural network had correctly predicted the professional move in 55% of positions, equalling the accuracy of a 6 dan human player. When the trained convolutional network was used directly to play games of Go, without any search, it beat the traditional search program GNU Go in 97% of games, and matched the performance of the Monte Carlo tree search program Fuego simulating ten thousand playouts (about a million positions) per move.
[141] A couple of CNNs for choosing moves to try ("policy network") and evaluating positions ("value network") driving MCTS were used by AlphaGo , the first to beat the best human player at the time.
[142] Time series forecasting [ edit ] Recurrent neural networks are generally considered the best neural network architectures for time series forecasting (and sequence modeling in general), but recent studies show that convolutional networks can perform comparably or even better.
[143] [11] Dilated convolutions [144] might enable one-dimensional convolutional neural networks to effectively learn time series dependences.
[145] Convolutions can be implemented more efficiently than RNN-based solutions, and they do not suffer from vanishing (or exploding) gradients.
[146] Convolutional networks can provide an improved forecasting performance when there are multiple similar time series to learn from.
[147] CNNs can also be applied to further tasks in time series analysis (e.g., time series classification [148] or quantile forecasting [149] ).
Cultural Heritage and 3D-datasets [ edit ] As archaeological findings like clay tablets with cuneiform writing are increasingly acquired using 3D scanners first benchmark datasets are becoming available like HeiCuBeDa [150] providing almost 2.000 normalized 2D- and 3D-datasets prepared with the GigaMesh Software Framework.
[151] So curvature -based measures are used in conjunction with Geometric Neural Networks (GNNs) e.g. for period classification of those clay tablets being among the oldest documents of human history.
[152] [153] Fine-tuning [ edit ] For many applications, the training data is less available. Convolutional neural networks usually require a large amount of training data in order to avoid overfitting.
 A common technique is to train the network on a larger data set from a related domain. Once the network parameters have converged an additional training step is performed using the in-domain data to fine-tune the network weights, this is known as transfer learning.
 Furthermore, this technique allows convolutional network architectures to successfully be applied to problems with tiny training sets.
[154] Human interpretable explanations [ edit ] End-to-end training and prediction are common practice in computer vision.
 However, human interpretable explanations are required for critical systems such as a self-driving cars.
[155] With recent advances in visual salience , spatial attention , and temporal attention , the most critical spatial regions/temporal instants could be visualized to justify the CNN predictions.
[156] [157] Related architectures [ edit ] Deep Q-networks [ edit ] A deep Q-network (DQN) is a type of deep learning model that combines a deep neural network with Q-learning , a form of reinforcement learning.
 Unlike earlier reinforcement learning agents, DQNs that utilize CNNs can learn directly from high-dimensional sensory inputs via reinforcement learning.
[158] Preliminary results were presented in 2014, with an accompanying paper in February 2015.
[159] The research described an application to Atari 2600 gaming. Other deep reinforcement learning models preceded it.
[160] Deep belief networks [ edit ] Convolutional deep belief networks (CDBN) have structure very similar to convolutional neural networks and are trained similarly to deep belief networks. Therefore, they exploit the 2D structure of images, like CNNs do, and make use of pre-training like deep belief networks.
 They provide a generic structure that can be used in many image and signal processing tasks. Benchmark results on standard image datasets like CIFAR [161] have been obtained using CDBNs.
[162] Notable libraries [ edit ] Caffe : A library for convolutional neural networks. Created by the Berkeley Vision and Learning Center (BVLC). It supports both CPU and GPU. Developed in C++ , and has Python and MATLAB wrappers.
Deeplearning4j : Deep learning in Java and Scala on multi-GPU-enabled Spark.
 A general-purpose deep learning library for the JVM production stack running on a C++ scientific computing engine. Allows the creation of custom layers. Integrates with Hadoop and Kafka.
Dlib : A toolkit for making real world machine learning and data analysis applications in C++.
Microsoft Cognitive Toolkit : A deep learning toolkit written by Microsoft with several unique features enhancing scalability over multiple nodes. It supports full-fledged interfaces for training in C++ and Python and with additional support for model inference in C# and Java.
TensorFlow : Apache 2.0 -licensed Theano-like library with support for CPU, GPU, Google's proprietary tensor processing unit (TPU), [163] and mobile devices.
Theano : The reference deep-learning library for Python with an API largely compatible with the popular NumPy library. Allows user to write symbolic mathematical expressions, then automatically generates their derivatives, saving the user from having to code gradients or backpropagation. These symbolic expressions are automatically compiled to CUDA code for a fast, on-the-GPU implementation.
Torch : A scientific computing framework with wide support for machine learning algorithms, written in C and Lua.
See also [ edit ] Attention (machine learning) Convolution Deep learning Natural-language processing Neocognitron Scale-invariant feature transform Time delay neural network Vision processing unit Notes [ edit ] ^ When applied to other types of data than image data, such as sound data, "spatial position" may variously correspond to different points in the time domain , frequency domain , or other mathematical spaces.
^ hence the name "convolutional layer" ^ So-called categorical data.
References [ edit ] ^ a b.
mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit} Venkatesan, Ragav; Li, Baoxin (2017-10-23).
Convolutional Neural Networks in Visual Computing: A Concise Guide.
 CRC Press.
ISBN 978-1-351-65032-8.
Archived from the original on 2023-10-16.
 Retrieved 2020-12-13.
^ a b Balas, Valentina E.; Kumar, Raghvendra; Srivastava, Rajshree (2019-11-19).
Recent Trends and Advances in Artificial Intelligence and Internet of Things.
 Springer Nature.
ISBN 978-3-030-32644-9.
Archived from the original on 2023-10-16.
 Retrieved 2020-12-13.
^ Zhang, Yingjie; Soon, Hong Geok; Ye, Dongsen; Fuh, Jerry Ying Hsi; Zhu, Kunpeng (September 2020).
"Powder-Bed Fusion Process Monitoring by Machine Vision With Hybrid Convolutional Neural Networks".
IEEE Transactions on Industrial Informatics.
16 (9): 5769–5779.
doi : 10.1109/TII.2019.2956078.
ISSN 1941-0050.
S2CID 213010088.
Archived from the original on 2023-07-31.
 Retrieved 2023-08-12.
^ Chervyakov, N.I.; Lyakhov, P.A.; Deryabin, M.A.; Nagornov, N.N.; Valueva, M.V.; Valuev, G.V. (September 2020).
"Residue Number System-Based Solution for Reducing the Hardware Cost of a Convolutional Neural Network".
Neurocomputing.
407 : 439–453.
doi : 10.1016/j.neucom.2020.04.018.
S2CID 219470398.
Archived from the original on 2023-06-29.
 Retrieved 2023-08-12.
Convolutional neural networks represent deep learning architectures that are currently used in a wide range of applications, including computer vision, speech recognition, time series analysis in finance, and many others.
^ a b Habibi, Aghdam, Hamed (2017-05-30).
Guide to convolutional neural networks : a practical application to traffic-sign detection and classification.
 Heravi, Elnaz Jahani. Cham, Switzerland.
ISBN 9783319575490.
OCLC 987790957.
{{ cite book }} : CS1 maint: location missing publisher ( link ) CS1 maint: multiple names: authors list ( link ) ^ Atlas, Homma, and Marks.
"An Artificial Neural Network for Spatio-Temporal Bipolar Patterns: Application to Phoneme Classification" (PDF).
Neural Information Processing Systems (NIPS 1987).
1.
Archived (PDF) from the original on 2021-04-14.
{{ cite journal }} : CS1 maint: multiple names: authors list ( link ) ^ Valueva, M.V.; Nagornov, N.N.; Lyakhov, P.A.; Valuev, G.V.; Chervyakov, N.I. (2020). "Application of the residue number system to reduce hardware costs of the convolutional neural network implementation".
Mathematics and Computers in Simulation.
 Elsevier BV.
177 : 232–243.
doi : 10.1016/j.matcom.2020.04.031.
ISSN 0378-4754.
S2CID 218955622.
Convolutional neural networks are a promising tool for solving the problem of pattern recognition.
^ van den Oord, Aaron; Dieleman, Sander; Schrauwen, Benjamin (2013-01-01). Burges, C. J. C.; Bottou, L.; Welling, M.; Ghahramani, Z.; Weinberger, K. Q. (eds.).
Deep content-based music recommendation (PDF).
 Curran Associates, Inc. pp. 2643–2651.
Archived (PDF) from the original on 2022-03-07.
 Retrieved 2022-03-31.
^ Collobert, Ronan; Weston, Jason (2008-01-01). "A unified architecture for natural language processing".
Proceedings of the 25th international conference on Machine learning - ICML '08.
 New York, NY, USA: ACM. pp. 160–167.
doi : 10.1145/1390156.1390177.
ISBN 978-1-60558-205-4.
S2CID 2617020.
^ Avilov, Oleksii; Rimbert, Sebastien; Popov, Anton; Bougrain, Laurent (July 2020).
"Deep Learning Techniques to Improve Intraoperative Awareness Detection from Electroencephalographic Signals".
2020 42nd Annual International Conference of the IEEE Engineering in Medicine & Biology Society (EMBC) (PDF).
 Vol. 2020. Montreal, QC, Canada: IEEE. pp. 142–145.
doi : 10.1109/EMBC44109.2020.9176228.
ISBN 978-1-7281-1990-8.
PMID 33017950.
S2CID 221386616.
Archived (PDF) from the original on 2022-05-19.
 Retrieved 2023-07-21.
^ a b Tsantekidis, Avraam; Passalis, Nikolaos; Tefas, Anastasios; Kanniainen, Juho; Gabbouj, Moncef; Iosifidis, Alexandros (July 2017). "Forecasting Stock Prices from the Limit Order Book Using Convolutional Neural Networks".
2017 IEEE 19th Conference on Business Informatics (CBI).
 Thessaloniki, Greece: IEEE. pp. 7–12.
doi : 10.1109/CBI.2017.23.
ISBN 978-1-5386-3035-8.
S2CID 4950757.
^ a b c Zhang, Wei (1988).
"Shift-invariant pattern recognition neural network and its optical architecture".
Proceedings of Annual Conference of the Japan Society of Applied Physics.
Archived from the original on 2020-06-23.
 Retrieved 2020-06-22.
^ a b c Zhang, Wei (1990).
"Parallel distributed processing model with local space-invariant interconnections and its optical architecture".
Applied Optics.
29 (32): 4790–7.
Bibcode : 1990ApOpt..29.4790Z.
doi : 10.1364/AO.29.004790.
PMID 20577468.
Archived from the original on 2017-02-06.
 Retrieved 2016-09-22.
^ a b c d e f Mouton, Coenraad; Myburgh, Johannes C.; Davel, Marelie H. (2020).
"Stride and Translation Invariance in CNNS".
 In Gerber, Aurona (ed.).
Artificial Intelligence Research.
 Communications in Computer and Information Science. Vol. 1342. Cham: Springer International Publishing. pp. 267–281.
arXiv : 2103.10097.
doi : 10.1007/978-3-030-66151-9_17.
ISBN 978-3-030-66151-9.
S2CID 232269854.
Archived from the original on 2021-06-27.
 Retrieved 2021-03-26.
^ Kurtzman, Thomas (August 20, 2019).
"Hidden bias in the DUD-E dataset leads to misleading performance of deep learning in structure-based virtual screening".
PLOS ONE.
14 (8): e0220113.
Bibcode : 2019PLoSO..1420113C.
doi : 10.1371/journal.pone.0220113.
PMC 6701836.
PMID 31430292.
^ a b c Fukushima, K. (2007).
"Neocognitron".
Scholarpedia.
2 (1): 1717.
Bibcode : 2007SchpJ...2.1717F.
doi : 10.4249/scholarpedia.1717.
^ a b Hubel, D. H.; Wiesel, T. N. (1968-03-01).
"Receptive fields and functional architecture of monkey striate cortex".
The Journal of Physiology.
195 (1): 215–243.
doi : 10.1113/jphysiol.1968.sp008455.
ISSN 0022-3751.
PMC 1557912.
PMID 4966457.
^ a b Fukushima, Kunihiko (1980).
"Neocognitron: A Self-organizing Neural Network Model for a Mechanism of Pattern Recognition Unaffected by Shift in Position" (PDF).
Biological Cybernetics.
36 (4): 193–202.
doi : 10.1007/BF00344251.
PMID 7370364.
S2CID 206775608.
Archived (PDF) from the original on 3 June 2014.
 Retrieved 16 November 2013.
^ a b Matusugu, Masakazu; Katsuhiko Mori; Yusuke Mitari; Yuji Kaneda (2003).
"Subject independent facial expression recognition with robust face detection using a convolutional neural network" (PDF).
Neural Networks.
16 (5): 555–559.
doi : 10.1016/S0893-6080(03)00115-1.
PMID 12850007.
Archived (PDF) from the original on 13 December 2013.
 Retrieved 17 November 2013.
^ "Convolutional Neural Networks (LeNet) – DeepLearning 0.1 documentation".
DeepLearning 0.1.
 LISA Lab. Archived from the original on 28 December 2017.
 Retrieved 31 August 2013.
^ Chollet, François (2017-04-04). "Xception: Deep Learning with Depthwise Separable Convolutions".
arXiv : 1610.02357 [ cs.CV ].
^ a b c Ciresan, Dan; Ueli Meier; Jonathan Masci; Luca M. Gambardella; Jurgen Schmidhuber (2011).
"Flexible, High Performance Convolutional Neural Networks for Image Classification" (PDF).
Proceedings of the Twenty-Second International Joint Conference on Artificial Intelligence-Volume Volume Two.
2 : 1237–1242.
Archived (PDF) from the original on 5 April 2022.
 Retrieved 17 November 2013.
^ Krizhevsky , Alex.
"ImageNet Classification with Deep Convolutional Neural Networks" (PDF).
Archived (PDF) from the original on 25 April 2021.
 Retrieved 17 November 2013.
^ a b Yamaguchi, Kouichi; Sakamoto, Kenji; Akabane, Toshio; Fujimoto, Yoshiji (November 1990).
A Neural Network for Speaker-Independent Isolated Word Recognition.
 First International Conference on Spoken Language Processing (ICSLP 90). Kobe, Japan. Archived from the original on 2021-03-07.
 Retrieved 2019-09-04.
^ a b c d Ciresan, Dan; Meier, Ueli; Schmidhuber, Jürgen (June 2012). "Multi-column deep neural networks for image classification".
2012 IEEE Conference on Computer Vision and Pattern Recognition.
 New York, NY: Institute of Electrical and Electronics Engineers (IEEE). pp. 3642–3649.
arXiv : 1202.2745.
CiteSeerX 10.1.1.300.3283.
doi : 10.1109/CVPR.2012.6248110.
ISBN 978-1-4673-1226-4.
OCLC 812295155.
S2CID 2161592.
^ Yu, Fisher; Koltun, Vladlen (2016-04-30). "Multi-Scale Context Aggregation by Dilated Convolutions".
arXiv : 1511.07122 [ cs.CV ].
^ Chen, Liang-Chieh; Papandreou, George; Schroff, Florian; Adam, Hartwig (2017-12-05). "Rethinking Atrous Convolution for Semantic Image Segmentation".
arXiv : 1706.05587 [ cs.CV ].
^ Duta, Ionut Cosmin; Georgescu, Mariana Iuliana; Ionescu, Radu Tudor (2021-08-16). "Contextual Convolutional Neural Networks".
arXiv : 2108.07387 [ cs.CV ].
^ LeCun, Yann.
"LeNet-5, convolutional neural networks".
Archived from the original on 24 February 2021.
 Retrieved 16 November 2013.
^ a b c Mahapattanakul, Puttatida (November 11, 2019).
"From Human Vision to Computer Vision — Convolutional Neural Network(Part3/4)".
Medium.
Archived from the original on May 25, 2021.
 Retrieved May 25, 2021.
^ van Dyck, Leonard Elia; Kwitt, Roland; Denzler, Sebastian Jochen; Gruber, Walter Roland (2021).
"Comparing Object Recognition in Humans and Deep Convolutional Neural Networks—An Eye Tracking Study".
Frontiers in Neuroscience.
15 : 750639.
doi : 10.3389/fnins.2021.750639.
ISSN 1662-453X.
PMC 8526843.
PMID 34690686.
^ a b Hubel, DH; Wiesel, TN (October 1959).
"Receptive fields of single neurones in the cat's striate cortex".
J. Physiol.
148 (3): 574–91.
doi : 10.1113/jphysiol.1959.sp006308.
PMC 1363130.
PMID 14403679.
^ David H. Hubel and Torsten N. Wiesel (2005).
Brain and visual perception: the story of a 25-year collaboration.
 Oxford University Press US. p. 106.
ISBN 978-0-19-517618-6.
Archived from the original on 2023-10-16.
 Retrieved 2019-01-18.
^ LeCun, Yann; Bengio, Yoshua; Hinton, Geoffrey (2015). "Deep learning".
Nature.
521 (7553): 436–444.
Bibcode : 2015Natur.521..436L.
doi : 10.1038/nature14539.
PMID 26017442.
S2CID 3074096.
^ a b Fukushima, K. (1969). "Visual feature extraction by a multilayered network of analog threshold elements".
IEEE Transactions on Systems Science and Cybernetics.
5 (4): 322–333.
doi : 10.1109/TSSC.1969.300225.
^ a b Schmidhuber, Juergen (2022). "Annotated History of Modern AI and Deep Learning".
arXiv : 2212.11279 [ cs.NE ].
^ Ramachandran, Prajit; Barret, Zoph; Quoc, V. Le (October 16, 2017). "Searching for Activation Functions".
arXiv : 1710.05941 [ cs.NE ].
^ Weng, J; Ahuja, N; Huang, TS (1993). "Learning recognition and segmentation of 3-D objects from 2-D images".
1993 (4th) International Conference on Computer Vision.
 pp. 121–128.
doi : 10.1109/ICCV.1993.378228.
ISBN 0-8186-3870-2.
S2CID 8619176.
{{ cite book }} : |journal= ignored ( help ) ^ a b c Schmidhuber, Jürgen (2015).
"Deep Learning".
Scholarpedia.
10 (11): 1527–54.
CiteSeerX 10.1.1.76.1541.
doi : 10.1162/neco.2006.18.7.1527.
PMID 16764513.
S2CID 2309950.
Archived from the original on 2016-04-19.
 Retrieved 2019-01-20.
^ Homma, Toshiteru; Les Atlas; Robert Marks II (1988).
"An Artificial Neural Network for Spatio-Temporal Bipolar Patters: Application to Phoneme Classification" (PDF).
Advances in Neural Information Processing Systems.
1 : 31–40.
Archived (PDF) from the original on 2022-03-31.
 Retrieved 2022-03-31.
^ a b Waibel, Alex (December 1987).
Phoneme Recognition Using Time-Delay Neural Networks.
 Meeting of the Institute of Electrical, Information and Communication Engineers (IEICE). Tokyo, Japan.
^ a b Alexander Waibel et al., Phoneme Recognition Using Time-Delay Neural Networks Archived 2021-02-25 at the Wayback Machine IEEE Transactions on Acoustics, Speech, and Signal Processing, Volume 37, No. 3, pp. 328. - 339 March 1989.
^ LeCun, Yann; Bengio, Yoshua (1995).
"Convolutional networks for images, speech, and time series".
 In Arbib, Michael A. (ed.).
The handbook of brain theory and neural networks (Second ed.). The MIT press. pp. 276–278.
Archived from the original on 2020-07-28.
 Retrieved 2019-12-03.
^ John B. Hampshire and Alexander Waibel, Connectionist Architectures for Multi-Speaker Phoneme Recognition Archived 2022-03-31 at the Wayback Machine , Advances in Neural Information Processing Systems, 1990, Morgan Kaufmann.
^ a b Le Callet, Patrick; Christian Viard-Gaudin; Dominique Barba (2006).
"A Convolutional Neural Network Approach for Objective Video Quality Assessment" (PDF).
IEEE Transactions on Neural Networks.
17 (5): 1316–1327.
doi : 10.1109/TNN.2006.879766.
PMID 17001990.
S2CID 221185563.
Archived (PDF) from the original on 24 February 2021.
 Retrieved 17 November 2013.
^ Ko, Tom; Peddinti, Vijayaditya; Povey, Daniel; Seltzer, Michael L.; Khudanpur, Sanjeev (March 2018).
A Study on Data Augmentation of Reverberant Speech for Robust Speech Recognition (PDF).
 The 42nd IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP 2017). New Orleans, LA, USA.
Archived (PDF) from the original on 2018-07-08.
 Retrieved 2019-09-04.
^ Denker, J S, Gardner, W R, Graf, H. P, Henderson, D, Howard, R E, Hubbard, W, Jackel, L D, BaIrd, H S, and Guyon (1989) Neural network recognizer for hand-written zip code digits Archived 2018-08-04 at the Wayback Machine , AT&T Bell Laboratories ^ a b Y. LeCun, B. Boser, J. S. Denker, D. Henderson, R. E. Howard, W. Hubbard, L. D. Jackel, Backpropagation Applied to Handwritten Zip Code Recognition Archived 2020-01-10 at the Wayback Machine ; AT&T Bell Laboratories ^ a b Zhang, Wei (1991).
"Image processing of human corneal endothelium based on a learning network".
Applied Optics.
30 (29): 4211–7.
Bibcode : 1991ApOpt..30.4211Z.
doi : 10.1364/AO.30.004211.
PMID 20706526.
Archived from the original on 2017-02-06.
 Retrieved 2016-09-22.
^ a b Zhang, Wei (1994).
"Computerized detection of clustered microcalcifications in digital mammograms using a shift-invariant artificial neural network".
Medical Physics.
21 (4): 517–24.
Bibcode : 1994MedPh..21..517Z.
doi : 10.1118/1.597177.
PMID 8058017.
Archived from the original on 2017-02-06.
 Retrieved 2016-09-22.
^ a b http://yann.lecun.com/exdb/publis/pdf/lecun-95a.pdf Archived 2023-05-02 at the Wayback Machine [ bare URL PDF ] ^ Zhang, Wei (1991).
"Error Back Propagation with Minimum-Entropy Weights: A Technique for Better Generalization of 2-D Shift-Invariant NNs".
Proceedings of the International Joint Conference on Neural Networks.
Archived from the original on 2017-02-06.
 Retrieved 2016-09-22.
^ Daniel Graupe, Ruey Wen Liu, George S Moschytz." Applications of neural networks to medical signal processing Archived 2020-07-28 at the Wayback Machine ". In Proc. 27th IEEE Decision and Control Conf., pp. 343–347, 1988.
^ Daniel Graupe, Boris Vern, G. Gruener, Aaron Field, and Qiu Huang. " Decomposition of surface EMG signals into single fiber action potentials by means of neural network Archived 2019-09-04 at the Wayback Machine ". Proc. IEEE International Symp. on Circuits and Systems, pp. 1008–1011, 1989.
^ Qiu Huang, Daniel Graupe, Yi Fang Huang, Ruey Wen Liu." Identification of firing patterns of neuronal signals [ dead link ].
" In Proc. 28th IEEE Decision and Control Conf., pp. 266–271, 1989.
https://ieeexplore.ieee.org/document/70115 Archived 2022-03-31 at the Wayback Machine ^ Behnke, Sven (2003).
Hierarchical Neural Networks for Image Interpretation (PDF).
 Lecture Notes in Computer Science. Vol. 2766. Springer.
doi : 10.1007/b11963.
ISBN 978-3-540-40722-5.
S2CID 1304548.
Archived (PDF) from the original on 2017-08-10.
 Retrieved 2016-12-28.
^ Oh, KS; Jung, K (2004). "GPU implementation of neural networks".
Pattern Recognition.
37 (6): 1311–1314.
Bibcode : 2004PatRe..37.1311O.
doi : 10.1016/j.patcog.2004.01.013.
^ Dave Steinkraus; Patrice Simard; Ian Buck (2005).
"Using GPUs for Machine Learning Algorithms".
12th International Conference on Document Analysis and Recognition (ICDAR 2005).
 pp. 1115–1119.
doi : 10.1109/ICDAR.2005.251.
Archived from the original on 2022-03-31.
 Retrieved 2022-03-31.
^ Kumar Chellapilla; Sid Puri; Patrice Simard (2006).
"High Performance Convolutional Neural Networks for Document Processing".
 In Lorette, Guy (ed.).
Tenth International Workshop on Frontiers in Handwriting Recognition.
 Suvisoft.
Archived from the original on 2020-05-18.
 Retrieved 2016-03-14.
^ Hinton, GE; Osindero, S; Teh, YW (Jul 2006). "A fast learning algorithm for deep belief nets".
Neural Computation.
18 (7): 1527–54.
CiteSeerX 10.1.1.76.1541.
doi : 10.1162/neco.2006.18.7.1527.
PMID 16764513.
S2CID 2309950.
^ Bengio, Yoshua; Lamblin, Pascal; Popovici, Dan; Larochelle, Hugo (2007).
"Greedy Layer-Wise Training of Deep Networks" (PDF).
Advances in Neural Information Processing Systems : 153–160.
Archived (PDF) from the original on 2022-06-02.
 Retrieved 2022-03-31.
^ Ranzato, MarcAurelio; Poultney, Christopher; Chopra, Sumit; LeCun, Yann (2007).
"Efficient Learning of Sparse Representations with an Energy-Based Model" (PDF).
Advances in Neural Information Processing Systems.
Archived (PDF) from the original on 2016-03-22.
 Retrieved 2014-06-26.
^ Raina, R; Madhavan, A; Ng, Andrew (2009).
"Large-scale deep unsupervised learning using graphics processors" (PDF).
Proceedings of the 26th Annual International Conference on Machine Learning.
 pp. 873–880.
doi : 10.1145/1553374.1553486.
ISBN 9781605585161.
S2CID 392458.
Archived (PDF) from the original on 2020-12-08.
 Retrieved 2019-09-04.
{{ cite book }} : |journal= ignored ( help ) ^ Ciresan, Dan; Meier, Ueli; Gambardella, Luca; Schmidhuber, Jürgen (2010). "Deep big simple neural nets for handwritten digit recognition".
Neural Computation.
22 (12): 3207–3220.
arXiv : 1003.0358.
doi : 10.1162/NECO_a_00052.
PMID 20858131.
S2CID 1918673.
^ "IJCNN 2011 Competition result table".
OFFICIAL IJCNN2011 COMPETITION.
 2010.
Archived from the original on 2021-01-17.
 Retrieved 2019-01-14.
^ Schmidhuber, Jürgen (17 March 2017).
"History of computer vision contests won by deep CNNs on GPU".
Archived from the original on 19 December 2018.
 Retrieved 14 January 2019.
^ a b Krizhevsky, Alex; Sutskever, Ilya; Hinton, Geoffrey E. (2017-05-24).
"ImageNet classification with deep convolutional neural networks" (PDF).
Communications of the ACM.
60 (6): 84–90.
doi : 10.1145/3065386.
ISSN 0001-0782.
S2CID 195908774.
Archived (PDF) from the original on 2017-05-16.
 Retrieved 2018-12-04.
^ He, Kaiming; Zhang, Xiangyu; Ren, Shaoqing; Sun, Jian (2016).
"Deep Residual Learning for Image Recognition" (PDF).
2016 IEEE Conference on Computer Vision and Pattern Recognition (CVPR).
 pp. 770–778.
arXiv : 1512.03385.
doi : 10.1109/CVPR.2016.90.
ISBN 978-1-4673-8851-1.
S2CID 206594692.
Archived (PDF) from the original on 2022-04-05.
 Retrieved 2022-03-31.
^ Viebke, Andre; Pllana, Sabri (2015).
"The Potential of the Intel (R) Xeon Phi for Supervised Deep Learning".
2015 IEEE 17th International Conference on High Performance Computing and Communications, 2015 IEEE 7th International Symposium on Cyberspace Safety and Security, and 2015 IEEE 12th International Conference on Embedded Software and Systems.
IEEE Xplore.
 IEEE 2015. pp. 758–765.
doi : 10.1109/HPCC-CSS-ICESS.2015.45.
ISBN 978-1-4799-8937-9.
S2CID 15411954.
Archived from the original on 2023-03-06.
 Retrieved 2022-03-31.
^ Viebke, Andre; Memeti, Suejb; Pllana, Sabri; Abraham, Ajith (2019). "CHAOS: a parallelization scheme for training convolutional neural networks on Intel Xeon Phi".
The Journal of Supercomputing.
75 (1): 197–227.
arXiv : 1702.07908.
doi : 10.1007/s11227-017-1994-x.
S2CID 14135321.
^ Hinton, Geoffrey (2012).
"ImageNet Classification with Deep Convolutional Neural Networks".
NIPS'12: Proceedings of the 25th International Conference on Neural Information Processing Systems - Volume 1.
1 : 1097–1105.
Archived from the original on 2019-12-20.
 Retrieved 2021-03-26 – via ACM.
^ a b c d e Azulay, Aharon; Weiss, Yair (2019).
"Why do deep convolutional networks generalize so poorly to small image transformations?".
Journal of Machine Learning Research.
20 (184): 1–25.
ISSN 1533-7928.
Archived from the original on 2022-03-31.
 Retrieved 2022-03-31.
^ a b Géron, Aurélien (2019).
Hands-on Machine Learning with Scikit-Learn, Keras, and TensorFlow.
 Sebastopol, CA: O'Reilly Media.
ISBN 978-1-492-03264-9.
, pp. 448 ^ Raschka, Sebastian.
"Ahead of AI #5: RevAIval of Ideas".
magazine.sebastianraschka.com.
Archived from the original on 2023-02-07.
 Retrieved 2023-02-07.
^ "CS231n Convolutional Neural Networks for Visual Recognition".
cs231n.github.io.
Archived from the original on 2019-10-23.
 Retrieved 2017-04-25.
^ a b Scherer, Dominik; Müller, Andreas C.; Behnke, Sven (2010).
"Evaluation of Pooling Operations in Convolutional Architectures for Object Recognition" (PDF).
Artificial Neural Networks (ICANN), 20th International Conference on.
 Thessaloniki, Greece: Springer. pp. 92–101.
Archived (PDF) from the original on 2018-04-03.
 Retrieved 2016-12-28.
^ Graham, Benjamin (2014-12-18). "Fractional Max-Pooling".
arXiv : 1412.6071 [ cs.CV ].
^ Springenberg, Jost Tobias; Dosovitskiy, Alexey; Brox, Thomas; Riedmiller, Martin (2014-12-21). "Striving for Simplicity: The All Convolutional Net".
arXiv : 1412.6806 [ cs.LG ].
^ Grel, Tomasz (2017-02-28).
"Region of interest pooling explained".
deepsense.io.
 Archived from the original on 2017-06-02.
 Retrieved 5 April 2017.
^ Girshick, Ross (2015-09-27). "Fast R-CNN".
arXiv : 1504.08083 [ cs.CV ].
^ Ma, Zhanyu; Chang, Dongliang; Xie, Jiyang; Ding, Yifeng; Wen, Shaoguo; Li, Xiaoxu; Si, Zhongwei; Guo, Jun (2019). "Fine-Grained Vehicle Classification With Channel Max Pooling Modified CNNs".
IEEE Transactions on Vehicular Technology.
 Institute of Electrical and Electronics Engineers (IEEE).
68 (4): 3224–3233.
doi : 10.1109/tvt.2019.2899972.
ISSN 0018-9545.
S2CID 86674074.
^ Romanuke, Vadim (2017).
"Appropriate number and allocation of ReLUs in convolutional neural networks".
Research Bulletin of NTUU "Kyiv Polytechnic Institute".
1 (1): 69–78.
doi : 10.20535/1810-0546.2017.1.88156.
^ Xavier Glorot; Antoine Bordes; Yoshua Bengio (2011).
Deep sparse rectifier neural networks (PDF).
 AISTATS. Archived from the original (PDF) on 2016-12-13.
 Retrieved 2023-04-10.
Rectifier and softplus activation functions. The second one is a smooth version of the first.
^ Krizhevsky, A.; Sutskever, I.; Hinton, G. E. (2012).
"Imagenet classification with deep convolutional neural networks" (PDF).
Advances in Neural Information Processing Systems.
1 : 1097–1105.
Archived (PDF) from the original on 2022-03-31.
 Retrieved 2022-03-31.
^ "6.3. Padding and Stride — Dive into Deep Learning 0.17.0 documentation".
d2l.ai.
Archived from the original on 2021-08-12.
 Retrieved 2021-08-12.
^ Deshpande, Adit.
"The 9 Deep Learning Papers You Need To Know About (Understanding CNNs Part 3)".
adeshpande3.github.io.
Archived from the original on 2018-11-21.
 Retrieved 2018-12-04.
^ Pröve, Paul-Louis (2018-02-07).
"An Introduction to different Types of Convolutions in Deep Learning".
Medium.
Archived from the original on 2022-07-27.
 Retrieved 2022-07-27.
^ Seo, Jae Duk (2018-03-12).
"Understanding 2D Dilated Convolution Operation with Examples in Numpy and Tensorflow with…".
Medium.
Archived from the original on 2021-11-06.
 Retrieved 2021-08-12.
^ Ribeiro,Schon, Antonio,Thomas (2021). "How Convolutional Neural Networks Deal with Aliasing".
ICASSP 2021 - 2021 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP).
 pp. 2755–2759.
arXiv : 2102.07757.
doi : 10.1109/ICASSP39728.2021.9414627.
ISBN 978-1-7281-7605-5.
S2CID 231925012.
{{ cite book }} : CS1 maint: multiple names: authors list ( link ) ^ Myburgh, Johannes C.; Mouton, Coenraad; Davel, Marelie H. (2020).
"Tracking Translation Invariance in CNNS".
 In Gerber, Aurona (ed.).
Artificial Intelligence Research.
 Communications in Computer and Information Science. Vol. 1342. Cham: Springer International Publishing. pp. 282–295.
arXiv : 2104.05997.
doi : 10.1007/978-3-030-66151-9_18.
ISBN 978-3-030-66151-9.
S2CID 233219976.
Archived from the original on 2022-01-22.
 Retrieved 2021-03-26.
^ Richard, Zhang (2019-04-25).
Making Convolutional Networks Shift-Invariant Again.
OCLC 1106340711.
^ Jadeberg, Simonyan, Zisserman, Kavukcuoglu, Max, Karen, Andrew, Koray (2015).
"Spatial Transformer Networks" (PDF).
Advances in Neural Information Processing Systems.
28.
Archived (PDF) from the original on 2021-07-25.
 Retrieved 2021-03-26 – via NIPS.
{{ cite journal }} : CS1 maint: multiple names: authors list ( link ) ^ E, Sabour, Sara Frosst, Nicholas Hinton, Geoffrey (2017-10-26).
Dynamic Routing Between Capsules.
OCLC 1106278545.
{{ cite book }} : CS1 maint: multiple names: authors list ( link ) ^ Matiz, Sergio; Barner, Kenneth E. (2019-06-01).
"Inductive conformal predictor for convolutional neural networks: Applications to active learning for image classification".
Pattern Recognition.
90 : 172–182.
Bibcode : 2019PatRe..90..172M.
doi : 10.1016/j.patcog.2019.01.035.
ISSN 0031-3203.
S2CID 127253432.
Archived from the original on 2021-09-29.
 Retrieved 2021-09-29.
^ Wieslander, Håkan; Harrison, Philip J.; Skogberg, Gabriel; Jackson, Sonya; Fridén, Markus; Karlsson, Johan; Spjuth, Ola; Wählby, Carolina (February 2021).
"Deep Learning With Conformal Prediction for Hierarchical Analysis of Large-Scale Whole-Slide Tissue Images".
IEEE Journal of Biomedical and Health Informatics.
25 (2): 371–380.
doi : 10.1109/JBHI.2020.2996300.
ISSN 2168-2208.
PMID 32750907.
S2CID 219885788.
Archived from the original on 2022-01-20.
 Retrieved 2022-01-29.
^ Srivastava, Nitish; C. Geoffrey Hinton; Alex Krizhevsky; Ilya Sutskever; Ruslan Salakhutdinov (2014).
"Dropout: A Simple Way to Prevent Neural Networks from overfitting" (PDF).
Journal of Machine Learning Research.
15 (1): 1929–1958.
Archived (PDF) from the original on 2016-01-19.
 Retrieved 2015-01-03.
^ Carlos E. Perez.
"A Pattern Language for Deep Learning".
Archived from the original on 2017-06-03.
 Retrieved 2016-06-15.
^ "Regularization of Neural Networks using DropConnect | ICML 2013 | JMLR W&CP".
jmlr.org : 1058–1066. 2013-02-13.
Archived from the original on 2017-08-12.
 Retrieved 2015-12-17.
^ Zeiler, Matthew D.; Fergus, Rob (2013-01-15). "Stochastic Pooling for Regularization of Deep Convolutional Neural Networks".
arXiv : 1301.3557 [ cs.LG ].
^ a b Platt, John; Steinkraus, Dave; Simard, Patrice Y. (August 2003).
"Best Practices for Convolutional Neural Networks Applied to Visual Document Analysis – Microsoft Research".
Microsoft Research.
Archived from the original on 2017-11-07.
 Retrieved 2015-12-17.
^ Hinton, Geoffrey E.; Srivastava, Nitish; Krizhevsky, Alex; Sutskever, Ilya; Salakhutdinov, Ruslan R. (2012). "Improving neural networks by preventing co-adaptation of feature detectors".
arXiv : 1207.0580 [ cs.NE ].
^ "Dropout: A Simple Way to Prevent Neural Networks from Overfitting".
jmlr.org.
Archived from the original on 2016-03-05.
 Retrieved 2015-12-17.
^ Hinton, Geoffrey (1979). "Some demonstrations of the effects of structural descriptions in mental imagery".
Cognitive Science.
3 (3): 231–250.
doi : 10.1016/s0364-0213(79)80008-7.
^ Rock, Irvin. "The frame of reference." The legacy of Solomon Asch: Essays in cognition and social psychology (1990): 243–268.
^ J. Hinton, Coursera lectures on Neural Networks, 2012, Url: https://www.coursera.org/learn/neural-networks Archived 2016-12-31 at the Wayback Machine ^ Dave Gershgorn (18 June 2018).
"The inside story of how AI got good enough to dominate Silicon Valley".
Quartz.
Archived from the original on 12 December 2019.
 Retrieved 5 October 2018.
^ Lawrence, Steve; C. Lee Giles; Ah Chung Tsoi; Andrew D. Back (1997). "Face Recognition: A Convolutional Neural Network Approach".
IEEE Transactions on Neural Networks.
8 (1): 98–113.
CiteSeerX 10.1.1.92.5813.
doi : 10.1109/72.554195.
PMID 18255614.
S2CID 2883848.
^ "ImageNet Large Scale Visual Recognition Competition 2014 (ILSVRC2014)".
Archived from the original on 5 February 2016.
 Retrieved 30 January 2016.
^ Szegedy, Christian; Liu, Wei; Jia, Yangqing; Sermanet, Pierre; Reed, Scott E.; Anguelov, Dragomir; Erhan, Dumitru; Vanhoucke, Vincent; Rabinovich, Andrew (2015). "Going deeper with convolutions".
IEEE Conference on Computer Vision and Pattern Recognition, CVPR 2015, Boston, MA, USA, June 7–12, 2015.
 IEEE Computer Society. pp. 1–9.
arXiv : 1409.4842.
doi : 10.1109/CVPR.2015.7298594.
^ Russakovsky, Olga ; Deng, Jia; Su, Hao; Krause, Jonathan; Satheesh, Sanjeev; Ma, Sean; Huang, Zhiheng; Karpathy, Andrej ; Khosla, Aditya; Bernstein, Michael; Berg, Alexander C.; Fei-Fei, Li (2014). "Image Net Large Scale Visual Recognition Challenge".
arXiv : 1409.0575 [ cs.CV ].
^ "The Face Detection Algorithm Set To Revolutionize Image Search".
Technology Review.
 February 16, 2015.
Archived from the original on 20 September 2020.
 Retrieved 27 October 2017.
^ Baccouche, Moez; Mamalet, Franck; Wolf, Christian; Garcia, Christophe; Baskurt, Atilla (2011-11-16). "Sequential Deep Learning for Human Action Recognition". In Salah, Albert Ali; Lepri, Bruno (eds.).
Human Behavior Unterstanding.
 Lecture Notes in Computer Science. Vol. 7065. Springer Berlin Heidelberg. pp. 29–39.
CiteSeerX 10.1.1.385.4740.
doi : 10.1007/978-3-642-25446-8_4.
ISBN 978-3-642-25445-1.
^ Ji, Shuiwang; Xu, Wei; Yang, Ming; Yu, Kai (2013-01-01). "3D Convolutional Neural Networks for Human Action Recognition".
IEEE Transactions on Pattern Analysis and Machine Intelligence.
35 (1): 221–231.
CiteSeerX 10.1.1.169.4046.
doi : 10.1109/TPAMI.2012.59.
ISSN 0162-8828.
PMID 22392705.
S2CID 1923924.
^ Huang, Jie; Zhou, Wengang; Zhang, Qilin; Li, Houqiang; Li, Weiping (2018). "Video-based Sign Language Recognition without Temporal Segmentation".
arXiv : 1801.10111 [ cs.CV ].
^ Karpathy, Andrej, et al. " Large-scale video classification with convolutional neural networks Archived 2019-08-06 at the Wayback Machine.
" IEEE Conference on Computer Vision and Pattern Recognition (CVPR). 2014.
^ Simonyan, Karen; Zisserman, Andrew (2014). "Two-Stream Convolutional Networks for Action Recognition in Videos".
arXiv : 1406.2199 [ cs.CV ].
(2014).
^ Wang, Le; Duan, Xuhuan; Zhang, Qilin; Niu, Zhenxing; Hua, Gang; Zheng, Nanning (2018-05-22).
"Segment-Tube: Spatio-Temporal Action Localization in Untrimmed Videos with Per-Frame Segmentation" (PDF).
Sensors.
18 (5): 1657.
Bibcode : 2018Senso..18.1657W.
doi : 10.3390/s18051657.
ISSN 1424-8220.
PMC 5982167.
PMID 29789447.
Archived (PDF) from the original on 2021-03-01.
 Retrieved 2018-09-14.
^ Duan, Xuhuan; Wang, Le; Zhai, Changbo; Zheng, Nanning; Zhang, Qilin; Niu, Zhenxing; Hua, Gang (2018). "Joint Spatio-Temporal Action Localization in Untrimmed Videos with Per-Frame Segmentation".
2018 25th IEEE International Conference on Image Processing (ICIP).
 25th IEEE International Conference on Image Processing (ICIP). pp. 918–922.
doi : 10.1109/icip.2018.8451692.
ISBN 978-1-4799-7061-2.
^ Taylor, Graham W.; Fergus, Rob; LeCun, Yann; Bregler, Christoph (2010-01-01).
Convolutional Learning of Spatio-temporal Features.
 Proceedings of the 11th European Conference on Computer Vision: Part VI. ECCV'10. Berlin, Heidelberg: Springer-Verlag. pp. 140–153.
ISBN 978-3-642-15566-6.
Archived from the original on 2022-03-31.
 Retrieved 2022-03-31.
^ Le, Q. V.; Zou, W. Y.; Yeung, S. Y.; Ng, A. Y. (2011-01-01). "Learning hierarchical invariant spatio-temporal features for action recognition with independent subspace analysis".
CVPR 2011.
 CVPR '11. Washington, DC, USA: IEEE Computer Society. pp. 3361–3368.
CiteSeerX 10.1.1.294.5948.
doi : 10.1109/CVPR.2011.5995496.
ISBN 978-1-4577-0394-2.
S2CID 6006618.
^ "Leading India.ai" (PDF).
Archived (PDF) from the original on 2022-10-14.
 Retrieved 2022-10-13.
^ Grefenstette, Edward; Blunsom, Phil; de Freitas, Nando; Hermann, Karl Moritz (2014-04-29). "A Deep Architecture for Semantic Parsing".
arXiv : 1404.7296 [ cs.CL ].
^ Mesnil, Gregoire; Deng, Li; Gao, Jianfeng; He, Xiaodong; Shen, Yelong (April 2014).
"Learning Semantic Representations Using Convolutional Neural Networks for Web Search – Microsoft Research".
Microsoft Research.
Archived from the original on 2017-09-15.
 Retrieved 2015-12-17.
^ Kalchbrenner, Nal; Grefenstette, Edward; Blunsom, Phil (2014-04-08). "A Convolutional Neural Network for Modelling Sentences".
arXiv : 1404.2188 [ cs.CL ].
^ Kim, Yoon (2014-08-25). "Convolutional Neural Networks for Sentence Classification".
arXiv : 1408.5882 [ cs.CL ].
^ Collobert, Ronan, and Jason Weston. " A unified architecture for natural language processing: Deep neural networks with multitask learning Archived 2019-09-04 at the Wayback Machine.
"Proceedings of the 25th international conference on Machine learning. ACM, 2008.
^ Collobert, Ronan; Weston, Jason; Bottou, Leon; Karlen, Michael; Kavukcuoglu, Koray; Kuksa, Pavel (2011-03-02). "Natural Language Processing (almost) from Scratch".
arXiv : 1103.0398 [ cs.LG ].
^ Yin, W; Kann, K; Yu, M; Schütze, H (2017-03-02). "Comparative study of CNN and RNN for natural language processing".
arXiv : 1702.01923 [ cs.LG ].
^ Bai, S.; Kolter, J.S.; Koltun, V. (2018). "An empirical evaluation of generic convolutional and recurrent networks for sequence modeling".
arXiv : 1803.01271 [ cs.LG ].
^ Gruber, N. (2021).
"Detecting dynamics of action in text with a recurrent neural network".
Neural Computing and Applications.
33 (12): 15709–15718.
doi : 10.1007/S00521-021-06190-5.
S2CID 236307579.
Archived from the original on 2021-10-10.
 Retrieved 2021-10-10.
^ Haotian, J.; Zhong, Li; Qianxiao, Li (2021). "Approximation Theory of Convolutional Architectures for Time Series Modelling".
International Conference on Machine Learning.
arXiv : 2107.09355.
^ Ren, Hansheng; Xu, Bixiong; Wang, Yujing; Yi, Chao; Huang, Congrui; Kou, Xiaoyu; Xing, Tony; Yang, Mao; Tong, Jie; Zhang, Qi (2019).
Time-Series Anomaly Detection Service at Microsoft | Proceedings of the 25th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining.
arXiv : 1906.03821.
doi : 10.1145/3292500.3330680.
S2CID 182952311.
^ Wallach, Izhar; Dzamba, Michael; Heifets, Abraham (2015-10-09). "AtomNet: A Deep Convolutional Neural Network for Bioactivity Prediction in Structure-based Drug Discovery".
arXiv : 1510.02855 [ cs.LG ].
^ Yosinski, Jason; Clune, Jeff; Nguyen, Anh; Fuchs, Thomas; Lipson, Hod (2015-06-22). "Understanding Neural Networks Through Deep Visualization".
arXiv : 1506.06579 [ cs.CV ].
^ "Toronto startup has a faster way to discover effective medicines".
The Globe and Mail.
Archived from the original on 2015-10-20.
 Retrieved 2015-11-09.
^ "Startup Harnesses Supercomputers to Seek Cures".
KQED Future of You.
 2015-05-27.
Archived from the original on 2018-12-06.
 Retrieved 2015-11-09.
^ Chellapilla, K; Fogel, DB (1999). "Evolving neural networks to play checkers without relying on expert knowledge".
IEEE Trans Neural Netw.
10 (6): 1382–91.
doi : 10.1109/72.809083.
PMID 18252639.
^ Chellapilla, K.; Fogel, D.B. (2001). "Evolving an expert checkers playing program without using human expertise".
IEEE Transactions on Evolutionary Computation.
5 (4): 422–428.
doi : 10.1109/4235.942536.
^ Fogel, David (2001).
Blondie24: Playing at the Edge of AI.
 San Francisco, CA: Morgan Kaufmann.
ISBN 978-1558607835.
^ Clark, Christopher; Storkey, Amos (2014). "Teaching Deep Convolutional Neural Networks to Play Go".
arXiv : 1412.3409 [ cs.AI ].
^ Maddison, Chris J.; Huang, Aja; Sutskever, Ilya; Silver, David (2014). "Move Evaluation in Go Using Deep Convolutional Neural Networks".
arXiv : 1412.6564 [ cs.LG ].
^ "AlphaGo – Google DeepMind".
 Archived from the original on 30 January 2016.
 Retrieved 30 January 2016.
^ Bai, Shaojie; Kolter, J. Zico; Koltun, Vladlen (2018-04-19). "An Empirical Evaluation of Generic Convolutional and Recurrent Networks for Sequence Modeling".
arXiv : 1803.01271 [ cs.LG ].
^ Yu, Fisher; Koltun, Vladlen (2016-04-30). "Multi-Scale Context Aggregation by Dilated Convolutions".
arXiv : 1511.07122 [ cs.CV ].
^ Borovykh, Anastasia; Bohte, Sander; Oosterlee, Cornelis W. (2018-09-17). "Conditional Time Series Forecasting with Convolutional Neural Networks".
arXiv : 1703.04691 [ stat.ML ].
^ Mittelman, Roni (2015-08-03). "Time-series modeling with undecimated fully convolutional neural networks".
arXiv : 1508.00317 [ stat.ML ].
^ Chen, Yitian; Kang, Yanfei; Chen, Yixiong; Wang, Zizhuo (2019-06-11). "Probabilistic Forecasting with Temporal Convolutional Neural Network".
arXiv : 1906.04397 [ stat.ML ].
^ Zhao, Bendong; Lu, Huanzhang; Chen, Shangfeng; Liu, Junliang; Wu, Dongya (2017-02-01). "Convolutional neural networks for time series classi".
Journal of Systems Engineering and Electronics.
28 (1): 162–169.
doi : 10.21629/JSEE.2017.01.18.
^ Petneházi, Gábor (2019-08-21). "QCNN: Quantile Convolutional Neural Network".
arXiv : 1908.07978 [ cs.LG ].
^ Hubert Mara (2019-06-07), HeiCuBeDa Hilprecht – Heidelberg Cuneiform Benchmark Dataset for the Hilprecht Collection (in German), heiDATA – institutional repository for research data of Heidelberg University, doi : 10.11588/data/IE8CCN ^ Hubert Mara and Bartosz Bogacz (2019), "Breaking the Code on Broken Tablets: The Learning Challenge for Annotated Cuneiform Script in Normalized 2D and 3D Datasets", Proceedings of the 15th International Conference on Document Analysis and Recognition (ICDAR) (in German), Sydney, Australien, pp. 148–153, doi : 10.1109/ICDAR.2019.00032 , ISBN 978-1-7281-3014-9 , S2CID 211026941 ^ Bogacz, Bartosz; Mara, Hubert (2020), "Period Classification of 3D Cuneiform Tablets with Geometric Neural Networks", Proceedings of the 17th International Conference on Frontiers of Handwriting Recognition (ICFHR) , Dortmund, Germany ^ Presentation of the ICFHR paper on Period Classification of 3D Cuneiform Tablets with Geometric Neural Networks on YouTube ^ Durjoy Sen Maitra; Ujjwal Bhattacharya; S.K. Parui, "CNN based common approach to handwritten character recognition of multiple scripts" Archived 2023-10-16 at the Wayback Machine , in Document Analysis and Recognition (ICDAR), 2015 13th International Conference on, vol., no., pp.1021–1025, 23–26 Aug. 2015 ^ "NIPS 2017".
Interpretable ML Symposium.
 2017-10-20. Archived from the original on 2019-09-07.
 Retrieved 2018-09-12.
^ Zang, Jinliang; Wang, Le; Liu, Ziyi; Zhang, Qilin; Hua, Gang; Zheng, Nanning (2018). "Attention-Based Temporal Weighted Convolutional Neural Network for Action Recognition".
Artificial Intelligence Applications and Innovations.
 IFIP Advances in Information and Communication Technology. Vol. 519. Cham: Springer International Publishing. pp. 97–108.
arXiv : 1803.07179.
doi : 10.1007/978-3-319-92007-8_9.
ISBN 978-3-319-92006-1.
ISSN 1868-4238.
S2CID 4058889.
^ Wang, Le; Zang, Jinliang; Zhang, Qilin; Niu, Zhenxing; Hua, Gang; Zheng, Nanning (2018-06-21).
"Action Recognition by an Attention-Aware Temporal Weighted Convolutional Neural Network" (PDF).
Sensors.
18 (7): 1979.
Bibcode : 2018Senso..18.1979W.
doi : 10.3390/s18071979.
ISSN 1424-8220.
PMC 6069475.
PMID 29933555.
Archived (PDF) from the original on 2018-09-13.
 Retrieved 2018-09-14.
^ Ong, Hao Yi; Chavez, Kevin; Hong, Augustus (2015-08-18). "Distributed Deep Q-Learning".
arXiv : 1508.04186v2 [ cs.LG ].
^ Mnih, Volodymyr; et al. (2015). "Human-level control through deep reinforcement learning".
Nature.
518 (7540): 529–533.
Bibcode : 2015Natur.518..529M.
doi : 10.1038/nature14236.
PMID 25719670.
S2CID 205242740.
^ Sun, R.; Sessions, C. (June 2000). "Self-segmentation of sequences: automatic formation of hierarchies of sequential behaviors".
IEEE Transactions on Systems, Man, and Cybernetics - Part B: Cybernetics.
30 (3): 403–418.
CiteSeerX 10.1.1.11.226.
doi : 10.1109/3477.846230.
ISSN 1083-4419.
PMID 18252373.
^ "Convolutional Deep Belief Networks on CIFAR-10" (PDF).
Archived (PDF) from the original on 2017-08-30.
 Retrieved 2017-08-18.
^ Lee, Honglak; Grosse, Roger; Ranganath, Rajesh; Ng, Andrew Y. (1 January 2009). "Convolutional deep belief networks for scalable unsupervised learning of hierarchical representations".
Proceedings of the 26th Annual International Conference on Machine Learning.
 ACM. pp. 609–616.
CiteSeerX 10.1.1.149.6800.
doi : 10.1145/1553374.1553453.
ISBN 9781605585161.
S2CID 12008458.
^ Cade Metz (May 18, 2016).
"Google Built Its Very Own Chips to Power Its AI Bots".
Wired.
Archived from the original on January 13, 2018.
 Retrieved March 6, 2017.
External links [ edit ] CS231n: Convolutional Neural Networks for Visual Recognition — Andrej Karpathy 's Stanford computer science course on CNNs in computer vision An Intuitive Explanation of Convolutional Neural Networks — A beginner level introduction to what Convolutional Neural Networks are and how they work Convolutional Neural Networks for Image Classification Archived 2018-01-21 at the Wayback Machine — Literature Survey v t e Differentiable computing General Differentiable programming Information geometry Statistical manifold Automatic differentiation Neuromorphic engineering Pattern recognition Tensor calculus Computational learning theory Inductive bias Concepts Gradient descent SGD Clustering Regression Overfitting Hallucination Adversary Attention Convolution Loss functions Backpropagation Batchnorm Activation Softmax Sigmoid Rectifier Regularization Datasets Augmentation Diffusion Autoregression Applications Machine learning In-context learning Artificial neural network Deep learning Scientific computing Artificial Intelligence Language model Large language model Hardware IPU TPU VPU Memristor SpiNNaker Software libraries TensorFlow PyTorch Keras Theano JAX Flux.jl Implementations Audio–visual AlexNet WaveNet Human image synthesis HWR OCR Speech synthesis Speech recognition Facial recognition AlphaFold DALL-E Midjourney Stable Diffusion Whisper Verbal Word2vec Seq2seq BERT LaMDA Bard NMT Project Debater IBM Watson GPT-1 GPT-2 GPT-3 GPT-4 ChatGPT GPT-J Chinchilla AI PaLM BLOOM LLaMA Decisional AlphaGo AlphaZero Q-learning SARSA OpenAI Five Self-driving car MuZero Action selection Auto-GPT Robot control People Yoshua Bengio Alex Graves Ian Goodfellow Stephen Grossberg Demis Hassabis Geoffrey Hinton Yann LeCun Fei-Fei Li Andrew Ng Jürgen Schmidhuber David Silver Ilya Sutskever Organizations Anthropic EleutherAI Google DeepMind Hugging Face OpenAI Meta AI Mila MIT CSAIL Architectures Neural Turing machine Differentiable neural computer Transformer Recurrent neural network (RNN) Long short-term memory (LSTM) Gated recurrent unit (GRU) Echo state network Multilayer perceptron (MLP) Convolutional neural network Residual neural network Autoencoder Variational autoencoder (VAE) Generative adversarial network (GAN) Graph neural network Portals Computer programming Technology Categories Artificial neural networks Machine learning Neural network architectures Computer vision Computational neuroscience CS1 maint: location missing publisher CS1 maint: multiple names: authors list CS1 errors: periodical ignored Webarchive template wayback links All articles with bare URLs for citations Articles with bare URLs for citations from May 2023 Articles with PDF format bare URLs for citations All articles with dead external links Articles with dead external links from July 2022 CS1 German-language sources (de) Articles with short description Short description is different from Wikidata Articles needing additional references from June 2019 All articles needing additional references All articles with specifically marked weasel-worded phrases Articles with specifically marked weasel-worded phrases from April 2023 All articles with unsourced statements Articles with unsourced statements from October 2017 Wikipedia articles needing clarification from April 2023 All articles with vague or ambiguous time Vague or ambiguous time from August 2022 Articles containing explicitly cited British English-language text All articles needing examples Articles needing examples from October 2017 Articles needing additional references from June 2017 Articles with specifically marked weasel-worded phrases from December 2018 Wikipedia articles needing clarification from December 2018 Articles with unsourced statements from June 2019 This page was last edited on 27 October 2023, at 20:09 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike License 4.0 ; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy.
 Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc.
, a non-profit organization.
Privacy policy About Wikipedia Disclaimers Contact Wikipedia Code of Conduct Developers Statistics Cookie statement Mobile view Toggle limited content width
