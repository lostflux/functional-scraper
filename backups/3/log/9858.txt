Featured Topics Newsletters Events Podcasts Featured Topics Newsletters Events Podcasts Learning to code isn’t enough Historically, learn-to-code efforts have provided opportunities for the few, but new efforts are aiming to be inclusive.
By Joy Lisi Rankin archive page Black Girls Code works to increase the number of women of color working in technology by introducing girls to computer science.
AP Photo/Bebeto Matthews A decade ago, tech powerhouses the likes of Microsoft, Google, and Amazon helped boost the nonprofit Code.org, a learn-to-code program with a vision : “That every student in every school has the opportunity to learn computer science as part of their core K–12 education.” It was followed by a wave of nonprofits and for-profits alike dedicated to coding and learning computer science; some of the many others include Codecademy , Treehouse , Girl Develop It , and Hackbright Academy (not to mention Girls Who Code, founded the year before Code.org and promising participants, “Learn to code and change the world”). Parents can now consider top-10 lists of coding summer camps for kids. Some may choose to start their children even younger, with the Baby Code! series of board books —because “it’s never too early to get little ones interested in computer coding.” Riding this wave of enthusiasm, in 2016 President Barack Obama launched an initiative called Computer Science for All , proposing billions of dollars in funding to arm students with the “computational thinking skills they need” to “thrive in a digital economy.” Now, in 2023, North Carolina is considering making coding a high school graduation requirement. If lawmakers enact that curriculum change, they will be following in the footsteps of five other states with similar policies that consider coding and computer education foundational to a well-rounded education: Nevada, South Carolina, Tennessee, Arkansas, and Nebraska. Advocates for such policies contend that they expand educational and economic opportunities for students. More and more jobs, they suggest, will require “ some kind of computer science knowledge.
” This enthusiasm for coding is nothing new. In 1978 Andrew Molnar, an expert at the National Science Foundation , argued that what he termed computer literacy was “a prerequisite to effective participation in an information society and as much a social obligation as reading literacy.” Molnar pointed as models to two programs that had originated in the 1960s. One was the Logo project centered at the MIT Artificial Intelligence Lab, which focused on exposing elementary-­age kids to computing. (MIT Technology Review is funded in part by MIT but maintains editorial independence.) The other was at Dartmouth College, where undergraduates learned how to write programs on a campus-wide computing network.
The Logo and Dartmouth efforts were among several computing-related educational endeavors organized from the 1960s through 1980s. But these programs, and many that followed, often benefited the populations with the most power in society.Then as now, just learning to code is neither a pathway to a stable financial future for people from economically precarious backgrounds nor a panacea for the inadequacies of the educational system.
Dartmouth: Building a BASIC computing community When mathematics professor (and future Dartmouth president) John Kemeny made a presentation to college trustees in the early 1960s hoping to persuade them to fund a campus-wide computing network, he emphasized the idea that Dartmouth students (who were at that time exclusively male, and mostly affluent and white) were the future leaders of the United States.
Kemeny argued , “Since many students at an institution like Dartmouth become executives or key policy makers in industry and government, it is a certainty that they will have at their command high-speed computing equipment.” Kemeny claimed that it was “essential” for those nascent power brokers to “be acquainted with the potential and limitations of high-speed computers.” In 1963 and 1964, he and fellow mathematics professor Thomas Kurtz worked closely with Dartmouth students to design and implement a campus-wide network, while Kemeny largely took responsibility for designing an easy-to-learn programming language, called BASIC, for students (and faculty) to use on that network. Both developments were eagerly welcomed by the incoming students in the fall of 1964.
Related Story For decades, coders wrote critical systems in C and C++. Now they turn to Rust.
As Dartmouth’s network grew during the 1960s, network terminals were installed in the new campus computer center, in shared campus recreational spaces and dormitories, and at other locations around campus. And because the system was set up as a time-sharing network, an innovation at the time, multiple terminals could be connected to the same computer, and the people using those terminals could write and debug programs simultaneously.
This was transformative: by 1968, 80% of Dartmouth undergraduates and 40% of the faculty used the network regularly. Although incoming students learned how to write a program in BASIC as a first-year math course requirement, what really fostered the computing culture was the way students made the language and the network their own. For example, the importance of football in campus life (Dartmouth claimed the Ivy League championship seven times between 1962 and 1971) inspired at least three computer football games (FTBALL, FOOTBALL, and GRIDIRON) played avidly on the Dartmouth network, one of them written by Kemeny himself.
Because the network was so easy to access and BASIC was so easy to use, Dartmouth students could make computing relevant to their own lives and interests. One wrote a program to test a hypothesis for a psychology class. Another ran a program called XMAS to print his Christmas cards. Some printed out letters to parents or girlfriends. Others enjoyed an array of games, including computer bridge, checkers, and chess. Although learning to write a program in BASIC was the starting point in computing for Dartmouth students, the ways they used it to meet their own needs and forge community with their peers made the system a precursor of social networking—nearly half a century ago. Coding in BASIC didn’t replace their liberal arts curriculum requirements or extracurricular activities; rather, it complemented them.
Different results: The Dartmouth network expands As it grew in popularity, other schools around New England sought to tap into Dartmouth’s computing network for their students. By April 1971, the network encompassed 30 high schools and 20 colleges in New England, New York, and New Jersey. All an individual school needed to connect were a terminal and a telephone line linking the terminal with the mainframe on Dartmouth’s campus (often the greatest expense of participating in the network, at a time when long-­distance phone calls were quite costly). Yet as BASIC moved beyond Dartmouth into heterogeneous high schools around New England, the computing culture remained homogeneous.
Private high schools including Phillips Exeter, Phillips Andover, and St. Paul’s were among the first to connect, all before 1967. Within a few more years, a mix of private and public high schools joined them. The Secondary School Project (SSP), which ran from 1967 to 1970 and was supported by a three-year NSF grant secured by Kemeny and Kurtz, connected students and educators at 18 public and private high schools from Connecticut to Maine, with the goal of putting computing access (and BASIC) into as many hands as possible and observing the results.
That these schools asked Dartmouth for time shares reflected interest and motivation on the part of some individual or group at each one. They wanted network access—and, by extension, access to code—because it was novel and elite. Some students were enthusiastic users, even waking at four in the morning to sign on. But access to the Dartmouth network was emphatically unequal. The private schools participating in the SSP were (at the time) all male and almost exclusively white, and those students enjoyed nearly twice as much network time as the students at coeducational public schools: 72 hours per week for private school students, and only 40 for public school students.
What was intended as computing for all ultimately amplified existing inequities.
In these years before the expansion of educational opportunities for girls and women in the United States, high school boys were enrolling in many more math and science classes than high school girls. The math and science students gained access to computing in those courses, meaning that BASIC moved into a system already segregated by gender—and also by race. What was intended as computing for all ultimately amplified existing inequities.
Logo: Trying to change the world, one turtle at a time One state away from Dartmouth, the Logo project, founded by Seymour Papert, Cynthia Solomon, and Wally Feurzeig, sought to revolutionize how elementary and middle school students learn. Initially, the researchers created a Logo programming language and tested it between 1967 and 1969 with groups of children including fifth and seventh graders at schools near MIT in Cambridge, Massachusetts. “These kids made up hilarious sentence generators and became proficient users of their own math quizzes,” Solomon has recalled.
But Logo was emphatically not just a “learn to code” effort. It grew to encompass an entire lab and a comprehensive learning system that would introduce new instructional methods, specially trained teachers, and physical objects to think and play with. Perhaps the best-remembered of those objects is the Logo Turtle , a small robot that moved along the floor, directed by computer commands, with a retractable pen underneath its body that could be lowered to draw shapes, pictures, and patterns.
By the early 1970s, the Logo group was part of the MIT AI Lab, which Papert had cofounded with the computer scientist Marvin Minsky. The kid-focused learning environment provided a way to write stories, a way to draw, a way to make music, and a way to explore a space with a programmable object. Papert imagined that the Logo philosophy would empower children as “intellectual agents” who could derive their own understanding of math concepts and create connections with other disciplines ranging from psychology and the physical sciences to linguistics and logic.
But the reality outside the MIT AI Lab challenged that vision. In short, teaching Logo to elementary school students was both time- and resource-­intensive. In 1977-’78, an NSF grant funded a yearlong study of Logo at a public school; it was meant to include all the school’s sixth graders, but the grant covered only four computers, which meant that only four students could participate at the same time. The research team found that most of the students who were chosen to participate did learn to create programs and express math concepts using Logo. However, when the study ended and the students moved on, their computing experiences were largely left in the past.
Related Story A new kind of machine-learning model is set to improve automated decision making in finance, health care, ad targeting, and more.
As that project was wrapping up, the Logo team implemented a larger-scale partnership at the private Lamplighter School in Dallas, cosponsored by Texas Instruments. At this school, with a population of 450 students in kindergarten through fourth grade, 50 computers were available. Logo was not taught as a standalone subject but was integrated into the curriculum—something that would only have been possible at a small private school like this one.
The Lamplighter project—and the publication around the same time of Papert’s book Mindstorms , in which the mathematician enthused about the promise of computing to revolutionize education—marked a high point for Logo. But those creative educational computing initiatives were short-lived. A major obstacle was simply the incredibly slow-­moving and difficult-to-change bureaucracy of American public education. Moreover, promising pilots either did not scale or were unable to achieve the same results when introduced into a system fraught with resource inequities.
But another issue was that the increasingly widespread availability of personal computers by the 1980s challenged Logo’s revolutionary vision. As computers became consumer objects, software did, too. People no longer needed to learn to code to be able to use a computer. In the case of American education, computers in the classroom became less about programming and more about educational games, word processing, and presentations. While BASIC and Logo continued to be taught in some schools around the United States, for many students the effort of writing some code to, say, alphabetize a list seemed impractical—disconnected from their everyday lives and their imagined futures.
Corporate coding Schools weren’t the only setting for learn-to-code movements, however. In the 1960s the Association for Computing Machinery (ACM), which had been established as a professional organization in the 1940s, spearheaded similar efforts to teach coding to young people. From 1968 to 1972, ACM members operating through their local chapters established programs across the United States to provide training in computing skills to Black and Hispanic Americans. During the same years, government and social welfare organizations offered similar training, as did companies including General Electric. There were at least 18 such programs in East Coast and California cities and one in St. Louis, Missouri. Most, but not all, targeted young people. In some cases, the programs taught mainframe or keypunch operation, but others aimed to teach programming in the common business computing languages of the time, COBOL and FORTRAN.
Did the students in these programs learn? The answer was emphatically yes. Could they get jobs as a result, or otherwise use their new skills? The answer to that was often no. A program in San Diego arranged for Spanish-speaking instructors and even converted a 40-foot tractor-trailer into a mobile training facility so that students—who were spread across the sprawling city—would not have to spend upwards of an hour commuting by bus to a central location. And in the Albany-Schenectady area of New York, General Electrical supported a rigorous program to prepare Black Americans for programming jobs. It was open to people without high school diplomas, and to people with police records; there was no admissions testing. Well over half the people who started this training completed it.
In the ’60s, Dartmouth students had unprecedented computer access thanks to a time-sharing network that connected multiple terminals via telephone line to a central computer.
Yet afterwards many could not secure jobs, even entry-level ones. In other cases, outstanding graduates were offered jobs that paid $105 per week—not enough to support themselves and their families. One consultant to the project suggested that for future training programs, GE should “give preference to younger people without families” to minimize labor costs for the company.
The very existence of these training endeavors reflected a mixed set of motivations on the part of the organizers, who were mostly white, well-off volunteers. These volunteers tended to conflate living in an urban area with living in poverty, and to assume that people living in these conditions were not white, and that all such people could be lumped together under the heading of “disadvantaged.” They imagined that learning to code would provide a straightforward path out of poverty for these participants. But their thinking demonstrated little understanding of the obstacles imposed by centuries of enslavement, unpaid labor, Jim Crow violence, pay discrimination, and segregated and unequal education, health care, and housing. Largely with their own interests in mind, they looked to these upskilling programs as a panacea for racial inequality and the social instability it fueled. A group from a Delaware ACM chapter, a conference report suggested, believed that “in these days of urban crisis, the data processing industry offers a unique opportunity to the disadvantaged to become involved in the mainstream of the American way of life.” If success is defined as getting a steadily increasing number of Black and Hispanic men and women good jobs in the computing profession—and, by extension, giving them opportunities to shape and inform the technologies that would remake the world—then these programs failed. As the scholar Arvid Nelsen observed, while some volunteers “may have been focused on the needs and desires of the communities themselves,” others were merely seeking a Band-Aid for “civil unrest.” Meanwhile, Nelsen notes, businesses benefited from “a source of inexpensive workers with much more limited power.” In short, training people to code didn’t mean they would secure better, higher-­paying, more stable jobs—it just meant that there was a larger pool of possible entry-level employees who would drive down labor costs for the growing computer industry.
In fact, observers identified the shortcomings of these efforts even at the time. Walter DeLegall, a Black computing professional at Columbia University, declared in 1969 that the “magic of data processing training” was no magic bullet, and that quick-fix training programs mirrored the deficiencies of American public education for Black and Spanish-speaking students. He questioned the motivation behind them, suggesting that they were sometimes organized for “commercial reasons or simply to de-fuse and dissipate the burgeoning discontent of these communities” rather than to promote equity and justice.
The Algebra Project There was a grassroots effort that did respond to these inadequacies, by coming at the computing revolution from an entirely different angle.
During the late 1970s and early 1980s, the civil rights activist Robert P. Moses was living with his family in Cambridge, Massachusetts, where his daughter Maisha attended the public Martin Luther King School and he volunteered teaching algebra.
 He noticed that math groups were unofficially segregated by race and class, and that much less was expected of Black and brown students. Early on, he also identified computers—and knowledge work dependent on computers —as a rising source of economic, political, and social power. Attending college was increasingly important for attaining that kind of power, and Moses saw that one key to getting there was a foundation in high school mathematics, particularly algebra. He established the Algebra Project during the early 1980s, beginning in Cambridge public schools and supported by a MacArthur “genius grant” that he received in 1982.
In a book that he later coauthored, Radical Equations: Civil Rights from Mississippi to the Algebra Project , Moses clearly articulated the connections between math, computing, economic justice, and political power, especially for Black Americans. “The most urgent social issue affecting poor people and people of color is economic access. In today’s world, economic access and full citizenship depend crucially on math and science literacy,” he wrote. “The computer has become a cultural force as well as an instrument of work [and] while the visible manifestation of the technological shift is the computer, the hidden culture of computers is math.” Arming Black students with the tools of math literacy was radical in the 1980s precisely because it challenged power dynamics.
Moses had earned his bachelor’s degree at Hamilton College in New York and a master’s degree at Harvard University before teaching math at the Horace Mann School in the Bronx from 1958 to 1961. For him, arming Black students with the tools of math literacy was radical in the 1980s precisely because access to technology meant access to power. “Who’s going to gain access to the new technology?” he asked. “Who’s going to control it? What do we have to demand of the educational system to prepare for the new technological era?” Moses mobilized students and parents alike to ensure that algebra was offered to all students at the Martin Luther King School. He devised new approaches to teaching the subject, and drawing on his experience with grassroots civil rights organizing, enrolled students to teach their peers. College admission rates and test scores rose at the school, and the Algebra Project spread to at least 22 other sites across 13 states. It focused on math because Moses identified math as the foundation of coding, and the stakes were always connected to economic justice and educational equity in an economy built on algorithms and data.
Moses made explicit “a number of issues that are often hidden in coding discourse,” the historian Janet Abbate has observed. “He questioned the implied meritocracy of ‘ability grouping’ … he attacked the stereotype that Black people aren’t interested in STEM … [and] he emphasized that social skills and community were an essential part of overcoming students’ alienation from technology.” Moses died in 2021, but the Algebra Project lives on, now in collaboration with a group called the “We the People” Math Literacy for All Alliance. The curriculum he pioneered continues to be taught, and the Algebra Project’s 2022 conference again called attention to the need for better public education across the United States, especially for Black, brown, and poor children, “to make full participation in American democracy possible.” Rewind, reboot: Coding makes a comeback In the past decade, a new crop of more targeted coding programs has emerged. In 2014, for example, the activist and entrepreneur Van Jones collaborated with the musician Prince to launch #YesWeCode, targeting what they called “low-opportunity communities.” In doing so, they called attention to ongoing educational and economic inequities across the United States.
One of #YesWeCode’s early efforts was a youth-oriented hackathon at the Essence Music Festival in New Orleans in 2014 that encouraged kids to connect coding with issues that mattered to them. As #YesWeCode’s chief innovation officer, Amy Henderson, explained , “A lot of the people who develop apps today are affluent white men, and so they build apps that solve their communities’ problems,” such as Uber. “Meanwhile,” she continued, “one of our young people built an app that sends reminders of upcoming court dates. That’s an issue that impacts his community, so he did something about it.” #YesWeCode has since morphed into Dream.Tech, an arm of Dream.org, a nonprofit that advocates for new legislation and new economic policies to remedy global climate change, the racialized mass incarceration system in the United States, and America’s long history of poverty. (Its other arms are called Dream.Green and Dream.Justice.) Recently, for example , Dream.org pushed for legislation that would erase long-standing racial disparities in sentencing for drug crimes. As a whole, Dream.org demonstrates an expansive vision of tech justice that can “make the future work for everyone.” Another initiative, called Code2040 (the name refers to the decade during which people of color are expected to become a demographic majority in the United States), was launched in 2012. It initially focused on diversifying tech by helping Black and Latino computer science majors get jobs at tech companies. But its mission has expanded over the past decade. Code2040 now aims for members of these communities to contribute to the “innovation economy” in all roles at all levels, proportional to their demographic representation in the United States. The ultimate vision: “equitable distribution of power in an economy shaped by the digital revolution.” Technological solutionism may persist, but there’s an increasing recognition that coding training alone is not enough.
Both Code2040’s current CEO, Mimi Fox Melton, and her predecessor, Karla Monterroso, have argued that coding training alone is not enough to guarantee employment or equalize educational opportunities. In an openly critical letter to the tech industry published after the murder of George Floyd in 2020, they noted that 20% of computer science graduates and 24% of coding boot camp grads are Black or Latino, compared with only 6% of tech industry workers. Fox Melton and Monterroso observed: “High-wage work in America is not colorblind; it’s not a meritocracy; it’s white. And that goes doubly for tech.” These recent coding education efforts ask important questions: Code for what? Code for whom? Meanwhile, several other recent initiatives are focused on the injustices both caused and reflected by more recent aspects of the digital economy, particularly artificial intelligence. They aim to challenge the power of technological systems, rather than funneling more people into the broken systems that already exist. Two of these organizations are the Algorithmic Justice League (AJL) and the Ida B. Wells Just Data Lab.
Joy Buolamwini, a computer scientist, founded the Algorithmic Justice League after discovering as a grad student at MIT that a facial-analysis system she was using in her work didn’t “see” her dark-skinned face.
 (She had to don a white mask for the software to recognize her features.) Now, the AJL’s mission is “leading a cultural movement towards equitable and accountable AI,” and its tagline reads: “Technology should serve all of us. Not just the privileged few.” The AJL publishes research about the harms caused by AI, as well as tracking relevant legislation, journalistic coverage, and personal stories, all with the goal of moving toward more equitable and accountable AI. Buolamwini has testified to Congress and in state hearings on these issues.
Related Story Telecom companies have long resisted letting scientific sensors piggyback on their subsea cables—until now.
The Ida B. Wells Just Data Lab , founded and directed by Ruha Benjamin, a Princeton professor of African American studies, is devoted to rethinking and retooling “the relationship between stories and statistics, power and technology, data and justice.” Its website prominently features a quote from the journalist and activist Ida B. Wells, who systematically collected data and reported on white mob violence against Black men during the 1890s. Her message: “The way to right wrongs is to turn the light of truth upon them.” One of the lab’s efforts, the Pandemic Portal, used data to highlight racial inequality in the context of covid-19, focusing on 10 different areas: arts, mutual aid, mental health, testing and treatments, education, prisons, policing, work, housing, and health care. It provided data-based resources and tools and offered evidence that these seemingly disparate categories are, in fact, deeply interwoven.
Technological solutionism may persist in Silicon Valley campuses and state house corridors, but individuals, organizations, and communities are increasingly recognizing that coding instruction alone won’t save them. (Even Seymour Papert expressed skepticism of such efforts back in 1980, writing in Mindstorms that “a particular subculture, one dominated by computer engineers, is influencing the world of education to favor those school students who are most like that subculture.”) Learning to code won’t solve inequality or poverty or remedy the unjust structures and systems that shape contemporary American life. A broader vision for computer science can be found in the model proposed by Learning for Justice , a project of the Southern Poverty Law Center that works to provide educational resources and engage local communities, with the ultimate goals of addressing injustice and teaching students and the communities they come from to wield power together. The project’s d igital literacy framework highlights important focus areas far beyond a narrow emphasis on learning to code, including privacy concerns, uncivil online behavior, fake news, internet scams, ideological echo chambers, the rise of the alt-right, and online radicalization.
These new frameworks of digital literacy, tech diversity, and algorithmic justice go beyond coding to prepare individuals to meaningfully question, evaluate, and engage with today’s array of digital spaces and places. And they prepare all of us to imagine and articulate how those spaces and places can better serve us and our communities.
Joy Lisi Rankin is a research associate professor in the Department of Technology, Culture, and Society at New York University and author of A People’s History of Computing in the United States.
hide by Joy Lisi Rankin Share linkedinlink opens in a new window twitterlink opens in a new window facebooklink opens in a new window emaillink opens in a new window This story was part of our May/June 2023 issue.
Popular This new data poisoning tool lets artists fight back against generative AI Melissa Heikkilä Everything you need to know about artificial wombs Cassandra Willyard Deepfakes of Chinese influencers are livestreaming 24/7 Zeyi Yang How to fix the internet Katie Notopoulos Deep Dive Computing What’s next for the world’s fastest supercomputers Scientists have begun running experiments on Frontier, the world’s first official exascale machine, while facilities worldwide build other machines to join the ranks.
By Sophia Chen archive page AI-powered 6G networks will reshape digital interactions The convergence of AI and communication technologies will create 6G networks that make hyperconnectivity and immersive experiences an everyday reality for consumers.
By MIT Technology Review Insights archive page The power of green computing Sustainable computing practices have the power to both infuse operational efficiencies and greatly reduce energy consumption, says Jen Huffstetler, chief product sustainability officer at Intel.
By MIT Technology Review Insights archive page How this Turing Award–winning researcher became a legendary academic advisor Theoretical computer scientist Manuel Blum has guided generations of graduate students into fruitful careers in the field.
By Sheon Han archive page Stay connected Illustration by Rose Wong Get the latest updates from MIT Technology Review Discover special offers, top stories, upcoming events, and more.
Enter your email Thank you for submitting your email! It looks like something went wrong.
We’re having trouble saving your preferences. Try refreshing this page and updating them one more time. If you continue to get this message, reach out to us at customer-service@technologyreview.com with a list of newsletters you’d like to receive.
The latest iteration of a legacy Advertise with MIT Technology Review © 2023 MIT Technology Review About About us Careers Custom content Advertise with us International Editions Republishing MIT News Help Help & FAQ My subscription Editorial guidelines Privacy policy Terms of Service Write for us Contact us twitterlink opens in a new window facebooklink opens in a new window instagramlink opens in a new window rsslink opens in a new window linkedinlink opens in a new window
