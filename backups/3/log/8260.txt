Open Navigation Menu To revist this article, visit My Profile, then View saved stories.
Close Alert Backchannel Business Culture Gear Ideas Science Security Merch To revist this article, visit My Profile, then View saved stories.
Close Alert Search Backchannel Business Culture Gear Ideas Science Security Merch Podcasts Video Artificial Intelligence Climate Games Newsletters Magazine Events Wired Insider Jobs Coupons Zeb Larson Ideas ChatGPT Isn't Coming for Your Coding Job Photo-illustration: WIRED Staff; Getty Images Save this story Save Save this story Save Software engineers have joined the ranks of copy editors, translators, and others who fear that they‚Äôre about to be replaced by generative AI.
 But it might be surprising to learn that coders have been under threat before. New technologies have long promised to ‚Äúdisrupt‚Äù engineering, and these innovations have always failed to get rid of the need for human software developers. If anything, they often made these workers that much more indispensable.
To understand where handwringing about the end of programmers comes from‚Äîand why it‚Äôs overblown‚Äîwe need to look back at the evolution of coding and computing. Software was an afterthought for many early computing pioneers, who considered hardware and systems architecture the true intellectual pursuits within the field. To the computer scientist John Backus, for instance, calling coders ‚Äúprogrammers‚Äù or ‚Äúengineers‚Äù was akin to relabeling janitors ‚Äúcustodians,‚Äù an attempt at pretending that their menial work was more important than it was. What‚Äôs more, many early programmers were women, and sexist colleagues often saw their work as secretarial. But while programmers might have held a lowly position in the eyes of somebody like Backus, they were also indispensable‚Äîthey saved people like him from having to bother with the routine business of programming, debugging, and testing.
Even though they performed a vital‚Äîif underappreciated‚Äîrole, software engineers often fit poorly into company hierarchies. In the early days of computers, they were frequently self-taught and worked on programs that they alone had devised, which meant that they didn‚Äôt have a clear place within preexisting departments and that managing them could be complicated. As a result, many modern features of software development were developed to simplify, and even eliminate, interactions with coders. FORTRAN was supposed to allow scientists and others to write programs without any support from a programmer. COBOL‚Äôs English syntax was intended to be so simple that managers could bypass developers entirely. Waterfall-based development was invented to standardize and make routine the development of new software. Object-oriented programming was supposed to be so simple that eventually all computer users could do their own software engineering.
Zeb Larson is a writer and software engineer based in Columbus, Ohio. Prior to becoming a developer, he earned a PhD in history from Ohio State University. He‚Äôs currently working on a history of computers for The Experiment.
In some cases, programmers were resistant to these changes, fearing that programs like compilers might drive them out of work. Ultimately, though, their concerns were unfounded. FORTRAN and COBOL, for instance, both proved to be durable, long-lived languages, but they didn‚Äôt replace computer programmers. If anything, these innovations introduced new complexity into the world of computing that created even greater demand for coders. Other changes like Waterfall made things worse, creating more complicated bureaucratic processes that made it difficult to deliver large features. At a conference sponsored by NATO in 1968, organizers declared that there was a ‚Äúcrisis‚Äù in software engineering. There were too few people to do the work, and large projects kept grinding to a halt or experiencing delays.
Bearing this history in mind, claims that ChatGPT will replace all software engineers seem almost assuredly misplaced. Firing engineers and throwing AI at blocked feature development would probably result in disaster, followed by the rehiring of those engineers in short order. More reasonable suggestions show that large language models (LLMs) can replace some of the duller work of engineering. They can offer autocomplete suggestions or methods to sort data, if they‚Äôre prompted correctly. As an engineer, I can imagine using an LLM to ‚Äúrubber duck‚Äù a problem, giving it prompts for potential solutions that I can review. It wouldn‚Äôt replace conferring with another engineer, because LLMs still don‚Äôt understand the actual requirements of a feature or the interconnections within a code base, but it would speed up those conversations by getting rid of the busy work.
ChatGPT could still upend the tech labor market through expectations of greater productivity. If it eliminates some of the more routine tasks of development (and puts Stack Overflow out of business), managers may be able to make more demands of the engineers who work for them. But computing history has already demonstrated that attempts to reduce the presence of developers or streamline their role only end up adding complexity to the work and making those workers even more necessary. If anything, ChatGPT stands to eliminate the duller work of coding much the same way that compilers ended the drudgery of having to work in binary, which would make it easier for developers to focus more on building out the actual architecture of their creations.
The computer scientist Edsger Dijkstra once observed, ‚ÄúAs long as there were no machines, programming was no problem at all; when we had a few weak computers, programming became a mild problem, and now we have gigantic computers, programming had become an equally gigantic problem.‚Äù We‚Äôve introduced more and more complexity to computers in the hopes of making them so simple that they don‚Äôt need to be programmed at all. Unsurprisingly, throwing complexity at complexity has only made it worse, and we‚Äôre no closer to letting managers cut out the software engineers. If LLMs can match the promises of their creators, we may very well cause it to accelerate further.
WIRED Opinion publishes articles by outside contributors representing a wide range of viewpoints. Read more opinions here.
 Submit an op-ed at ideas@wired.com.
Culture Taylor Swift and Beyonc√© Are Resurrecting the American Movie Theater Angela Watercutter Gear The Best Home Depot Black Friday Deals Matt Jancer Gear Apple‚Äôs Pledge to Support RCS Messaging Could Finally Kill SMS Boone Ashworth Business Sweden‚Äôs Tesla Blockade Is Spreading Morgan Meaker You Might Also Like ‚Ä¶ üì® Make the most of chatbots with our AI Unlocked newsletter Taylor Swift, Star Wars, Stranger Things , and Deadpool have one man in common Generative AI is playing a surprising role in Israel-Hamas disinformation The new era of social media looks as bad for privacy as the last one Johnny Cash‚Äôs Taylor Swift cover predicts the boring future of AI music Your internet browser does not belong to you üîå Charge right into summer with the best travel adapters , power banks , and USB hubs Topics programming software ChatGPT computer science artificial intelligence Meghan O'Gieblyn Facebook X Pinterest YouTube Instagram Tiktok More From WIRED Subscribe Newsletters Mattresses Reviews FAQ Wired Staff Coupons Black Friday Editorial Standards Archive Contact Advertise Contact Us Customer Care Jobs Press Center RSS Accessibility Help Cond√© Nast Store Do Not Sell My Personal Info ¬© 2023 Cond√© Nast. All rights reserved. Use of this site constitutes acceptance of our User Agreement and Privacy Policy and Cookie Statement and Your California Privacy Rights.
WIRED may earn a portion of sales from products that are purchased through our site as part of our Affiliate Partnerships with retailers. The material on this site may not be reproduced, distributed, transmitted, cached or otherwise used, except with the prior written permission of Cond√© Nast.
Ad Choices Select international site United States LargeChevron UK Italia Jap√≥n Czech Republic & Slovakia
