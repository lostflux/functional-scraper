Featured Topics Newsletters Events Podcasts Featured Topics Newsletters Events Podcasts How this Turing Award–winning researcher became a legendary academic advisor Theoretical computer scientist Manuel Blum has guided generations of graduate students into fruitful careers in the field.
By Sheon Han archive page Ross Mantle Every academic field has its superstars. But a rare few achieve superstardom not just by demonstrating individual excellence but also by consistently producing future superstars. A notable example of such a legendary doctoral advisor is the Princeton physicist John Archibald Wheeler. A dissertation was once written about his mentorship, and he advised Richard Feynman, Kip Thorne, Hugh Everett (who proposed the “many worlds” theory of quantum mechanics), and a host of others who could collectively staff a top-tier physics department. In ecology, there is Bob Paine, who discovered that certain “keystone species” have an outsize impact on the environment and started a lineage of influential ecologists. And in journalism, there is John McPhee, who has taught generations of accomplished journalists at Princeton since 1975.
Computer science has its own such figure: Manuel Blum, who won the 1995 Turing Award—the Nobel Prize of computer science. Blum’s métier is theoretical computer science, a field that often escapes the general public’s radar. But you certainly have come across one of Blum’s creations: the “Completely Automated Public Turing test to tell Computers and Humans Apart,” better known as the captcha—a test designed to distinguish humans from bots online.
Related Story Scientists hope to leverage mRNA for a bevy of vaccines and therapeutics.
“I don’t know what his secret has been. But he has been a tremendously successful advisor,” says Michael Sipser, a theoretical computer scientist at MIT who was advised by Blum, referring to the “extraordinary number of PhD students” who have worked with him and then gone on to make an impact in the field. “It is extraordinary in the literal sense of that word—outside the ordinary.” Three of Blum’s students have also won Turing Awards; many have received other high honors in theoretical computer science, such as the Gödel Prize and the Knuth Prize; and more than 20 hold professorships at top computer science departments. There are five, for example, at MIT and three at Carnegie Mellon University (where there were four until one left to found Duolingo).
Blum is also distinguished by the great plurality of subfields that his students work in. When Mor Harchol-Balter, a professor of computer science at Carnegie Mellon, arrived at the University of California, Berkeley, as a PhD student, she quickly realized that she wanted to work with him. “Manuel was warm, smiling, and just immediately emanated kindness,” Harchol-Balter told me. Her specialty, queueing theory, had little overlap with Blum’s, but he took her on. “Every professor I know, if you start working on what’s way out of their area, they would tell you to go find somebody else,” she said. “Not Manuel.” A few months ago, as I was reading about some of the most significant yet counterintuitive ideas in modern theoretical computer science, I realized that the vast majority of the researchers responsible for that work had been advised by Blum. I wondered whether there might be some formula to his success. Of course, it’s presumptuous to think such an intimately human process can be distilled into an algorithm. However, conversations with his students gave me a sense of his approach and revealed consistent themes. Many spoke warmly of him: I often heard some version of “I could talk about Manuel all day” or “Manuel is my favorite topic of conversation.” The finer points of mentorship aside, what I learned was at least proof that kindness can beget greatness.
Slow beginning Manuel Blum is married to Lenore Blum, an accomplished mathematician and computer scientist, who has also been at the forefront of promoting diversity in math and computing (among other things, she founded America’s first computer science department at a women’s college and helped CMU’s computer science department achieve 50-50 gender parity). They are both now emeritus professors at CMU and Manuel Blum is an emeritus professor at UC Berkeley; they split their time between the two coasts.
One day in August, I joined the couple for breakfast at their house in Pittsburgh. Breezy in his manner, Blum, at 85, still has a schoolboy’s smile and frequently erupts into a resonant laugh; he is charismatic in a way typical of people who are utterly oblivious to their charisma. (When he says “WON-derful,” which he frequently does, you can practically hear “WON” in all caps.) The Blums, who recently celebrated their 62nd anniversary, still shuttlecock research ideas, enthuse over emails from their former students, and complete each other’s memories—some dating from their life in Venezuela, where they met as kids.
Manuel Blum was born in 1938 in Caracas to Jewish parents who had moved from Romania. His first language was German, which his parents spoke at home. But when they moved to the Bronx, his family realized that people did not want to hear German spoken. The year was 1942, and the country was at war. After switching to Spanish at home, he quickly lost his fluency in German. But when he had to learn English for school, he soon forgot Spanish as well.
At one point, Blum says, he was listening to both languages but found himself understanding neither. “I remember thinking to myself, ‘Very interesting—I don’t have a language. I couldn’t express myself through language. How was it that I was able to think?’” he told me. In a lucid moment of metacognition—an act that befits a future theorist of abstract concepts—he realized: You don’t need language to think.
“He is completely original and goes off and does what he thinks is interesting and important. And often it turns out to be something really significant.” Likely because of his language difficulties, Blum’s second-grade teacher warned his mother that while he might manage to complete high school, he might not go to college. “But I wanted to be smarter. So I asked my father, ‘What can I do to get smarter?’” His father answered that if he understood how the brain works, he could be smart. The conversation marked the inception of Blum’s interest in studying consciousness (something he and Lenore Blum now research full-time, often assisted by their son, the computer scientist Avrim Blum).
Blum was ultimately accepted to MIT, but he struggled the first year, until a friend noticed that his approach to studying physics—owing to Blum’s training at a military academy he went to before college—was heavy on memorization. Blum recalls his friend saying, “You don’t memorize. You memorize only ‘ F = ma ’ and a few things like that. When you need a formula, you derive it.” Soon, his grades started climbing. “I went from being a Xerox machine to being a thinker. I really enjoyed thinking,” he says.
To pursue his interest in the brain, Blum took a course that involved reading multiple volumes of the standard edition of Freud’s works. But they didn’t offer much in the way of satisfactory answers. Then his professor told him that he should introduce himself to Warren S. McCulloch, known for very early research on neural networks and pioneering work in cybernetics.
Blum read some of McCulloch’s papers and was able to prove a couple of theorems in mathematical biophysics, and McCulloch took him on in his MIT lab. “A wonderful person. A magnanimous person. Anything I wanted to do, he was supportive,” Blum says.
McCulloch’s lab focused on both the rigorous mathematical work of modeling the neuron and the experimental process of studying the brain to understand how it functions. But what Blum couldn’t study in the lab was consciousness. The topic was taboo at the time. Many felt that subjective mental phenomena weren’t fit for scientific inquiry, and there were few tools available in any case. (The fMRI, for example, which is an imaging technique that maps brain activity, wouldn’t be developed until 1990.) Blum would revisit the topic occasionally as he transitioned away from electrical engineering to mathematics and computer science in graduate school. As he pursued his graduate work at MIT, he became captivated by a branch of theoretical computer science known as recursive function theory—now more commonly referred to as computability theory—and began searching for a thesis advisor. Soon, he found Marvin Minsky, the mathematician and computer scientist, who was a pioneer of artificial intelligence. Minsky (who had an office full of mechanical hands) often dropped by McCulloch’s lab to demonstrate his new machines and discuss mathematical problems.
After studying computational complexity and computability for his thesis, Blum received his PhD in 1964. At the time, computational complexity theory represented the hinterlands of computer science. It wasn’t until 1971 that Stephen Cook formulated the foundational question of the field, “P vs. NP” —which essentially asks whether every problem whose solution can be checked quickly can also be solved quickly.
But Blum found a productive home in Berkeley’s electrical engineering and computer science department. At MIT, he had helped form the contours of computational complexity theory. At Berkeley, he showed how this highly abstract field could also have useful applications in areas such as cryptography and program checking—a method that uses an algorithm to verify the correctness of a computer program.
The kinds of questions Blum poses read like paradoxes and have a somewhat playful quality, making complexity theory and cryptography sound almost like a subgenre of sci-fi. “He is completely original and goes off and does what he thinks is interesting and important. And often it turns out to be something really significant,” Sipser told me.
In his seminal paper “ Coin Flipping by Telephone ,” the question that he poses is: “Alice and Bob want to flip a coin by telephone. (They have just divorced, live in different cities, and want to decide who gets the car.)” Let’s say that Alice calls “heads” and Bob says she lost; how does she trust that he is being truthful? And how could Bob trust Alice if the situation were reversed? What sounds like a riddle addresses a fundamental problem in cryptography: How can two parties engage in trustworthy exchanges over a communication channel in such a way that neither party can cheat? Blum showed that this can be achieved using the concept of “commitment.” In a simplified analogy, the idea is that Alice gives Bob a locked box with her prediction inside, but without the key. This prevents Alice from altering her prediction and stops Bob from discovering Alice’s guess prematurely. Once Bob tosses the coin, Alice hands over the key to open the box.
“Work with me” When you ask Blum about the secrets of good mentorship, he reacts with a sheepish head scratch, attributing his students’ success to their own talents. “Students come up with wonderful ideas, and people don’t realize how wonderful they are. The only thing I can say is that, more than most, I really enjoy the ideas that the students have,” he told me. “I have learned from each of them.” His response left me puzzled, especially after I heard from his students that Blum never criticized their ideas or prescribed research directions. Offering full autonomy and boundless encouragement sounded wonderful in theory, but I was mystified as to how it worked in practice—how did students receive the occasional course correction or hyper-specific advice that is often essential in academic pursuits? Still, it’s not that he was dodging my question. He is not so much a magician who refuses to give away his tricks as one who is himself astonished by what has been conjured around him.
One thing I came to understand about Blum’s advising style is that when he says “Students are here to teach me,” he truly means it, with all that entails. While it’s easy to pay lip service to the principle of “treating a student as a colleague,” Ryan Williams, a professor of computer science at MIT who studied with Blum, told me that working together made him really feel like one. What this means, in concrete terms, is that Blum imparted to his students a sense of pedagogical responsibility: he was really expecting to learn from them at every weekly meeting, which in turn meant they had to understand their ideas to the bone.
“During my first few months of working with him, I thought he was testing me. And then I realized that was just him,” Russell Impagliazzo, a professor of computer science at the University of California, San Diego, told me. “You had to learn how to say things so that Manuel could understand them. And that’s the most valuable skill that he gives his students, like the skill of learning to swim by being thrown into a pool: the ability to translate what you’re saying into more concrete terms. This skill proves invaluable when you are teaching a class or writing a grant proposal.” Former students describe Blum as unwaveringly positive, saying he had other ways besides criticism to steer them away from dead ends. “He is always smiling, but you can see he smiles wider when he likes something. And oh, we wanted that big smile,” says Ronitt Rubinfeld, a professor of electrical engineering and computer science at MIT.
What would it be like to have someone like Blum in your corner? What kinds of audacious ideas can take root when someone listens to you with absolutely no judgment? Behind the general positivity, Rubinfeld says, is a fine taste for interesting ideas. Students could trust they were being guided in the right direction. Come up with a boring idea? Blum, who is known for his terrible memory, would have mostly forgotten it by your next meeting.
When Harchol-Balter was in graduate school, she says, Blum never told her what to work on and instead guided her by means of questions: “Manuel is fantastic at asking questions. Manuel excels at asking questions.” Blum also “really makes sure that each student has a special area to develop,” Lenore Blum told me. “I don’t think he’s asked a student to ever do the next iteration of someone else’s work,” she said. “But he’ll say, ‘Work with me, and we’ll do something brand new.’” Working on a new idea is risky. But Blum’s encouragement, coupled with his track record of spotting fruitful lines of inquiry, gave his students confidence to keep going in bold directions while enduring criticism and self-doubt. “There’s a huge difference [between] Manuel’s advising style and everyone else’s in the world,” says Impagliazzo. “Manuel’s advising style is simply to listen to you and make you seem really, really important. Like what you’re doing is the most amazing thing in the world.” Harchol-Balter says this is the magic she is now trying to emulate with her students. “Whenever I had an idea, whatever it was, he somehow made me feel like this was the most brilliant idea that had ever been invented,” she remembers. She felt that every idea could be “a multimillion-dollar breakthrough,” which allowed her to stay committed to her line of research, undeterred by external influences or trends. “He creates this feeling of supreme confidence—not just confidence, but like, ‘You. Are. Brilliant,’” she adds. “Having somebody beside you all those six years, when you’re feeling the most vulnerable, constantly boosting your confidence … It’s amazing. And that’s why his students are so great.” Related Story Astronomy is leading the way in making science more accessible through sonification—and the results sound amazing.
Excellence in academia, as in many other fields, is about both what you do and how you do it. You need to identify a promising topic and have the technical ability to execute it. A technically flawless idea without original insight can be trivial; a radically original idea without proper execution might never fully develop, while a bold idea powered by misplaced confidence could hit a dead end.
The psychological reassurance students get from Blum may come in part from his superhuman level of aplomb. “He never seems stressed out,” says his son, Avrim Blum. “In the real world, there are deadlines and stresses, but he never showed any of that. At least I never saw it.” I’m still awed by his ability to mask inner turbulence—something that affects everyone—so well that it remains invisible even to his closest observers, including his own son. It’s a source of stability that students can rely on throughout their graduate studies. “I was more comfortable and more relaxed in grad school because I felt like he had things under control for me,” Williams told me. “If there were any difficulties, he would help. He had my back. He was going to sort things out.” Speaking with Blum’s students, I felt a pang of jealousy. What would it be like to have someone like Blum in your corner during your most vulnerable moments? And how many direct criticisms you’ve faced could have been reformulated into questions? What kinds of audacious ideas can take root when someone listens to you with absolutely no judgment? But even as Blum’s students claim they are still bewildered by the “magic” and “mystery” of their advisor’s approach, they have become accomplished teachers and advisors in their own right. Umesh Vazirani, a theoretical computer scientist at Berkeley, told me that he has thought a lot about Blum’s secrets. He said the essence can be expressed this way: “You respect every student, and you let them develop into whatever they want to be.” Vazirani, who has advised a number of superstars in the field himself, believes that in education, “the most important thing is not to break anything. Cause no damage.” The potency of the Blumian approach to advising isn’t domain specific, as illustrated by George Saunders’s reflections on his writing teacher, Tobias Wolff. Writing teachers have “so much power,” Saunders has written: They could mock us, disregard us, use us to prop themselves up. But our teachers, if they are good, instead do something almost holy, which we never forget: they take us seriously. They accept us as new members of the guild.
They tolerate the under-wonderful stories we write, the dopy things we say, our shaky-legged aesthetic theories, our posturing, because they have been there themselves.
We say: I think I might be a writer.
They say: Good for you. Proceed.
On my last day in Pittsburgh, I noticed a photo of Blum’s old advisor, Warren S. McCulloch, behind Blum’s desk in his home office. It was in a prominent place where someone else might’ve chosen to display a family heirloom or showcase an autographed photo of himself shaking a president’s hand. (McCulloch died in 1969, only a few years after Blum began his professorship.) Out of curiosity, I pointed out the photo’s prominent position. “Yes, because he is always with me,” Blum replied. “Warren was Manuel’s spiritual father in every way,” added Lenore.
As I made my way back to the airport, I remembered a book called Surviving Death, by the philosopher Mark Johnston. In the book, Johnston postulates that a good person could “quite literally” survive death by redirecting self-interest toward the well-being of future people. This forfeiture doesn’t spell the dissolution of the self but, rather, the expansion of it, allowing the person to live on in the “onward rush of humankind.” A line from the book unfolded, with a time-release effect, in my head: “Every time a baby is born, a good person acquires a new face.” Behind every one of Blum’s knowing smiles, it may well have been McCulloch himself, nodding, imparting a blessing: “Wonderful idea. Proceed.” Sheon Han is a writer based in Palo Alto, California.
hide by Sheon Han Share linkedinlink opens in a new window twitterlink opens in a new window facebooklink opens in a new window emaillink opens in a new window This story was part of our November/December 2023 issue.
Popular This new data poisoning tool lets artists fight back against generative AI Melissa Heikkilä Everything you need to know about artificial wombs Cassandra Willyard Deepfakes of Chinese influencers are livestreaming 24/7 Zeyi Yang How to fix the internet Katie Notopoulos Deep Dive Computing What’s next for the world’s fastest supercomputers Scientists have begun running experiments on Frontier, the world’s first official exascale machine, while facilities worldwide build other machines to join the ranks.
By Sophia Chen archive page AI-powered 6G networks will reshape digital interactions The convergence of AI and communication technologies will create 6G networks that make hyperconnectivity and immersive experiences an everyday reality for consumers.
By MIT Technology Review Insights archive page The power of green computing Sustainable computing practices have the power to both infuse operational efficiencies and greatly reduce energy consumption, says Jen Huffstetler, chief product sustainability officer at Intel.
By MIT Technology Review Insights archive page Inside the quest for unbreakable encryption Cryptographers want encryption schemes that are impossible for tomorrow’s quantum computers to crack. There’s only one catch: they might not exist.
By Stephen Ornes archive page Stay connected Illustration by Rose Wong Get the latest updates from MIT Technology Review Discover special offers, top stories, upcoming events, and more.
Enter your email Thank you for submitting your email! It looks like something went wrong.
We’re having trouble saving your preferences. Try refreshing this page and updating them one more time. If you continue to get this message, reach out to us at customer-service@technologyreview.com with a list of newsletters you’d like to receive.
The latest iteration of a legacy Advertise with MIT Technology Review © 2023 MIT Technology Review About About us Careers Custom content Advertise with us International Editions Republishing MIT News Help Help & FAQ My subscription Editorial guidelines Privacy policy Terms of Service Write for us Contact us twitterlink opens in a new window facebooklink opens in a new window instagramlink opens in a new window rsslink opens in a new window linkedinlink opens in a new window
